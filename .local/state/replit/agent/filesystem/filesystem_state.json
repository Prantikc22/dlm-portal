{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nLogicwerk is a multi-sector B2B jobwork marketplace designed as a buyer-first platform where businesses can submit RFQs (Request for Quotations) through an industry-specific configurator. The system follows a strict middleman model where Logicwerk admin manages all supplier interactions, ensuring supplier identities remain hidden from buyers. The platform supports multiple industries including mechanical manufacturing, electronics, packaging, textiles, and construction, with a comprehensive RFQ-to-order workflow including quotes, curated offers, and payment processing.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe application uses a React-based frontend built with Vite and TypeScript, implementing a multi-portal architecture with role-based access control. The UI leverages shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling. The architecture supports three distinct user interfaces: Buyer Portal, Supplier Portal, and Admin Portal, each with role-specific navigation and functionality.\n\n## Backend Architecture\nThe backend utilizes a hybrid approach combining Express.js for API routing with PostgreSQL database management through Drizzle ORM. The system implements a comprehensive database schema with role-based row-level security (RLS) policies. The architecture supports the core business logic of RFQ management, supplier invitations, quote collection, and order processing while maintaining strict data isolation between different user roles.\n\n## Authentication and Authorization\nThe system implements a role-based authentication system with three primary roles: buyer, supplier, and admin. Authentication is currently implemented with a simplified session-based approach suitable for development, with provisions for production-ready authentication integration. Role separation is enforced both at the API level and through database RLS policies.\n\n## Data Storage Solutions\nPostgreSQL serves as the primary database, accessed through Drizzle ORM for type-safe database operations. The schema includes comprehensive tables for users, companies, supplier profiles, SKUs (Stock Keeping Units), RFQs, quotes, curated offers, orders, and supporting entities. The database design enforces business rules through foreign key constraints and enum types for status management.\n\n## Core Business Logic\nThe platform implements a sophisticated RFQ workflow starting with industry selection, process selection, and detailed configurator forms. Suppliers are invited by admins to respond to specific RFQs, with all communications flowing through the Logicwerk platform. The system supports quote aggregation, offer curation by admins, and order management with payment integration capabilities.\n\n## SKU and Industry Management\nThe application includes a comprehensive SKU system that maps industries to specific manufacturing processes. This enables the configurator to present relevant options based on the selected industry and process, ensuring buyers can accurately specify their requirements while suppliers receive well-structured RFQ information.\n\n# External Dependencies\n\n- **Neon Database**: PostgreSQL hosting service integrated through @neondatabase/serverless for database connectivity\n- **Drizzle ORM**: Type-safe database toolkit for PostgreSQL operations and schema management\n- **Radix UI**: Headless component library providing accessible UI primitives for forms, dialogs, and interactive elements\n- **React Query**: Data fetching and state management library for efficient API communication and caching\n- **Tailwind CSS**: Utility-first CSS framework for responsive design and component styling\n- **Zod**: TypeScript-first schema validation library for form validation and API data validation\n- **React Hook Form**: Performant form library with built-in validation support\n- **Font Awesome**: Icon library for consistent iconography across the application\n- **shadcn/ui**: Component library built on Radix UI providing pre-styled, accessible components\n- **Wouter**: Lightweight routing library for client-side navigation\n- **date-fns**: Date manipulation library for formatting and date calculations","size_bytes":4249},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"system-ui\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Menlo\", \"Monaco\", \"monospace\"],\n      },\n      boxShadow: {\n        '2xs': 'var(--shadow-2xs)',\n        'xs': 'var(--shadow-xs)',\n        'sm': 'var(--shadow-sm)',\n        DEFAULT: 'var(--shadow)',\n        'md': 'var(--shadow-md)',\n        'lg': 'var(--shadow-lg)',\n        'xl': 'var(--shadow-xl)',\n        '2xl': 'var(--shadow-2xl)',\n      },\n      letterSpacing: {\n        normal: 'var(--tracking-normal)',\n      },\n      spacing: {\n        'base': 'var(--spacing)',\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          from: {\n            opacity: \"0\",\n          },\n          to: {\n            opacity: \"1\",\n          },\n        },\n        \"slide-in-from-top\": {\n          from: {\n            transform: \"translateY(-10px)\",\n            opacity: \"0\",\n          },\n          to: {\n            transform: \"translateY(0)\",\n            opacity: \"1\",\n          },\n        },\n        \"slide-in-from-bottom\": {\n          from: {\n            transform: \"translateY(10px)\",\n            opacity: \"0\",\n          },\n          to: {\n            transform: \"translateY(0)\",\n            opacity: \"1\",\n          },\n        },\n        \"slide-in-from-left\": {\n          from: {\n            transform: \"translateX(-10px)\",\n            opacity: \"0\",\n          },\n          to: {\n            transform: \"translateX(0)\",\n            opacity: \"1\",\n          },\n        },\n        \"slide-in-from-right\": {\n          from: {\n            transform: \"translateX(10px)\",\n            opacity: \"0\",\n          },\n          to: {\n            transform: \"translateX(0)\",\n            opacity: \"1\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.3s ease-out\",\n        \"slide-in-from-top\": \"slide-in-from-top 0.3s ease-out\",\n        \"slide-in-from-bottom\": \"slide-in-from-bottom 0.3s ease-out\",\n        \"slide-in-from-left\": \"slide-in-from-left 0.3s ease-out\",\n        \"slide-in-from-right\": \"slide-in-from-right 0.3s ease-out\",\n      },\n    },\n  },\n  plugins: [\n    require(\"tailwindcss-animate\"), \n    require(\"@tailwindcss/typography\"),\n    require(\"@tailwindcss/forms\")({\n      strategy: 'class',\n    }),\n  ],\n} satisfies Config;\n","size_bytes":4767},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: false, limit: '50mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2098},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertCompanySchema, insertSupplierProfileSchema, insertRFQSchema, insertQuoteSchema, insertDocumentSchema, insertCuratedOfferSchema, insertNotificationSchema, insertPaymentMethodSchema, insertPaymentConfigurationSchema, insertPaymentTransactionSchema, supplierVerificationEnum, offerDetailsSchema, rfqDetailsSchema, type OfferDetails, type RFQDetails } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { ZodError } from \"zod\";\n\n// Validation schemas for admin endpoints\nconst supplierStatusUpdateSchema = z.object({\n  supplierId: z.string().uuid(\"Invalid supplier ID format\"),\n  status: z.enum([\"unverified\", \"bronze\", \"silver\", \"gold\"], {\n    errorMap: () => ({ message: \"Status must be one of: unverified, bronze, silver, gold\" })\n  })\n});\n\n// Secure authentication interface\ninterface AuthenticatedRequest extends Request {\n  user?: {\n    id: string;\n    email: string;\n    role: string;\n    companyId?: string;\n  };\n}\n\n// JWT Authentication Middleware - Replaces insecure header-based auth\nconst authenticateUser = async (req: any, res: any, next: any) => {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({ error: \"Authentication required - Bearer token missing\" });\n    }\n\n    const token = authHeader.substring(7);\n    const jwtSecret = process.env.JWT_SECRET || process.env.SUPABASE_JWT_SECRET || process.env.SESSION_SECRET;\n    \n    if (!jwtSecret) {\n      console.error('❌ JWT_SECRET or SUPABASE_JWT_SECRET not configured');\n      return res.status(500).json({ error: \"Authentication configuration error\" });\n    }\n\n    let decoded: any;\n    try {\n      decoded = jwt.verify(token, jwtSecret);\n    } catch (jwtError: any) {\n      if (jwtError.name === 'TokenExpiredError') {\n        return res.status(401).json({ error: \"Token expired\" });\n      } else if (jwtError.name === 'JsonWebTokenError') {\n        return res.status(401).json({ error: \"Invalid token\" });\n      }\n      return res.status(401).json({ error: \"Token verification failed\" });\n    }\n\n    // Extract user info from JWT payload (Supabase format)\n    const userId = decoded.sub || decoded.user_id;\n    const userEmail = decoded.email;\n    const userRole = decoded.user_metadata?.role || decoded.role;\n    \n    if (!userId || !userEmail) {\n      return res.status(401).json({ error: \"Invalid token payload\" });\n    }\n\n    // Verify user exists in database and get current data\n    const user = await storage.getUserByEmail(userEmail);\n    if (!user) {\n      return res.status(401).json({ error: \"User not found\" });\n    }\n\n    // Use database role as authoritative source\n    req.user = {\n      id: user.id,\n      email: user.email,\n      role: user.role,\n      companyId: user.companyId\n    };\n    \n    next();\n  } catch (error) {\n    console.error('Authentication error:', error);\n    return res.status(500).json({ error: \"Authentication failed\" });\n  }\n};\n\n// Fallback authentication for development (with warning)\nconst authenticateUserLegacy = async (req: any, res: any, next: any) => {\n  console.warn('⚠️  SECURITY WARNING: Using insecure header-based authentication. Deploy with proper JWT_SECRET!');\n  \n  const userEmail = req.headers['x-user-email'] as string;\n  if (!userEmail) {\n    return res.status(401).json({ error: \"Authentication required\" });\n  }\n\n  const user = await storage.getUserByEmail(userEmail);\n  if (!user) {\n    return res.status(401).json({ error: \"User not found\" });\n  }\n\n  req.user = user;\n  next();\n};\n\n// Smart authentication middleware that uses JWT when available, falls back to legacy\nconst authenticateUserSmart = async (req: any, res: any, next: any) => {\n  const jwtSecret = process.env.JWT_SECRET || process.env.SUPABASE_JWT_SECRET || process.env.SESSION_SECRET;\n  \n  if (jwtSecret) {\n    return authenticateUser(req, res, next);\n  } else {\n    return authenticateUserLegacy(req, res, next);\n  }\n};\n\nconst requireRole = (roles: string[]) => (req: any, res: any, next: any) => {\n  if (!req.user || !roles.includes(req.user.role)) {\n    return res.status(403).json({ error: \"Insufficient permissions\" });\n  }\n  next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { email, password, name, role, companyName } = req.body;\n      \n      if (!email || !password || !name || !role || !companyName) {\n        return res.status(400).json({ error: \"All fields are required\" });\n      }\n      \n      // Validate role - only allow buyer and supplier registration\n      if (role !== \"buyer\" && role !== \"supplier\") {\n        return res.status(400).json({ error: \"Invalid role. Only buyer and supplier registration allowed.\" });\n      }\n      \n      // Check if email already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(409).json({ error: \"Email already registered\" });\n      }\n      \n      // Hash the password before storing\n      const saltRounds = 10;\n      const hashedPassword = await bcrypt.hash(password, saltRounds);\n      \n      // Create company first\n      const company = await storage.createCompany({ name: companyName });\n      \n      // Create user with company reference - enforce validated role\n      const userToCreate = {\n        email,\n        password: hashedPassword,\n        name,\n        role: role as \"buyer\" | \"supplier\", // Type-safe role assignment\n        companyId: company.id\n      };\n      \n      const user = await storage.createUser(userToCreate);\n      \n      // Generate JWT token for registration\n      const jwtSecret = process.env.JWT_SECRET || process.env.SUPABASE_JWT_SECRET || process.env.SESSION_SECRET;\n      let token = null;\n      \n      if (jwtSecret) {\n        token = jwt.sign(\n          {\n            sub: user.id,\n            user_id: user.id,\n            email: user.email,\n            role: user.role,\n            user_metadata: { role: user.role },\n            exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // 24 hours\n          },\n          jwtSecret\n        );\n      }\n      \n      const response: { \n        user: { id: string; email: string; role: string; companyId: string | null; };\n        token?: string;\n      } = { \n        user: { id: user.id, email: user.email, role: user.role, companyId: user.companyId }\n      };\n      \n      if (token) {\n        response.token = token;\n      }\n      \n      res.json(response);\n    } catch (error) {\n      console.error('Registration error:', error);\n      res.status(500).json({ error: \"Registration failed. Please try again.\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ error: \"Email and password are required\" });\n      }\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ error: \"Invalid email or password\" });\n      }\n      \n      // Verify password\n      const isPasswordValid = await bcrypt.compare(password, user.password);\n      if (!isPasswordValid) {\n        return res.status(401).json({ error: \"Invalid email or password\" });\n      }\n      \n      // Generate JWT token\n      const jwtSecret = process.env.JWT_SECRET || process.env.SUPABASE_JWT_SECRET || process.env.SESSION_SECRET;\n      let token = null;\n      \n      if (jwtSecret) {\n        token = jwt.sign(\n          {\n            sub: user.id,\n            user_id: user.id,\n            email: user.email,\n            role: user.role,\n            user_metadata: { role: user.role },\n            exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // 24 hours\n          },\n          jwtSecret\n        );\n      }\n      \n      const response: { \n        user: { id: string; email: string; role: string; companyId: string | null; };\n        token?: string;\n      } = { \n        user: { id: user.id, email: user.email, role: user.role, companyId: user.companyId }\n      };\n      \n      if (token) {\n        response.token = token;\n      }\n      \n      res.json(response);\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ error: \"Login failed\" });\n    }\n  });\n\n  // SKU routes (public)\n  app.get(\"/api/skus\", async (req, res) => {\n    try {\n      const skus = await storage.getAllSKUs();\n      res.json(skus);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch SKUs\" });\n    }\n  });\n\n  app.get(\"/api/skus/:code\", async (req, res) => {\n    try {\n      const sku = await storage.getSKUByCode(req.params.code);\n      if (!sku) {\n        return res.status(404).json({ error: \"SKU not found\" });\n      }\n      res.json(sku);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch SKU\" });\n    }\n  });\n\n  app.get(\"/api/skus/industry/:industry\", async (req, res) => {\n    try {\n      const skus = await storage.getSKUsByIndustry(req.params.industry);\n      res.json(skus);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch SKUs\" });\n    }\n  });\n\n  // Protected routes with secure authentication\n  app.use(\"/api/protected\", authenticateUserSmart);\n\n  // Buyer-specific routes\n  app.get(\"/api/protected/buyer/offers\", async (req: AuthenticatedRequest, res) => {\n    try {\n      // Get all published curated offers for this buyer\n      const offers = await storage.getCuratedOffersByBuyer(req.user!.id);\n      \n      // Calculate totalPrice for each offer based on RFQ quantity\n      const enrichedOffers = await Promise.all(offers.map(async (offer: any) => {\n        try {\n          // Get the RFQ to find total quantity across all items\n          const rfq = await storage.getRFQ(offer.rfqId);\n          const parsedRfqDetails = rfqDetailsSchema.safeParse(rfq?.details);\n          const parsedOfferDetails = offerDetailsSchema.safeParse(offer.details);\n          \n          // Calculate total quantity by summing all RFQ items\n          const totalQuantity = parsedRfqDetails.success ? \n            parsedRfqDetails.data.items.reduce((sum, item) => sum + (item.quantity || 1), 0) : 100;\n          const unitPrice = parsedOfferDetails.success ? parsedOfferDetails.data.unitPrice : 0;\n          const totalPrice = unitPrice * totalQuantity;\n          \n          return {\n            ...offer,\n            // Keep the unit price separate from total price\n            unitPrice: unitPrice,\n            totalPrice: totalPrice,\n            quantity: totalQuantity,\n            // Update details to ensure consistency\n            details: {\n              ...offer.details,\n              unitPrice: unitPrice,\n              quantity: totalQuantity\n            }\n          };\n        } catch (error) {\n          console.error('Error enriching offer:', error);\n          // Fallback calculation\n          const unitPrice = offer.details?.unitPrice || 0;\n          const fallbackQuantity = 100;\n          return {\n            ...offer,\n            unitPrice: unitPrice,\n            totalPrice: unitPrice * fallbackQuantity,\n            quantity: fallbackQuantity,\n            details: {\n              ...offer.details,\n              unitPrice: unitPrice,\n              quantity: fallbackQuantity\n            }\n          };\n        }\n      }));\n      \n      res.json(enrichedOffers);\n    } catch (error) {\n      console.error('Get buyer offers error:', error);\n      res.status(500).json({ error: \"Failed to fetch offers\" });\n    }\n  });\n\n  // Company routes\n  app.post(\"/api/protected/companies\", async (req: AuthenticatedRequest, res) => {\n    try {\n      const companyData = insertCompanySchema.parse(req.body);\n      const company = await storage.createCompany(companyData);\n      \n      // Update user's company association\n      await storage.updateUserCompany(req.user!.id, company.id);\n      \n      res.json(company);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid company data\" });\n    }\n  });\n\n  // Supplier routes\n  app.post(\"/api/protected/suppliers/profile\", requireRole([\"supplier\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      if (!req.user!.companyId) {\n        return res.status(400).json({ error: \"Company required\" });\n      }\n\n      const profileData = insertSupplierProfileSchema.parse({\n        ...req.body,\n        companyId: req.user!.companyId\n      });\n      \n      const profile = await storage.createSupplierProfile(profileData);\n      res.json(profile);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid profile data\" });\n    }\n  });\n\n  app.get(\"/api/protected/suppliers/invites\", requireRole([\"supplier\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const invites = await storage.getSupplierInvites(req.user!.id);\n      res.json(invites);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch invites\" });\n    }\n  });\n\n  // RFQ routes\n  app.post(\"/api/protected/rfqs\", requireRole([\"buyer\"]), async (req: AuthenticatedRequest, res) => {\n    console.log(\"🔵 RFQ Creation Request:\", { \n      userId: req.user?.id, \n      userEmail: req.user?.email,\n      bodyKeys: Object.keys(req.body),\n      title: req.body?.title \n    });\n    try {\n      // Security: Remove any client-provided buyerId to prevent spoofing attacks\n      const { buyerId: _ignored, ...requestBody } = req.body;\n      \n      // Enforce server-side buyerId assignment from authenticated user\n      const rfqData = insertRFQSchema.parse({\n        ...requestBody,\n        buyerId: req.user!.id  // Always use authenticated user's ID\n      });\n      \n      const rfq = await storage.createRFQ(rfqData);\n      console.log(\"✅ RFQ Created Successfully:\", { id: rfq.id, rfqNumber: rfq.rfqNumber, title: rfq.title });\n      res.json(rfq);\n    } catch (error) {\n      console.error(\"❌ RFQ Creation Failed:\", error);\n      \n      if (error instanceof ZodError) {\n        // Extract meaningful validation error messages\n        const validationErrors = error.errors.map(err => ({\n          field: err.path.join('.'),\n          message: err.message\n        }));\n        \n        return res.status(400).json({ \n          error: \"Validation failed\", \n          details: validationErrors \n        });\n      }\n      \n      res.status(400).json({ error: \"Invalid RFQ data\" });\n    }\n  });\n\n  app.get(\"/api/protected/rfqs\", authenticateUserSmart, async (req: AuthenticatedRequest, res) => {\n    console.log(\"🔍 RFQ Retrieval Request:\", { \n      userId: req.user?.id, \n      userEmail: req.user?.email, \n      userRole: req.user?.role \n    });\n    try {\n      let rfqs: any[] = [];\n      if (req.user!.role === \"buyer\") {\n        rfqs = await storage.getRFQsByBuyer(req.user!.id);\n        console.log(`📋 Found ${rfqs.length} RFQs for buyer ${req.user!.id}`);\n      } else if (req.user!.role === \"supplier\") {\n        const invites = await storage.getSupplierInvites(req.user!.id);\n        rfqs = invites.map(invite => invite.rfq);\n        console.log(`📋 Found ${rfqs.length} invited RFQs for supplier ${req.user!.id}`);\n      } else if (req.user!.role === \"admin\") {\n        rfqs = await storage.getAllRFQs();\n        console.log(`📋 Found ${rfqs.length} RFQs for admin ${req.user!.id}`);\n      } else {\n        rfqs = [];\n        console.log(\"📋 Unknown role - returning empty RFQs list\");\n      }\n      res.json(rfqs);\n    } catch (error) {\n      console.error(\"❌ RFQ Retrieval Failed:\", error);\n      res.status(500).json({ error: \"Failed to fetch RFQs\" });\n    }\n  });\n\n  // Get individual RFQ details\n  app.get(\"/api/protected/rfqs/:id\", authenticateUserSmart, async (req: AuthenticatedRequest, res) => {\n    try {\n      const rfqId = req.params.id;\n      const rfq = await storage.getRFQ(rfqId);\n      \n      if (!rfq) {\n        return res.status(404).json({ error: \"RFQ not found\" });\n      }\n\n      // Check permissions\n      if (req.user!.role === \"buyer\" && rfq.buyerId !== req.user!.id) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n      \n      if (req.user!.role === \"supplier\") {\n        // Check if supplier is invited to this RFQ\n        const invites = await storage.getSupplierInvites(req.user!.id);\n        const hasInvite = invites.some(invite => invite.rfq.id === rfqId);\n        if (!hasInvite) {\n          return res.status(403).json({ error: \"Access denied\" });\n        }\n      }\n\n      res.json(rfq);\n    } catch (error) {\n      console.error(\"❌ RFQ Detail Retrieval Failed:\", error);\n      res.status(500).json({ error: \"Failed to fetch RFQ details\" });\n    }\n  });\n\n  // Update RFQ status (admin only)\n  app.patch(\"/api/protected/rfqs/:id/status\", requireRole([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const rfqId = req.params.id;\n      const { status } = req.body;\n      \n      if (!status) {\n        return res.status(400).json({ error: \"Status is required\" });\n      }\n\n      const validStatuses = ['draft', 'submitted', 'under_review', 'quoted', 'completed', 'cancelled'];\n      if (!validStatuses.includes(status)) {\n        return res.status(400).json({ error: \"Invalid status\" });\n      }\n\n      await storage.updateRFQStatus(rfqId, status);\n      res.json({ success: true, status });\n    } catch (error) {\n      console.error(\"❌ RFQ Status Update Failed:\", error);\n      res.status(500).json({ error: \"Failed to update RFQ status\" });\n    }\n  });\n\n\n  // Quote routes\n  app.post(\"/api/protected/quotes\", requireRole([\"supplier\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const quoteData = insertQuoteSchema.parse({\n        ...req.body,\n        supplierId: req.user!.id\n      });\n      \n      const quote = await storage.createQuote(quoteData);\n      res.json(quote);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid quote data\" });\n    }\n  });\n\n  app.get(\"/api/protected/quotes\", requireRole([\"supplier\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const quotes = await storage.getQuotesBySupplier(req.user!.id);\n      res.json(quotes);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch quotes\" });\n    }\n  });\n\n  // Admin routes\n  app.post(\"/api/protected/admin/invite\", requireRole([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { rfqId, supplierIds } = req.body;\n      \n      for (const supplierId of supplierIds) {\n        await storage.createSupplierInvite(rfqId, supplierId, req.user!.id);\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to send invites\" });\n    }\n  });\n\n  app.get(\"/api/protected/admin/suppliers\", requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const suppliers = await storage.getSuppliersByCapabilities([]);\n      res.json(suppliers);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch suppliers\" });\n    }\n  });\n\n  // Admin RFQ management\n  app.get(\"/api/protected/admin/rfqs\", requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const rfqs = await storage.getAllRFQs();\n      res.json(rfqs);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch RFQs\" });\n    }\n  });\n\n  // Admin supplier status update with proper validation\n  app.post(\"/api/protected/admin/supplier-status\", requireRole([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      // Validate request body with Zod schema\n      const validationResult = supplierStatusUpdateSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: \"Validation failed\", \n          details: validationResult.error.errors.map(err => ({\n            field: err.path.join('.'),\n            message: err.message\n          }))\n        });\n      }\n\n      const { supplierId, status } = validationResult.data;\n\n      // Find the supplier's company ID first\n      const supplier = await storage.getUser(supplierId);\n      if (!supplier || supplier.role !== 'supplier') {\n        return res.status(404).json({ error: \"Supplier not found\" });\n      }\n      \n      if (!supplier.companyId) {\n        return res.status(404).json({ error: \"Supplier has no company associated\" });\n      }\n\n      // Verify supplier profile exists before updating\n      const supplierProfile = await storage.getSupplierProfile(supplier.companyId);\n      if (!supplierProfile) {\n        return res.status(404).json({ error: \"Supplier profile not found\" });\n      }\n\n      // Perform the update\n      const updateResult = await storage.updateSupplierVerificationStatus(supplier.companyId, status);\n      \n      // Return success with updated information\n      res.json({ \n        success: true,\n        supplierId: supplierId,\n        companyId: supplier.companyId,\n        previousStatus: supplierProfile.verifiedStatus,\n        newStatus: status,\n        updatedAt: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Supplier status update error:', error);\n      res.status(500).json({ error: \"Failed to update supplier status\" });\n    }\n  });\n\n  // Admin quotes access\n  app.get(\"/api/protected/admin/quotes\", requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const quotes = await storage.getAllQuotes();\n      res.json(quotes);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch quotes\" });\n    }\n  });\n\n  // Admin curated offers\n  app.get(\"/api/protected/admin/offers\", requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const rfqId = req.query.rfqId as string;\n      let offers;\n      if (rfqId) {\n        offers = await storage.getCuratedOffersByRFQ(rfqId);\n      } else {\n        offers = await storage.getCuratedOffers();\n      }\n      res.json(offers);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch offers\" });\n    }\n  });\n\n  app.post(\"/api/protected/admin/curated-offers\", requireRole([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      // Transform paymentDeadline from string to Date if present\n      const requestBody = { ...req.body };\n      if (requestBody.paymentDeadline && typeof requestBody.paymentDeadline === 'string') {\n        requestBody.paymentDeadline = new Date(requestBody.paymentDeadline);\n      }\n      \n      const offerData = insertCuratedOfferSchema.parse({\n        ...requestBody,\n        adminId: req.user!.id\n      });\n      \n      const offer = await storage.createCuratedOffer(offerData);\n      res.json(offer);\n    } catch (error) {\n      console.error('Create curated offer error:', error);\n      if (error instanceof ZodError) {\n        const validationErrors = error.errors.map(err => ({\n          field: err.path.join('.'),\n          message: err.message\n        }));\n        \n        return res.status(400).json({ \n          error: \"Validation failed\", \n          details: validationErrors \n        });\n      }\n      res.status(400).json({ error: \"Invalid offer data\" });\n    }\n  });\n\n  app.post(\"/api/protected/admin/offers/:id/publish\", requireRole([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const offerId = req.params.id;\n      await storage.publishCuratedOffer(offerId);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to publish offer\" });\n    }\n  });\n\n  // Admin metrics for dashboard\n  app.get(\"/api/protected/admin/metrics\", requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const metrics = await storage.getAdminMetrics();\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch metrics\" });\n    }\n  });\n\n  // Document upload routes\n  app.post(\"/api/protected/documents/upload\", authenticateUserSmart, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (!req.user!.companyId) {\n        return res.status(400).json({ error: \"Company required for document upload\" });\n      }\n\n      const { docType, fileName, fileData, metadata } = req.body;\n      \n      if (!docType || !fileName || !fileData) {\n        return res.status(400).json({ error: \"Document type, file name, and file data are required\" });\n      }\n\n      // Validate docType allowlist\n      const allowedDocTypes = [\n        'company_registration',\n        'gst_certificate', \n        'bank_statement',\n        'iso_certificate',\n        'product_samples',\n        'machine_photos'\n      ];\n      \n      if (!allowedDocTypes.includes(docType)) {\n        return res.status(400).json({ \n          error: \"Invalid document type\",\n          details: `Allowed types: ${allowedDocTypes.join(', ')}`\n        });\n      }\n\n      // Validate file content type from metadata\n      if (!metadata || !metadata.fileType) {\n        return res.status(400).json({ error: \"File type metadata required\" });\n      }\n\n      const allowedMimeTypes = ['application/pdf', 'image/jpeg', 'image/png'];\n      if (!allowedMimeTypes.includes(metadata.fileType)) {\n        return res.status(400).json({ \n          error: \"Invalid file type\",\n          details: \"Only PDF, JPEG, and PNG files are allowed\"\n        });\n      }\n\n      // Compute real byte size from base64 data\n      // Base64 adds ~33% overhead, but we need to account for data URL prefix\n      const base64Data = fileData.split(',')[1] || fileData; // Remove data URL prefix if present\n      const realByteSize = Math.ceil((base64Data.length * 3) / 4);\n\n      // Validate file size limits based on type\n      const isImage = metadata.fileType.startsWith('image/');\n      const maxSize = isImage ? 10 * 1024 * 1024 : 5 * 1024 * 1024; // 10MB for images, 5MB for documents\n      \n      if (realByteSize > maxSize) {\n        const maxSizeMB = maxSize / (1024 * 1024);\n        return res.status(413).json({ \n          error: \"File too large\",\n          details: `Maximum file size is ${maxSizeMB}MB for ${isImage ? 'images' : 'documents'}`\n        });\n      }\n\n      // Validate against client-reported file size for consistency\n      if (metadata.fileSize && Math.abs(metadata.fileSize - realByteSize) > 1024) {\n        return res.status(400).json({ \n          error: \"File size mismatch\",\n          details: \"Client-reported size doesn't match actual file size\"\n        });\n      }\n\n      // Create synthetic file reference (explicit that this is not real storage)\n      const fileRef = `synthetic://uploads/${req.user!.companyId}/${docType}/${Date.now()}-${fileName}`;\n\n      const documentData = insertDocumentSchema.parse({\n        companyId: req.user!.companyId,\n        docType,\n        fileRef,\n        metadata: {\n          ...metadata,\n          fileName,\n          fileSize: realByteSize, // Store actual byte size, not base64 length\n          fileSizeBytes: realByteSize,\n          uploadedAt: new Date().toISOString(),\n          storageType: 'synthetic', // Explicit marker for synthetic storage\n          validatedMimeType: metadata.fileType,\n          // Future: add fields for real storage like s3Key, cloudinaryId, etc.\n        },\n        uploadedBy: req.user!.id,\n      });\n\n      const document = await storage.createDocument(documentData);\n      \n      // TODO: In production, implement real file storage here:\n      // - Upload to Supabase Storage, AWS S3, or similar service\n      // - Store the real file URL/key in fileRef\n      // - Implement virus scanning if required\n      // - Generate thumbnails for images if needed\n      \n      res.json({\n        ...document,\n        message: \"Document uploaded successfully (synthetic storage)\"\n      });\n    } catch (error) {\n      console.error('Document upload error:', error);\n      \n      if (error instanceof ZodError) {\n        const validationErrors = error.errors.map(err => ({\n          field: err.path.join('.'),\n          message: err.message\n        }));\n        \n        return res.status(400).json({ \n          error: \"Validation failed\", \n          details: validationErrors \n        });\n      }\n      \n      res.status(500).json({ error: \"Failed to upload document\" });\n    }\n  });\n\n  app.get(\"/api/protected/documents\", authenticateUserSmart, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (!req.user!.companyId) {\n        return res.status(400).json({ error: \"Company required\" });\n      }\n\n      const documents = await storage.getDocumentsByCompany(req.user!.companyId);\n      res.json(documents);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch documents\" });\n    }\n  });\n\n  app.delete(\"/api/protected/documents/:id\", authenticateUserSmart, async (req: AuthenticatedRequest, res) => {\n    try {\n      // In a real implementation, you would also delete the actual file from storage\n      await storage.deleteDocument(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete document\" });\n    }\n  });\n\n  // Profile completion status endpoint\n  app.get(\"/api/protected/suppliers/profile-completion\", requireRole([\"supplier\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      if (!req.user!.companyId) {\n        return res.status(400).json({ error: \"Company required\" });\n      }\n\n      // Get company information\n      const company = await storage.getCompany(req.user!.companyId);\n      if (!company) {\n        return res.status(404).json({ error: \"Company not found\" });\n      }\n\n      // Get supplier profile\n      const supplierProfile = await storage.getSupplierProfile(req.user!.companyId);\n      \n      // Get uploaded documents\n      const documents = await storage.getDocumentsByCompany(req.user!.companyId);\n      \n      // Required document types for verification\n      const requiredDocTypes = [\n        'company_registration',\n        'gst_certificate', \n        'bank_statement'\n      ];\n      \n      // Check completion status for each step\n      const steps = {\n        companyInfo: {\n          completed: !!(company.name && company.city && company.state && company.address),\n          label: \"Company Information\",\n          description: \"Basic company details and address\"\n        },\n        supplierProfile: {\n          completed: !!(supplierProfile && supplierProfile.capabilities && supplierProfile.moqDefault),\n          label: \"Supplier Profile\", \n          description: \"Capabilities, MOQ, and certifications\"\n        },\n        documentUpload: {\n          completed: requiredDocTypes.every(docType => \n            documents.some(doc => doc.docType === docType)\n          ),\n          label: \"Document Upload\",\n          description: \"Required verification documents\",\n          uploadedDocs: documents.map(doc => doc.docType),\n          requiredDocs: requiredDocTypes\n        },\n        verification: {\n          completed: supplierProfile?.verifiedStatus !== 'unverified',\n          label: \"Verification Pending\",\n          description: \"Admin review and approval\",\n          status: supplierProfile?.verifiedStatus || 'unverified'\n        }\n      };\n\n      // Calculate overall completion percentage\n      const completedSteps = Object.values(steps).filter(step => step.completed).length;\n      const totalSteps = Object.keys(steps).length;\n      const completionPercentage = Math.round((completedSteps / totalSteps) * 100);\n      \n      // Determine if profile is fully complete (all steps except verification)\n      const profileComplete = steps.companyInfo.completed && \n                             steps.supplierProfile.completed && \n                             steps.documentUpload.completed;\n      \n      // Determine if supplier should see onboarding prompt\n      const shouldShowPrompt = !profileComplete || steps.verification.status === 'unverified';\n\n      res.json({\n        steps,\n        completionPercentage,\n        profileComplete,\n        shouldShowPrompt,\n        verificationStatus: steps.verification.status,\n        nextAction: !steps.companyInfo.completed ? 'complete_company_info' :\n                   !steps.supplierProfile.completed ? 'complete_profile' :\n                   !steps.documentUpload.completed ? 'upload_documents' :\n                   'await_verification'\n      });\n    } catch (error) {\n      console.error('Profile completion check error:', error);\n      res.status(500).json({ error: \"Failed to check profile completion status\" });\n    }\n  });\n\n  // Order routes\n  app.get(\"/api/protected/orders\", authenticateUserSmart, async (req: AuthenticatedRequest, res) => {\n    try {\n      let orders: any[] = [];\n      if (req.user!.role === \"buyer\") {\n        orders = await storage.getOrdersByBuyer(req.user!.id);\n      } else if (req.user!.role === \"supplier\") {\n        orders = await storage.getOrdersBySupplier(req.user!.id);\n      } else if (req.user!.role === \"admin\") {\n        orders = await storage.getAllOrders();\n      } else {\n        orders = []; // Default fallback\n      }\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch orders\" });\n    }\n  });\n\n  // Supplier payouts routes  \n  app.get(\"/api/protected/suppliers/payouts\", requireRole([\"supplier\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const payouts = await storage.getPayoutsBySupplier(req.user!.id);\n      res.json(payouts);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch payouts\" });\n    }\n  });\n\n  // Admin order management\n  app.get(\"/api/protected/admin/orders\", requireRole([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      // Fetch all orders using the getAllOrders method\n      const allOrders = await storage.getAllOrders();\n      res.json(allOrders);\n    } catch (error) {\n      console.error('Fetch admin orders error:', error);\n      res.status(500).json({ error: \"Failed to fetch orders\" });\n    }\n  });\n\n  // Fix order total amounts (recalculate from offer details)\n  app.post(\"/api/protected/admin/orders/:orderId/recalculate\", requireRole([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { orderId } = req.params;\n      \n      // Get the order and its associated offer (by ID or order number)\n      const allOrders = await storage.getAllOrders();\n      const order = allOrders.find(o => o.id === orderId || o.orderNumber === orderId);\n      if (!order) {\n        return res.status(404).json({ error: \"Order not found\" });\n      }\n\n      if (!order.curatedOfferId) {\n        return res.status(400).json({ error: \"Order has no associated curated offer\" });\n      }\n\n      const offer = await storage.getCuratedOffer(order.curatedOfferId);\n      if (!offer) {\n        return res.status(404).json({ error: \"Associated offer not found\" });\n      }\n\n      const rfq = await storage.getRFQ(offer.rfqId);\n      if (!rfq) {\n        return res.status(404).json({ error: \"Associated RFQ not found\" });\n      }\n\n      // Calculate correct total amount from offer details\n      let correctTotalAmount = '0';\n      const parsedOfferDetails = offerDetailsSchema.safeParse(offer.details);\n      const parsedRfqDetails = rfqDetailsSchema.safeParse(rfq.details);\n      \n      if (parsedOfferDetails.success && parsedRfqDetails.success) {\n        const offerDetails = parsedOfferDetails.data;\n        const rfqDetails = parsedRfqDetails.data;\n        \n        // Calculate base total: unitPrice * total quantity across all items\n        const itemsTotal = rfqDetails.items.reduce((sum: number, item) => {\n          return sum + (offerDetails.unitPrice * (item.quantity || 1));\n        }, 0);\n        \n        // Add tooling cost if specified\n        const toolingCost = offerDetails.toolingCost || 0;\n        correctTotalAmount = (itemsTotal + toolingCost).toString();\n        \n        console.log(`Recalculating order ${orderId}: unitPrice=${offerDetails.unitPrice}, items=${rfqDetails.items.length}, itemsTotal=${itemsTotal}, toolingCost=${toolingCost}, correctTotal=${correctTotalAmount}, previousTotal=${order.totalAmount}`);\n      } else if (offer.totalPrice) {\n        correctTotalAmount = offer.totalPrice.toString();\n      }\n\n      // Update the order total amount directly in database\n      await storage.updateOrderTotalAmount(orderId, correctTotalAmount);\n      \n      res.json({ \n        success: true, \n        message: `Order total recalculated successfully`,\n        previousAmount: order.totalAmount,\n        newAmount: correctTotalAmount,\n        orderId: orderId\n      });\n    } catch (error) {\n      console.error('Recalculate order total error:', error);\n      res.status(500).json({ error: \"Failed to recalculate order total\" });\n    }\n  });\n\n  // Notification routes\n  app.get(\"/api/protected/notifications\", authenticateUserSmart, async (req: AuthenticatedRequest, res) => {\n    try {\n      const notifications = await storage.getNotificationsByUser(req.user!.id);\n      res.json(notifications);\n    } catch (error) {\n      console.error('Fetch notifications error:', error);\n      res.status(500).json({ error: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.get(\"/api/protected/notifications/count\", authenticateUserSmart, async (req: AuthenticatedRequest, res) => {\n    try {\n      const count = await storage.getUnreadNotificationCount(req.user!.id);\n      res.json({ unreadCount: count });\n    } catch (error) {\n      console.error('Fetch notification count error:', error);\n      res.status(500).json({ error: \"Failed to fetch notification count\" });\n    }\n  });\n\n  app.put(\"/api/protected/notifications/:id/read\", authenticateUserSmart, async (req: AuthenticatedRequest, res) => {\n    try {\n      await storage.markNotificationAsRead(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Mark notification as read error:', error);\n      res.status(500).json({ error: \"Failed to mark notification as read\" });\n    }\n  });\n\n  app.put(\"/api/protected/notifications/read-all\", authenticateUserSmart, async (req: AuthenticatedRequest, res) => {\n    try {\n      await storage.markAllNotificationsAsRead(req.user!.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Mark all notifications as read error:', error);\n      res.status(500).json({ error: \"Failed to mark all notifications as read\" });\n    }\n  });\n\n  app.post(\"/api/protected/notifications\", requireRole([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const notificationData = insertNotificationSchema.parse(req.body);\n      const notification = await storage.createNotification(notificationData);\n      res.json(notification);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ error: \"Invalid notification data\", details: error.errors });\n      }\n      console.error('Create notification error:', error);\n      res.status(500).json({ error: \"Failed to create notification\" });\n    }\n  });\n\n  // Payment Management Routes\n  \n  // Admin Payment Method Management\n  app.get(\"/api/protected/admin/payment-methods\", requireRole([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const methods = await storage.getPaymentMethods();\n      res.json(methods);\n    } catch (error) {\n      console.error('Fetch payment methods error:', error);\n      res.status(500).json({ error: \"Failed to fetch payment methods\" });\n    }\n  });\n\n  app.get(\"/api/protected/payment-methods/active\", authenticateUserSmart, async (req: AuthenticatedRequest, res) => {\n    try {\n      const methods = await storage.getActivePaymentMethods();\n      res.json(methods);\n    } catch (error) {\n      console.error('Fetch active payment methods error:', error);\n      res.status(500).json({ error: \"Failed to fetch active payment methods\" });\n    }\n  });\n\n  app.post(\"/api/protected/admin/payment-methods\", requireRole([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const methodData = insertPaymentMethodSchema.parse(req.body);\n      const method = await storage.createPaymentMethod(methodData);\n      res.json(method);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ error: \"Invalid payment method data\", details: error.errors });\n      }\n      console.error('Create payment method error:', error);\n      res.status(500).json({ error: \"Failed to create payment method\" });\n    }\n  });\n\n  app.put(\"/api/protected/admin/payment-methods/:id\", requireRole([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const methodData = insertPaymentMethodSchema.partial().parse(req.body);\n      await storage.updatePaymentMethod(req.params.id, methodData);\n      res.json({ success: true });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ error: \"Invalid payment method data\", details: error.errors });\n      }\n      console.error('Update payment method error:', error);\n      res.status(500).json({ error: \"Failed to update payment method\" });\n    }\n  });\n\n  app.delete(\"/api/protected/admin/payment-methods/:id\", requireRole([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      await storage.deletePaymentMethod(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Delete payment method error:', error);\n      res.status(500).json({ error: \"Failed to delete payment method\" });\n    }\n  });\n\n  // Admin Payment Configuration Management\n  app.get(\"/api/protected/admin/payment-configurations\", requireRole([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const configurations = await storage.getPaymentConfigurations();\n      res.json(configurations);\n    } catch (error) {\n      console.error('Fetch payment configurations error:', error);\n      res.status(500).json({ error: \"Failed to fetch payment configurations\" });\n    }\n  });\n\n  app.get(\"/api/protected/payment-configurations/:type\", authenticateUserSmart, async (req: AuthenticatedRequest, res) => {\n    try {\n      const configuration = await storage.getPaymentConfiguration(req.params.type);\n      res.json(configuration);\n    } catch (error) {\n      console.error('Fetch payment configuration error:', error);\n      res.status(500).json({ error: \"Failed to fetch payment configuration\" });\n    }\n  });\n\n  app.post(\"/api/protected/admin/payment-configurations\", requireRole([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const configData = insertPaymentConfigurationSchema.parse(req.body);\n      const configuration = await storage.createPaymentConfiguration(configData);\n      res.json(configuration);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ error: \"Invalid payment configuration data\", details: error.errors });\n      }\n      console.error('Create payment configuration error:', error);\n      res.status(500).json({ error: \"Failed to create payment configuration\" });\n    }\n  });\n\n  app.put(\"/api/protected/admin/payment-configurations/:id\", requireRole([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const configData = insertPaymentConfigurationSchema.partial().parse(req.body);\n      await storage.updatePaymentConfiguration(req.params.id, configData);\n      res.json({ success: true });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ error: \"Invalid payment configuration data\", details: error.errors });\n      }\n      console.error('Update payment configuration error:', error);\n      res.status(500).json({ error: \"Failed to update payment configuration\" });\n    }\n  });\n\n  // Payment status webhook (for payment gateways)\n  app.post(\"/api/webhooks/payment-status\", async (req, res) => {\n    try {\n      const { transactionRef, status, curatedOfferId, amount } = req.body;\n      \n      // Verify webhook signature (in production, verify with payment gateway)\n      // const isValid = verifyWebhookSignature(req.headers, req.body);\n      // if (!isValid) return res.status(400).json({ error: \"Invalid signature\" });\n      \n      if (status === 'completed' && curatedOfferId) {\n        // Create payment transaction record\n        const transactionData = {\n          transactionRef,\n          curatedOfferId,\n          status: 'completed' as const,\n          amount: parseFloat(amount).toString(),\n          netAmount: parseFloat(amount).toString(),\n          transactionType: 'advance_payment' as const,\n          paymentMethod: 'online',\n          payerId: req.body.payerId // Should come from webhook\n        };\n        \n        const transaction = await storage.createPaymentTransaction(transactionData);\n        \n        // Auto-create order when payment is successful\n        const offer = await storage.getCuratedOffer(curatedOfferId);\n        if (offer) {\n          const rfq = await storage.getRFQ(offer.rfqId);\n          if (rfq) {\n            const quotes = await storage.getQuotesByRFQ(offer.rfqId);\n            const parsedOfferDetails = offerDetailsSchema.safeParse(offer.details);\n            const offerUnitPrice = parsedOfferDetails.success ? parsedOfferDetails.data.unitPrice : 0;\n            \n            const selectedQuote = quotes.find(q => \n              Math.abs((q.quoteJson as any)?.unitPrice - offerUnitPrice) < 0.01\n            ) || quotes[0];\n            \n            // Calculate correct total amount from offer details (NOT payment amount)\n            let totalAmount = '0';\n            const parsedRfqDetails = rfqDetailsSchema.safeParse(rfq.details);\n            \n            if (parsedOfferDetails.success && parsedRfqDetails.success) {\n              const offerDetails = parsedOfferDetails.data;\n              const rfqDetails = parsedRfqDetails.data;\n              \n              // Calculate base total: unitPrice * total quantity across all items\n              const itemsTotal = rfqDetails.items.reduce((sum: number, item) => {\n                return sum + (offerDetails.unitPrice * (item.quantity || 1));\n              }, 0);\n              \n              // Only add tooling cost if explicitly set\n              const toolingCost = offerDetails.toolingCost || 0;\n              totalAmount = (itemsTotal + toolingCost).toString();\n              \n              console.log(`Webhook order calculation: unitPrice=${offerDetails.unitPrice}, items=${rfqDetails.items.length}, itemsTotal=${itemsTotal}, toolingCost=${toolingCost}, finalTotal=${totalAmount}`);\n            } else if (offer.totalPrice) {\n              // Use the offer's total price if available\n              totalAmount = offer.totalPrice.toString();\n            }\n            \n            const orderData = {\n              rfqId: offer.rfqId,\n              curatedOfferId: offer.id,\n              buyerId: rfq.buyerId,\n              adminId: offer.adminId,\n              supplierId: selectedQuote?.supplierId,\n              status: 'deposit_paid',\n              totalAmount: totalAmount,\n              depositPaid: true,\n              escrowTxRef: transactionRef\n            };\n            \n            await storage.createOrder(orderData);\n            console.log(`✅ Order auto-created for payment ${transactionRef} with correct total: ${totalAmount}`);\n          }\n        }\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error('Payment webhook error:', error);\n      res.status(500).json({ error: \"Failed to process payment webhook\" });\n    }\n  });\n\n  // Manual payment status update (for testing or manual verification)\n  app.post(\"/api/protected/payment-status\", authenticateUserSmart, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { curatedOfferId, status, transactionRef } = req.body;\n      \n      // Only admin can manually update payment status\n      if (req.user!.role !== 'admin') {\n        return res.status(403).json({ error: \"Only admins can update payment status\" });\n      }\n      \n      // Create/update payment transaction\n      const transactionData = {\n        transactionRef: transactionRef || `MANUAL-${Date.now()}`,\n        curatedOfferId,\n        status,\n        payerId: req.user!.id,\n        paymentMethod: 'manual',\n        amount: '0', // Amount should be provided in real scenario\n        netAmount: '0',\n        transactionType: 'advance_payment' as const\n      };\n      \n      const transaction = await storage.createPaymentTransaction(transactionData);\n      \n      res.json({ \n        success: true, \n        message: `Payment status updated to ${status}`,\n        transaction \n      });\n    } catch (error) {\n      console.error('Manual payment status error:', error);\n      res.status(500).json({ error: \"Failed to update payment status\" });\n    }\n  });\n\n  // Payment Transaction Management\n  app.post(\"/api/protected/payment-transactions\", authenticateUserSmart, async (req: AuthenticatedRequest, res) => {\n    try {\n      const transactionData = insertPaymentTransactionSchema.parse({\n        ...req.body,\n        payerId: req.user!.id // Ensure payer is authenticated user\n      });\n      \n      const transaction = await storage.createPaymentTransaction(transactionData);\n      \n      // If payment is successful and linked to a curated offer, create order\n      if (transaction.status === 'completed' && transaction.curatedOfferId) {\n        try {\n          // Check for existing order to prevent duplicates using order records\n          const existingOrders = await storage.getAllOrders();\n          const hasExistingOrder = existingOrders.some(order => \n            order.curatedOfferId === transaction.curatedOfferId || \n            order.escrowTxRef === transaction.transactionRef\n          );\n          \n          if (!hasExistingOrder) {\n            const offer = await storage.getCuratedOffer(transaction.curatedOfferId);\n            if (offer) {\n              const rfq = await storage.getRFQ(offer.rfqId);\n              if (rfq) {\n                // Get the specific quote that was selected for this offer\n                const quotes = await storage.getQuotesByRFQ(offer.rfqId);\n                let selectedQuote = null;\n                let supplierId = null;\n                \n                // Try to find the selected quote from supplier indicators\n                if (offer.supplierIndicators && quotes.length > 0) {\n                  // Parse offer details safely\n                  const parsedOfferDetails = offerDetailsSchema.safeParse(offer.details);\n                  const offerDetails = parsedOfferDetails.success ? parsedOfferDetails.data : null;\n                  \n                  // Find the quote that matches the offer details\n                  selectedQuote = quotes.find(q => \n                    offerDetails?.unitPrice && Math.abs((q.quoteJson as any)?.unitPrice - offerDetails.unitPrice) < 0.01\n                  ) || quotes[0];\n                  supplierId = selectedQuote.supplierId;\n                } else {\n                  // Fallback to first quote\n                  selectedQuote = quotes[0];\n                  supplierId = selectedQuote?.supplierId || null;\n                }\n                \n                // Calculate total amount from offer details and RFQ items\n                let totalAmount = '0';\n                const parsedOfferDetails = offerDetailsSchema.safeParse(offer.details);\n                const parsedRfqDetails = rfqDetailsSchema.safeParse(rfq.details);\n                \n                if (parsedOfferDetails.success && parsedRfqDetails.success) {\n                  const offerDetails = parsedOfferDetails.data;\n                  const rfqDetails = parsedRfqDetails.data;\n                  \n                  // Calculate base total: unitPrice * total quantity across all items\n                  const itemsTotal = rfqDetails.items.reduce((sum: number, item) => {\n                    return sum + (offerDetails.unitPrice * (item.quantity || 1));\n                  }, 0);\n                  \n                  // Only add tooling cost if explicitly set - don't add it automatically\n                  const toolingCost = offerDetails.toolingCost || 0;\n                  totalAmount = (itemsTotal + toolingCost).toString();\n                  \n                  console.log(`Order calculation: unitPrice=${offerDetails.unitPrice}, items=${rfqDetails.items.length}, itemsTotal=${itemsTotal}, toolingCost=${toolingCost}, finalTotal=${totalAmount}`);\n                } else if (offer.totalPrice) {\n                  // Use the offer's total price if available\n                  totalAmount = offer.totalPrice.toString();\n                }\n                \n                const orderData = {\n                  rfqId: offer.rfqId,\n                  curatedOfferId: offer.id,\n                  buyerId: req.user!.id,\n                  adminId: offer.adminId,\n                  supplierId: supplierId,\n                  status: 'deposit_paid',\n                  totalAmount: totalAmount,\n                  depositPaid: true,\n                  escrowTxRef: transaction.transactionRef\n                };\n                \n                await storage.createOrder(orderData);\n                console.log(`Order created for payment transaction ${transaction.id} with supplier ${supplierId} and total ${totalAmount}`);\n              }\n            }\n          } else {\n            console.log(`Order already exists for curated offer ${transaction.curatedOfferId} or transaction ${transaction.transactionRef}`);\n          }\n        } catch (orderError) {\n          console.error('Failed to create order for payment transaction:', orderError);\n          // Don't fail the payment transaction if order creation fails\n        }\n\n        // Notify all admins about the completed payment\n        try {\n          const adminUsers = await storage.getUsersByRole('admin');\n          for (const admin of adminUsers) {\n            await storage.createNotification({\n              userId: admin.id,\n              type: 'payment_received',\n              title: 'Payment Completed',\n              message: `Buyer has completed advance payment for offer. Order has been automatically created and requires confirmation.`,\n              metadata: {\n                curatedOfferId: transaction.curatedOfferId,\n                transactionId: transaction.id,\n                payerId: transaction.payerId,\n                amount: transaction.amount\n              },\n              entityType: 'payment_transaction',\n              entityId: transaction.id\n            });\n          }\n          console.log(`Notified ${adminUsers.length} admins about completed payment ${transaction.id}`);\n        } catch (notificationError) {\n          console.error('Failed to create admin notifications for payment:', notificationError);\n          // Don't fail the payment transaction if notification creation fails\n        }\n      }\n      \n      res.json(transaction);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ error: \"Invalid payment transaction data\", details: error.errors });\n      }\n      console.error('Create payment transaction error:', error);\n      res.status(500).json({ error: \"Failed to create payment transaction\" });\n    }\n  });\n\n  app.get(\"/api/protected/payment-transactions/:id\", authenticateUserSmart, async (req: AuthenticatedRequest, res) => {\n    try {\n      const transaction = await storage.getPaymentTransaction(req.params.id);\n      if (!transaction) {\n        return res.status(404).json({ error: \"Payment transaction not found\" });\n      }\n      \n      // Check if user has access to this transaction\n      if (req.user!.role !== \"admin\" && transaction.payerId !== req.user!.id && transaction.recipientId !== req.user!.id) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n      \n      res.json(transaction);\n    } catch (error) {\n      console.error('Fetch payment transaction error:', error);\n      res.status(500).json({ error: \"Failed to fetch payment transaction\" });\n    }\n  });\n\n  app.get(\"/api/protected/payment-transactions/ref/:transactionRef\", authenticateUserSmart, async (req: AuthenticatedRequest, res) => {\n    try {\n      const transaction = await storage.getPaymentTransactionByRef(req.params.transactionRef);\n      if (!transaction) {\n        return res.status(404).json({ error: \"Payment transaction not found\" });\n      }\n      \n      // Check if user has access to this transaction\n      if (req.user!.role !== \"admin\" && transaction.payerId !== req.user!.id && transaction.recipientId !== req.user!.id) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n      \n      res.json(transaction);\n    } catch (error) {\n      console.error('Fetch payment transaction by ref error:', error);\n      res.status(500).json({ error: \"Failed to fetch payment transaction\" });\n    }\n  });\n\n  app.put(\"/api/protected/payment-transactions/:id/status\", authenticateUserSmart, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { status, gatewayResponse } = req.body;\n      \n      // Only admin can update transaction status\n      if (req.user!.role !== \"admin\") {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n      \n      await storage.updatePaymentTransactionStatus(req.params.id, status, gatewayResponse);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Update payment transaction status error:', error);\n      res.status(500).json({ error: \"Failed to update payment transaction status\" });\n    }\n  });\n\n  // Buyer Payment Tracking\n  app.get(\"/api/protected/buyer/payment-transactions\", requireRole([\"buyer\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const transactions = await storage.getPaymentTransactionsByPayer(req.user!.id);\n      res.json(transactions);\n    } catch (error) {\n      console.error('Fetch buyer payment transactions error:', error);\n      res.status(500).json({ error: \"Failed to fetch payment transactions\" });\n    }\n  });\n\n  app.get(\"/api/protected/payment-transactions/order/:orderId\", authenticateUserSmart, async (req: AuthenticatedRequest, res) => {\n    try {\n      const transactions = await storage.getPaymentTransactionsByOrder(req.params.orderId);\n      \n      // Check if user has access to this order's transactions\n      if (req.user!.role !== \"admin\") {\n        // For buyers and suppliers, verify they have access to the order\n        // This would typically require checking order ownership\n        // For now, we'll allow if they're involved in any transaction\n        const hasAccess = transactions.some(tx => \n          tx.payerId === req.user!.id || tx.recipientId === req.user!.id\n        );\n        if (!hasAccess) {\n          return res.status(403).json({ error: \"Access denied\" });\n        }\n      }\n      \n      res.json(transactions);\n    } catch (error) {\n      console.error('Fetch order payment transactions error:', error);\n      res.status(500).json({ error: \"Failed to fetch order payment transactions\" });\n    }\n  });\n\n  app.get(\"/api/protected/payment-transactions/offer/:curatedOfferId\", authenticateUserSmart, async (req: AuthenticatedRequest, res) => {\n    try {\n      const transactions = await storage.getPaymentTransactionsByOffer(req.params.curatedOfferId);\n      \n      // Check if user has access to this offer's transactions\n      if (req.user!.role !== \"admin\") {\n        const hasAccess = transactions.some(tx => \n          tx.payerId === req.user!.id || tx.recipientId === req.user!.id\n        );\n        if (!hasAccess) {\n          return res.status(403).json({ error: \"Access denied\" });\n        }\n      }\n      \n      res.json(transactions);\n    } catch (error) {\n      console.error('Fetch offer payment transactions error:', error);\n      res.status(500).json({ error: \"Failed to fetch offer payment transactions\" });\n    }\n  });\n\n  // Curated Offers with Payment Integration\n  app.get(\"/api/protected/curated-offers/:id\", authenticateUserSmart, async (req: AuthenticatedRequest, res) => {\n    try {\n      const offer = await storage.getCuratedOffer(req.params.id);\n      if (!offer) {\n        return res.status(404).json({ error: \"Curated offer not found\" });\n      }\n      res.json(offer);\n    } catch (error) {\n      console.error('Fetch curated offer error:', error);\n      res.status(500).json({ error: \"Failed to fetch curated offer\" });\n    }\n  });\n\n  app.put(\"/api/protected/admin/curated-offers/:id/payment\", requireRole([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const paymentData = z.object({\n        paymentLink: z.string().optional(),\n        advancePaymentAmount: z.number().optional(),\n        finalPaymentAmount: z.number().optional(),\n        paymentDeadline: z.string().transform(str => new Date(str)).optional(),\n        paymentTerms: z.string().optional(),\n      }).parse(req.body);\n      \n      await storage.updateCuratedOfferPayment(req.params.id, paymentData);\n      res.json({ success: true });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ error: \"Invalid payment data\", details: error.errors });\n      }\n      console.error('Update curated offer payment error:', error);\n      res.status(500).json({ error: \"Failed to update curated offer payment\" });\n    }\n  });\n\n  // Payment Gateway Webhook (prepared for Razorpay integration)\n  app.post(\"/api/webhooks/payment\", async (req, res) => {\n    try {\n      // This endpoint is prepared for Razorpay webhook integration\n      // Implementation would include:\n      // 1. Verify webhook signature\n      // 2. Extract payment data from webhook payload\n      // 3. Update payment transaction status\n      // 4. Trigger any post-payment actions\n      \n      console.log('Payment webhook received:', req.body);\n      \n      // For now, return success - actual implementation would be added when Razorpay is integrated\n      res.json({ status: \"received\" });\n    } catch (error) {\n      console.error('Payment webhook error:', error);\n      res.status(500).json({ error: \"Webhook processing failed\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":62243},"server/storage.ts":{"content":"import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport { eq, and, desc, like, inArray, sql, gte, isNotNull } from \"drizzle-orm\";\nimport { \n  users, companies, supplierProfiles, skus, rfqs, rfqItems, \n  supplierInvites, quotes, curatedOffers, orders, documents, notifications,\n  paymentMethods, paymentConfigurations, paymentTransactions,\n  type User, type Company, type SupplierProfile, type SKU, type RFQ, \n  type Quote, type CuratedOffer, type Order, type Document, type Notification,\n  type PaymentMethod, type PaymentConfiguration, type PaymentTransaction,\n  type InsertUser, type InsertCompany, type InsertSupplierProfile, \n  type InsertRFQ, type InsertQuote, type InsertDocument, type InsertCuratedOffer, type InsertNotification,\n  type InsertPaymentMethod, type InsertPaymentConfiguration, type InsertPaymentTransaction\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcrypt\";\n\n// In-memory storage for development/testing when database is unavailable\nclass InMemoryStorage implements IStorage {\n  private users: User[] = [];\n  private companies: Company[] = [];\n  private supplierProfiles: SupplierProfile[] = [];\n  private supplierInvites: any[] = [];\n  private documents: Document[] = [];\n  private notifications: Notification[] = [];\n  private paymentMethods: PaymentMethod[] = [];\n  private paymentConfigurations: PaymentConfiguration[] = [];\n  private paymentTransactions: PaymentTransaction[] = [];\n  private skus: SKU[] = [\n    // Mechanical Manufacturing Industry\n    {\n      id: randomUUID(),\n      code: \"MECH_CNC_001\",\n      industry: \"mechanical_manufacturing\",\n      processName: \"CNC Machining - Precision Parts\",\n      description: \"Precision CNC machining for mechanical components including brackets, housings, and custom parts\",\n      defaultMoq: 100,\n      defaultLeadTimeDays: 14,\n      parametersSchema: {\n        material: [\"Aluminum 6061\", \"Steel 4140\", \"Stainless Steel 316\"],\n        tolerance: \"±0.1mm\",\n        finish: [\"Anodized\", \"Powder Coated\", \"Raw\"]\n      },\n      active: true,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    },\n    {\n      id: randomUUID(),\n      code: \"MECH_CAST_001\",\n      industry: \"mechanical_manufacturing\",\n      processName: \"Investment Casting - Mechanical Components\",\n      description: \"Investment casting for complex mechanical parts with tight tolerances\",\n      defaultMoq: 500,\n      defaultLeadTimeDays: 21,\n      parametersSchema: {\n        material: [\"Aluminum A356\", \"Steel 1045\", \"Cast Iron\"],\n        complexity: [\"Simple\", \"Medium\", \"Complex\"],\n        finish: [\"As Cast\", \"Machined\", \"Painted\"]\n      },\n      active: true,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    },\n    {\n      id: randomUUID(),\n      code: \"MECH_SHEET_001\",\n      industry: \"mechanical_manufacturing\",\n      processName: \"Sheet Metal Fabrication\",\n      description: \"Sheet metal cutting, bending, and forming for custom fabrications\",\n      defaultMoq: 50,\n      defaultLeadTimeDays: 10,\n      parametersSchema: {\n        material: [\"Mild Steel\", \"Stainless Steel\", \"Aluminum\"],\n        thickness: [\"1mm\", \"2mm\", \"3mm\", \"5mm\"],\n        finish: [\"Galvanized\", \"Powder Coated\", \"Raw\"]\n      },\n      active: true,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    },\n    // Electronics & Electrical Industry\n    {\n      id: randomUUID(),\n      code: \"ELEC_PCB_001\",\n      industry: \"electronics_electrical\",\n      processName: \"PCB Manufacturing & Assembly\",\n      description: \"Complete PCB fabrication and SMT assembly services\",\n      defaultMoq: 50,\n      defaultLeadTimeDays: 10,\n      parametersSchema: {\n        layers: [\"2-Layer\", \"4-Layer\", \"6-Layer\", \"8-Layer\"],\n        thickness: \"1.6mm\",\n        finish: [\"HASL\", \"ENIG\", \"OSP\"]\n      },\n      active: true,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    },\n    {\n      id: randomUUID(),\n      code: \"ELEC_MOLD_001\",\n      industry: \"electronics_electrical\",\n      processName: \"Injection Molding - Electronics Housings\",\n      description: \"Injection molding for electronic device enclosures and housings\",\n      defaultMoq: 1000,\n      defaultLeadTimeDays: 18,\n      parametersSchema: {\n        material: [\"ABS\", \"PC\", \"PC+ABS\", \"Nylon\"],\n        color: [\"Black\", \"White\", \"Clear\", \"Custom\"],\n        texture: [\"Smooth\", \"Textured\", \"Matte\"]\n      },\n      active: true,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    },\n    // Packaging & Printing Industry\n    {\n      id: randomUUID(),\n      code: \"PACK_CORR_001\",\n      industry: \"packaging_printing\",\n      processName: \"Corrugated Box Manufacturing\",\n      description: \"Custom corrugated packaging and shipping boxes\",\n      defaultMoq: 1000,\n      defaultLeadTimeDays: 7,\n      parametersSchema: {\n        style: [\"Regular Slotted\", \"Full Overlap\", \"Half Slotted\"],\n        flute: [\"Single Wall\", \"Double Wall\", \"Triple Wall\"],\n        printing: [\"1 Color\", \"2 Color\", \"4 Color\", \"Digital\"]\n      },\n      active: true,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    },\n    {\n      id: randomUUID(),\n      code: \"PACK_FLEX_001\",\n      industry: \"packaging_printing\",\n      processName: \"Flexible Packaging - Pouches & Films\",\n      description: \"Flexible packaging solutions including pouches, films, and bags\",\n      defaultMoq: 5000,\n      defaultLeadTimeDays: 12,\n      parametersSchema: {\n        material: [\"PE\", \"PP\", \"PET\", \"Aluminum Foil\"],\n        type: [\"Stand-up Pouch\", \"Flat Pouch\", \"Roll Film\"],\n        printing: [\"Gravure\", \"Flexographic\", \"Digital\"]\n      },\n      active: true,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    },\n    // Textile & Leather Industry\n    {\n      id: randomUUID(),\n      code: \"TEXT_EMBB_001\",\n      industry: \"textile_leather\",\n      processName: \"Custom Embroidery Services\",\n      description: \"Custom embroidery for apparel, caps, and textile products\",\n      defaultMoq: 100,\n      defaultLeadTimeDays: 5,\n      parametersSchema: {\n        fabric: [\"Cotton\", \"Polyester\", \"Cotton Blend\", \"Denim\"],\n        colors: [\"1-3 Colors\", \"4-6 Colors\", \"7+ Colors\"],\n        size: [\"Small (2-3 inch)\", \"Medium (4-5 inch)\", \"Large (6+ inch)\"]\n      },\n      active: true,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    },\n    // Construction & Infrastructure Industry\n    {\n      id: randomUUID(),\n      code: \"CONST_STEEL_001\",\n      industry: \"construction_infrastructure\",\n      processName: \"Structural Steel Fabrication\",\n      description: \"Custom structural steel fabrication for construction and infrastructure\",\n      defaultMoq: 1,\n      defaultLeadTimeDays: 30,\n      parametersSchema: {\n        grade: [\"A36\", \"A572 Grade 50\", \"A992\"],\n        coating: [\"Galvanized\", \"Painted\", \"Raw\"],\n        certification: [\"AISC\", \"AWS D1.1\", \"Custom\"]\n      },\n      active: true,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n  ];\n  private rfqs: RFQ[] = [];\n  private quotes: Quote[] = [];\n  private orders: Order[] = [];\n  private curatedOffers: CuratedOffer[] = [];\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.find(u => u.id === id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return this.users.find(u => u.email === email);\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    return this.users.filter(u => u.role === role);\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const newUser: User = {\n      id: randomUUID(),\n      email: user.email,\n      password: user.password,\n      role: user.role || \"buyer\",\n      name: user.name || null,\n      companyId: user.companyId || null,\n      phone: user.phone || null,\n      isVerified: user.isVerified || false,\n      metadata: user.metadata || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.push(newUser);\n    return newUser;\n  }\n\n  async updateUserCompany(userId: string, companyId: string): Promise<void> {\n    const user = this.users.find(u => u.id === userId);\n    if (user) {\n      user.companyId = companyId;\n      user.updatedAt = new Date();\n    }\n  }\n\n  async getCompany(id: string): Promise<Company | undefined> {\n    return this.companies.find(c => c.id === id);\n  }\n\n  async createCompany(company: InsertCompany): Promise<Company> {\n    const newCompany: Company = {\n      id: randomUUID(),\n      name: company.name,\n      gstin: company.gstin || null,\n      pan: company.pan || null,\n      address: company.address || null,\n      city: company.city || null,\n      state: company.state || null,\n      country: company.country || \"India\",\n      documents: company.documents || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.companies.push(newCompany);\n    return newCompany;\n  }\n\n  async getSupplierProfile(companyId: string): Promise<SupplierProfile | undefined> {\n    return this.supplierProfiles.find(p => p.companyId === companyId);\n  }\n\n  async createSupplierProfile(profile: InsertSupplierProfile): Promise<SupplierProfile> {\n    const newProfile: SupplierProfile = {\n      id: randomUUID(),\n      companyId: profile.companyId,\n      capabilities: profile.capabilities || null,\n      machines: profile.machines || null,\n      moqDefault: profile.moqDefault || null,\n      capacityCalendar: profile.capacityCalendar || null,\n      certifications: profile.certifications || null,\n      verifiedStatus: profile.verifiedStatus || \"unverified\",\n      bankDetails: profile.bankDetails || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.supplierProfiles.push(newProfile);\n    return newProfile;\n  }\n\n  async getSuppliersByCapabilities(capabilities: string[]): Promise<Array<{ user: User; company: Company; profile: SupplierProfile }>> {\n    const suppliers = this.supplierProfiles.map(profile => {\n      const company = this.companies.find(c => c.id === profile.companyId);\n      const user = this.users.find(u => u.companyId === profile.companyId && u.role === \"supplier\");\n      \n      if (company && user) {\n        return { user, company, profile };\n      }\n      return null;\n    }).filter(Boolean) as Array<{ user: User; company: Company; profile: SupplierProfile }>;\n\n    if (capabilities.length === 0) {\n      return suppliers;\n    }\n\n    // Filter by capabilities\n    return suppliers.filter(supplier => {\n      const profileCapabilities = supplier.profile.capabilities as string[] || [];\n      return capabilities.some(cap => profileCapabilities.includes(cap));\n    });\n  }\n\n  async createDocument(document: InsertDocument): Promise<Document> {\n    const newDocument: Document = {\n      id: randomUUID(),\n      companyId: document.companyId || null,\n      docType: document.docType,\n      fileRef: document.fileRef,\n      metadata: document.metadata || null,\n      uploadedBy: document.uploadedBy || null,\n      uploadedAt: new Date(),\n    };\n    this.documents.push(newDocument);\n    return newDocument;\n  }\n\n  async getDocumentsByCompany(companyId: string): Promise<Document[]> {\n    return this.documents.filter(d => d.companyId === companyId);\n  }\n\n  async getDocumentsByType(companyId: string, docType: string): Promise<Document[]> {\n    return this.documents.filter(d => d.companyId === companyId && d.docType === docType);\n  }\n\n  async deleteDocument(id: string): Promise<void> {\n    const index = this.documents.findIndex(d => d.id === id);\n    if (index !== -1) {\n      this.documents.splice(index, 1);\n    }\n  }\n\n  async getAllSKUs(): Promise<SKU[]> { return this.skus; }\n  async getSKUByCode(): Promise<any> { return undefined; }\n  async getSKUsByIndustry(industry: string): Promise<SKU[]> {\n    return this.skus.filter(sku => sku.industry === industry && sku.active);\n  }\n  async createRFQ(rfq: InsertRFQ): Promise<RFQ> {\n    const rfqNumber = `RFQ-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`;\n    const newRFQ: RFQ = {\n      id: randomUUID(),\n      rfqNumber,\n      buyerId: rfq.buyerId,\n      title: rfq.title,\n      status: rfq.status || \"draft\",\n      details: rfq.details,\n      files: rfq.files || null,\n      ndaRequired: rfq.ndaRequired || false,\n      confidential: rfq.confidential || false,\n      budgetRange: rfq.budgetRange || null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.rfqs.push(newRFQ);\n    return newRFQ;\n  }\n  \n  async getRFQ(id: string): Promise<RFQ | undefined> {\n    return this.rfqs.find(r => r.id === id);\n  }\n  \n  async getRFQsByBuyer(buyerId: string): Promise<RFQ[]> {\n    return this.rfqs.filter(r => r.buyerId === buyerId);\n  }\n  async updateRFQStatus(id: string, status: string): Promise<void> {\n    const rfq = this.rfqs.find(r => r.id === id);\n    if (rfq) {\n      rfq.status = status as any;\n      rfq.updatedAt = new Date();\n    }\n  }\n\n  async createQuote(quote: InsertQuote): Promise<Quote> {\n    const newQuote: Quote = {\n      id: randomUUID(),\n      rfqId: quote.rfqId,\n      supplierId: quote.supplierId,\n      quoteJson: quote.quoteJson,\n      status: quote.status || \"draft\",\n      createdAt: new Date(),\n    };\n    this.quotes.push(newQuote);\n    return newQuote;\n  }\n\n  async getQuotesByRFQ(rfqId: string): Promise<Quote[]> {\n    return this.quotes.filter(q => q.rfqId === rfqId);\n  }\n\n  async getQuotesBySupplier(supplierId: string): Promise<Quote[]> {\n    return this.quotes.filter(q => q.supplierId === supplierId);\n  }\n\n  async createSupplierInvite(rfqId: string, supplierId: string, invitedBy: string): Promise<void> {\n    const invite = {\n      id: randomUUID(),\n      rfqId,\n      supplierId,\n      invitedBy,\n      invitedAt: new Date(),\n      status: \"invited\" as const,\n      responseDeadline: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now\n    };\n    this.supplierInvites.push(invite);\n  }\n\n  async getSupplierInvites(supplierId: string): Promise<Array<{ invite: any; rfq: RFQ }>> {\n    const invites = this.supplierInvites.filter(invite => invite.supplierId === supplierId);\n    return invites.map(invite => {\n      const rfq = this.rfqs.find(r => r.id === invite.rfqId);\n      return { invite, rfq: rfq! };\n    }).filter(item => item.rfq); // Only return invites with valid RFQs\n  }\n  async createOrder(orderData: any): Promise<Order> {\n    const orderNumber = `ORD-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`;\n    const newOrder: Order = {\n      id: randomUUID(),\n      orderNumber,\n      rfqId: orderData.rfqId,\n      curatedOfferId: orderData.curatedOfferId || null,\n      buyerId: orderData.buyerId,\n      adminId: orderData.adminId || null,\n      supplierId: orderData.supplierId || null,\n      status: orderData.status || \"created\",\n      depositPercent: orderData.depositPercent || 30,\n      depositPaid: orderData.depositPaid || false,\n      totalAmount: orderData.totalAmount || null,\n      escrowTxRef: orderData.escrowTxRef || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.orders.push(newOrder);\n    return newOrder;\n  }\n\n  async getOrdersByBuyer(buyerId: string): Promise<Order[]> {\n    return this.orders.filter(o => o.buyerId === buyerId);\n  }\n\n  async getOrdersBySupplier(supplierId: string): Promise<Order[]> {\n    return this.orders.filter(o => o.supplierId === supplierId);\n  }\n\n  async getAllOrders(): Promise<Order[]> {\n    return this.orders;\n  }\n\n\n  async updateOrderStatus(id: string, status: string): Promise<void> {\n    const order = this.orders.find(o => o.id === id);\n    if (order) {\n      order.status = status as any;\n      order.updatedAt = new Date();\n    }\n  }\n\n  async updateOrderTotalAmount(id: string, totalAmount: string): Promise<void> {\n    const order = this.orders.find(o => o.id === id);\n    if (order) {\n      order.totalAmount = totalAmount;\n      order.updatedAt = new Date();\n    }\n  }\n\n  // Admin-specific methods\n  async getAllRFQs(): Promise<RFQ[]> {\n    return this.rfqs;\n  }\n\n  async updateSupplierVerificationStatus(companyId: string, status: string): Promise<void> {\n    const profile = this.supplierProfiles.find(p => p.companyId === companyId);\n    if (profile) {\n      profile.verifiedStatus = status as any;\n      profile.updatedAt = new Date();\n    }\n  }\n\n  async getAdminMetrics(): Promise<{\n    activeRFQs: number;\n    verifiedSuppliers: number;\n    monthlyVolume: number;\n    successRate: number;\n  }> {\n    const activeRFQs = this.rfqs.filter(rfq => \n      rfq.status && ['submitted', 'under_review', 'invited', 'offers_published'].includes(rfq.status)\n    ).length;\n    \n    const verifiedSuppliers = this.supplierProfiles.filter(p => \n      p.verifiedStatus !== 'unverified'\n    ).length;\n\n    // Calculate real metrics from actual data\n    const currentMonth = new Date();\n    currentMonth.setDate(1);\n    currentMonth.setHours(0, 0, 0, 0);\n    \n    // Monthly volume: sum of all orders from current month\n    const monthlyOrders = this.orders.filter(order => \n      order.createdAt && new Date(order.createdAt) >= currentMonth\n    );\n    const monthlyVolume = monthlyOrders.reduce((sum, order) => {\n      // Extract price from order metadata or use 0\n      const price = typeof order.totalAmount === 'number' ? order.totalAmount : 0;\n      return sum + price;\n    }, 0);\n    \n    // Success rate: percentage of completed orders vs total orders\n    const totalCompletedOrders = this.orders.filter(order => \n      order.status && ['delivered', 'closed'].includes(order.status)\n    ).length;\n    const totalOrders = this.orders.length;\n    const successRate = totalOrders > 0 ? (totalCompletedOrders / totalOrders) * 100 : 0;\n\n    return {\n      activeRFQs,\n      verifiedSuppliers,\n      monthlyVolume: Math.round(monthlyVolume),\n      successRate: Math.round(successRate * 100) / 100, // Round to 2 decimal places\n    };\n  }\n\n  // Payment methods management\n  async getPaymentMethods(): Promise<PaymentMethod[]> {\n    return this.paymentMethods;\n  }\n\n  async getActivePaymentMethods(): Promise<PaymentMethod[]> {\n    return this.paymentMethods.filter(method => method.isActive);\n  }\n\n  async createPaymentMethod(method: InsertPaymentMethod): Promise<PaymentMethod> {\n    const newMethod: PaymentMethod = {\n      id: randomUUID(),\n      name: method.name,\n      type: method.type,\n      isActive: method.isActive ?? true,\n      configuration: method.configuration || null,\n      displayName: method.displayName,\n      description: method.description || null,\n      processingFeePercent: method.processingFeePercent || \"0\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.paymentMethods.push(newMethod);\n    return newMethod;\n  }\n\n  async updatePaymentMethod(id: string, data: Partial<InsertPaymentMethod>): Promise<void> {\n    const method = this.paymentMethods.find(m => m.id === id);\n    if (method) {\n      Object.assign(method, data, { updatedAt: new Date() });\n    }\n  }\n\n  async deletePaymentMethod(id: string): Promise<void> {\n    this.paymentMethods = this.paymentMethods.filter(m => m.id !== id);\n  }\n\n  // Payment configurations management\n  async getPaymentConfigurations(): Promise<PaymentConfiguration[]> {\n    return this.paymentConfigurations;\n  }\n\n  async getPaymentConfiguration(configType: string): Promise<PaymentConfiguration | undefined> {\n    return this.paymentConfigurations.find(config => config.configType === configType && config.isActive);\n  }\n\n  async createPaymentConfiguration(config: InsertPaymentConfiguration): Promise<PaymentConfiguration> {\n    const newConfig: PaymentConfiguration = {\n      id: randomUUID(),\n      configType: config.configType,\n      value: config.value,\n      description: config.description || null,\n      isActive: config.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.paymentConfigurations.push(newConfig);\n    return newConfig;\n  }\n\n  async updatePaymentConfiguration(id: string, data: Partial<InsertPaymentConfiguration>): Promise<void> {\n    const config = this.paymentConfigurations.find(c => c.id === id);\n    if (config) {\n      Object.assign(config, data, { updatedAt: new Date() });\n    }\n  }\n\n  // Payment transactions management\n  async createPaymentTransaction(transaction: InsertPaymentTransaction): Promise<PaymentTransaction> {\n    const newTransaction: PaymentTransaction = {\n      id: randomUUID(),\n      transactionRef: `TXN_${Date.now()}_${randomUUID().substring(0, 8)}`,\n      orderId: transaction.orderId || null,\n      curatedOfferId: transaction.curatedOfferId || null,\n      payerId: transaction.payerId,\n      recipientId: transaction.recipientId || null,\n      paymentMethodId: transaction.paymentMethodId || null,\n      amount: transaction.amount,\n      fees: transaction.fees || \"0\",\n      netAmount: transaction.netAmount,\n      currency: transaction.currency || \"INR\",\n      status: transaction.status || \"pending\",\n      transactionType: transaction.transactionType,\n      gatewayTransactionId: transaction.gatewayTransactionId || null,\n      gatewayResponse: transaction.gatewayResponse || null,\n      notes: transaction.notes || null,\n      processedAt: transaction.processedAt || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.paymentTransactions.push(newTransaction);\n    return newTransaction;\n  }\n\n  async getPaymentTransaction(id: string): Promise<PaymentTransaction | undefined> {\n    return this.paymentTransactions.find(tx => tx.id === id);\n  }\n\n  async getPaymentTransactionByRef(transactionRef: string): Promise<PaymentTransaction | undefined> {\n    return this.paymentTransactions.find(tx => tx.transactionRef === transactionRef);\n  }\n\n  async updatePaymentTransactionStatus(id: string, status: string, gatewayResponse?: any): Promise<void> {\n    const transaction = this.paymentTransactions.find(tx => tx.id === id);\n    if (transaction) {\n      transaction.status = status as any;\n      transaction.gatewayResponse = gatewayResponse || transaction.gatewayResponse;\n      if (status === \"completed\" || status === \"failed\") {\n        transaction.processedAt = new Date();\n      }\n      transaction.updatedAt = new Date();\n    }\n  }\n\n  async getPaymentTransactionsByPayer(payerId: string): Promise<PaymentTransaction[]> {\n    return this.paymentTransactions.filter(tx => tx.payerId === payerId);\n  }\n\n  async getPaymentTransactionsByOrder(orderId: string): Promise<PaymentTransaction[]> {\n    return this.paymentTransactions.filter(tx => tx.orderId === orderId);\n  }\n\n  async getPaymentTransactionsByOffer(curatedOfferId: string): Promise<PaymentTransaction[]> {\n    return this.paymentTransactions.filter(tx => tx.curatedOfferId === curatedOfferId);\n  }\n\n  // Curated offers with payment fields\n  async getCuratedOffer(id: string): Promise<CuratedOffer | undefined> {\n    return this.curatedOffers.find(offer => offer.id === id);\n  }\n\n  async getCuratedOffersByRFQ(rfqId: string): Promise<CuratedOffer[]> {\n    return this.curatedOffers.filter(offer => offer.rfqId === rfqId);\n  }\n\n  async updateCuratedOfferPayment(id: string, paymentData: {\n    paymentLink?: string;\n    advancePaymentAmount?: number;\n    finalPaymentAmount?: number;\n    paymentDeadline?: Date;\n    paymentTerms?: string;\n  }): Promise<void> {\n    const offer = this.curatedOffers.find(o => o.id === id);\n    if (offer) {\n      Object.assign(offer, paymentData);\n    }\n  }\n\n  async getAllQuotes(): Promise<Array<Quote & { rfq: RFQ; supplier: User }>> {\n    return this.quotes.map(quote => {\n      const rfq = this.rfqs.find(r => r.id === quote.rfqId)!;\n      const supplier = this.users.find(u => u.id === quote.supplierId)!;\n      return { ...quote, rfq, supplier };\n    }).filter(item => item.rfq && item.supplier);\n  }\n\n  async createCuratedOffer(offer: InsertCuratedOffer): Promise<CuratedOffer> {\n    const newOffer: CuratedOffer = {\n      id: randomUUID(),\n      rfqId: offer.rfqId,\n      adminId: offer.adminId,\n      title: offer.title,\n      details: offer.details,\n      totalPrice: offer.totalPrice || null,\n      supplierIndicators: offer.supplierIndicators || null,\n      publishedAt: null,\n      expiresAt: offer.expiresAt ? new Date(offer.expiresAt) : null,\n      paymentLink: offer.paymentLink || null,\n      advancePaymentAmount: offer.advancePaymentAmount || null,\n      finalPaymentAmount: offer.finalPaymentAmount || null,\n      paymentDeadline: offer.paymentDeadline ? new Date(offer.paymentDeadline) : null,\n      paymentTerms: offer.paymentTerms || null,\n    };\n    // Add to a curated offers array (we'll need to add this property)\n    if (!this.curatedOffers) this.curatedOffers = [];\n    this.curatedOffers.push(newOffer);\n    return newOffer;\n  }\n\n  async getCuratedOffers(): Promise<Array<CuratedOffer & { rfq: RFQ }>> {\n    if (!this.curatedOffers) this.curatedOffers = [];\n    return this.curatedOffers.map(offer => {\n      const rfq = this.rfqs.find(r => r.id === offer.rfqId)!;\n      return { ...offer, rfq };\n    }).filter(item => item.rfq);\n  }\n\n  async getCuratedOffersByBuyer(buyerId: string): Promise<Array<CuratedOffer & { rfq: RFQ }>> {\n    if (!this.curatedOffers) this.curatedOffers = [];\n    return this.curatedOffers\n      .filter(offer => offer.publishedAt !== null) // Only published offers\n      .map(offer => {\n        const rfq = this.rfqs.find(r => r.id === offer.rfqId && r.buyerId === buyerId);\n        return rfq ? { ...offer, rfq } : null;\n      })\n      .filter(item => item !== null) as Array<CuratedOffer & { rfq: RFQ }>;\n  }\n\n  async publishCuratedOffer(offerId: string): Promise<void> {\n    if (!this.curatedOffers) this.curatedOffers = [];\n    const offer = this.curatedOffers.find(o => o.id === offerId);\n    if (offer) {\n      offer.publishedAt = new Date();\n    }\n  }\n\n  // Notification methods\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const newNotification: Notification = {\n      id: randomUUID(),\n      userId: notification.userId,\n      type: notification.type,\n      title: notification.title,\n      message: notification.message,\n      isRead: notification.isRead || false,\n      metadata: notification.metadata || null,\n      entityId: notification.entityId || null,\n      entityType: notification.entityType || null,\n      createdAt: new Date(),\n    };\n    this.notifications.push(newNotification);\n    return newNotification;\n  }\n\n  async getNotificationsByUser(userId: string): Promise<Notification[]> {\n    return this.notifications\n      .filter(n => n.userId === userId)\n      .sort((a, b) => {\n        const aTime = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n        const bTime = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n        return bTime - aTime;\n      });\n  }\n\n  async getUnreadNotificationCount(userId: string): Promise<number> {\n    return this.notifications.filter(n => n.userId === userId && !n.isRead).length;\n  }\n\n  async markNotificationAsRead(notificationId: string): Promise<void> {\n    const notification = this.notifications.find(n => n.id === notificationId);\n    if (notification) {\n      notification.isRead = true;\n    }\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<void> {\n    this.notifications\n      .filter(n => n.userId === userId && !n.isRead)\n      .forEach(n => n.isRead = true);\n  }\n\n  async getPayoutsBySupplier(supplierId: string): Promise<any[]> {\n    // Return empty array as InMemoryStorage doesn't track payouts yet\n    return [];\n  }\n}\n\n// Database connection setup  \nlet db: any = null;\nlet dbConnectionFailed = false;\n\nif (process.env.DATABASE_URL) {\n  try {\n    const sql = postgres(process.env.DATABASE_URL);\n    db = drizzle(sql);\n    console.log(\"Database connection established, using Supabase storage\");\n  } catch (error) {\n    console.error(\"Database connection failed during setup:\", error);\n    dbConnectionFailed = true;\n  }\n} else {\n  console.warn(\"DATABASE_URL not found\");\n  dbConnectionFailed = true;\n}\n\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUsersByRole(role: string): Promise<User[]>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserCompany(userId: string, companyId: string): Promise<void>;\n\n  // Company management\n  getCompany(id: string): Promise<Company | undefined>;\n  createCompany(company: InsertCompany): Promise<Company>;\n\n  // Supplier management\n  getSupplierProfile(companyId: string): Promise<SupplierProfile | undefined>;\n  createSupplierProfile(profile: InsertSupplierProfile): Promise<SupplierProfile>;\n  getSuppliersByCapabilities(capabilities: string[]): Promise<Array<{ user: User; company: Company; profile: SupplierProfile }>>;\n\n  // Document management\n  createDocument(document: InsertDocument): Promise<Document>;\n  getDocumentsByCompany(companyId: string): Promise<Document[]>;\n  getDocumentsByType(companyId: string, docType: string): Promise<Document[]>;\n  deleteDocument(id: string): Promise<void>;\n\n  // SKU management\n  getAllSKUs(): Promise<SKU[]>;\n  getSKUByCode(code: string): Promise<SKU | undefined>;\n  getSKUsByIndustry(industry: string): Promise<SKU[]>;\n\n  // RFQ management\n  createRFQ(rfq: InsertRFQ): Promise<RFQ>;\n  getRFQ(id: string): Promise<RFQ | undefined>;\n  getRFQsByBuyer(buyerId: string): Promise<RFQ[]>;\n  updateRFQStatus(id: string, status: string): Promise<void>;\n\n  // Quote management\n  createQuote(quote: InsertQuote): Promise<Quote>;\n  getQuotesByRFQ(rfqId: string): Promise<Quote[]>;\n  getQuotesBySupplier(supplierId: string): Promise<Quote[]>;\n\n  // Invite management\n  createSupplierInvite(rfqId: string, supplierId: string, invitedBy: string): Promise<void>;\n  getSupplierInvites(supplierId: string): Promise<Array<{ invite: any; rfq: RFQ }>>;\n\n  // Order management\n  createOrder(orderData: any): Promise<Order>;\n  getOrdersByBuyer(buyerId: string): Promise<Order[]>;\n  getOrdersBySupplier(supplierId: string): Promise<Order[]>;\n  getAllOrders(): Promise<Order[]>;\n  updateOrderStatus(id: string, status: string): Promise<void>;\n  updateOrderTotalAmount(id: string, totalAmount: string): Promise<void>;\n\n  // Supplier payouts\n  getPayoutsBySupplier(supplierId: string): Promise<any[]>;\n\n  // Admin-specific methods\n  getAllRFQs(): Promise<RFQ[]>;\n  updateSupplierVerificationStatus(companyId: string, status: string): Promise<void>;\n\n  // Payment methods management\n  getPaymentMethods(): Promise<PaymentMethod[]>;\n  getActivePaymentMethods(): Promise<PaymentMethod[]>;\n  createPaymentMethod(method: InsertPaymentMethod): Promise<PaymentMethod>;\n  updatePaymentMethod(id: string, data: Partial<InsertPaymentMethod>): Promise<void>;\n  deletePaymentMethod(id: string): Promise<void>;\n\n  // Payment configurations management\n  getPaymentConfigurations(): Promise<PaymentConfiguration[]>;\n  getPaymentConfiguration(configType: string): Promise<PaymentConfiguration | undefined>;\n  createPaymentConfiguration(config: InsertPaymentConfiguration): Promise<PaymentConfiguration>;\n  updatePaymentConfiguration(id: string, data: Partial<InsertPaymentConfiguration>): Promise<void>;\n\n  // Payment transactions management\n  createPaymentTransaction(transaction: InsertPaymentTransaction): Promise<PaymentTransaction>;\n  getPaymentTransaction(id: string): Promise<PaymentTransaction | undefined>;\n  getPaymentTransactionByRef(transactionRef: string): Promise<PaymentTransaction | undefined>;\n  updatePaymentTransactionStatus(id: string, status: string, gatewayResponse?: any): Promise<void>;\n  getPaymentTransactionsByPayer(payerId: string): Promise<PaymentTransaction[]>;\n  getPaymentTransactionsByOrder(orderId: string): Promise<PaymentTransaction[]>;\n  getPaymentTransactionsByOffer(curatedOfferId: string): Promise<PaymentTransaction[]>;\n\n  // Curated offers with payment fields\n  createCuratedOffer(offer: InsertCuratedOffer): Promise<CuratedOffer>;\n  getCuratedOffer(id: string): Promise<CuratedOffer | undefined>;\n  getCuratedOffersByRFQ(rfqId: string): Promise<CuratedOffer[]>;\n  updateCuratedOfferPayment(id: string, paymentData: {\n    paymentLink?: string;\n    advancePaymentAmount?: number;\n    finalPaymentAmount?: number;\n    paymentDeadline?: Date;\n    paymentTerms?: string;\n  }): Promise<void>;\n  getAdminMetrics(): Promise<{\n    activeRFQs: number;\n    verifiedSuppliers: number;\n    monthlyVolume: number;\n    successRate: number;\n  }>;\n  getAllQuotes(): Promise<Array<Quote & { rfq: RFQ; supplier: User }>>;\n  createCuratedOffer(offer: InsertCuratedOffer): Promise<CuratedOffer>;\n  getCuratedOffers(): Promise<Array<CuratedOffer & { rfq: RFQ }>>;\n  getCuratedOffersByBuyer(buyerId: string): Promise<Array<CuratedOffer & { rfq: RFQ }>>;\n  publishCuratedOffer(offerId: string): Promise<void>;\n\n  // Notification management\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getNotificationsByUser(userId: string): Promise<Notification[]>;\n  getUnreadNotificationCount(userId: string): Promise<number>;\n  markNotificationAsRead(notificationId: string): Promise<void>;\n  markAllNotificationsAsRead(userId: string): Promise<void>;\n}\n\nexport class SupabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    const result = await db.select().from(users).where(eq(users.role, role as any));\n    return result;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  async updateUserCompany(userId: string, companyId: string): Promise<void> {\n    await db.update(users).set({ companyId }).where(eq(users.id, userId));\n  }\n\n  async getCompany(id: string): Promise<Company | undefined> {\n    const result = await db.select().from(companies).where(eq(companies.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createCompany(company: InsertCompany): Promise<Company> {\n    const result = await db.insert(companies).values(company).returning();\n    return result[0];\n  }\n\n  async getSupplierProfile(companyId: string): Promise<SupplierProfile | undefined> {\n    const result = await db.select().from(supplierProfiles).where(eq(supplierProfiles.companyId, companyId)).limit(1);\n    return result[0];\n  }\n\n  async createSupplierProfile(profile: InsertSupplierProfile): Promise<SupplierProfile> {\n    const result = await db.insert(supplierProfiles).values(profile).returning();\n    return result[0];\n  }\n\n  async getSuppliersByCapabilities(capabilities: string[]): Promise<Array<{ user: User; company: Company; profile: SupplierProfile }>> {\n    // This would need a more complex query with JSONB operations\n    const result = await db\n      .select({\n        user: users,\n        company: companies,\n        profile: supplierProfiles,\n      })\n      .from(users)\n      .innerJoin(companies, eq(users.companyId, companies.id))\n      .innerJoin(supplierProfiles, eq(companies.id, supplierProfiles.companyId))\n      .where(eq(users.role, \"supplier\"));\n    \n    return result;\n  }\n\n  async createDocument(document: InsertDocument): Promise<Document> {\n    const result = await db.insert(documents).values(document).returning();\n    return result[0];\n  }\n\n  async getDocumentsByCompany(companyId: string): Promise<Document[]> {\n    return await db.select().from(documents).where(eq(documents.companyId, companyId));\n  }\n\n  async getDocumentsByType(companyId: string, docType: string): Promise<Document[]> {\n    return await db.select().from(documents).where(and(eq(documents.companyId, companyId), eq(documents.docType, docType)));\n  }\n\n  async deleteDocument(id: string): Promise<void> {\n    await db.delete(documents).where(eq(documents.id, id));\n  }\n\n  async getAllSKUs(): Promise<SKU[]> {\n    return await db.select().from(skus).where(eq(skus.active, true)).orderBy(skus.industry, skus.processName);\n  }\n\n  async getSKUByCode(code: string): Promise<SKU | undefined> {\n    const result = await db.select().from(skus).where(eq(skus.code, code)).limit(1);\n    return result[0];\n  }\n\n  async getSKUsByIndustry(industry: string): Promise<SKU[]> {\n    return await db.select().from(skus).where(and(eq(skus.industry, industry), eq(skus.active, true)));\n  }\n\n  async createRFQ(rfq: InsertRFQ): Promise<RFQ> {\n    const rfqNumber = `RFQ-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`;\n    const result = await db.insert(rfqs).values({ ...rfq, rfqNumber }).returning();\n    return result[0];\n  }\n\n  async getRFQ(id: string): Promise<RFQ | undefined> {\n    const result = await db.select().from(rfqs).where(eq(rfqs.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getRFQsByBuyer(buyerId: string): Promise<RFQ[]> {\n    return await db.select().from(rfqs).where(eq(rfqs.buyerId, buyerId)).orderBy(desc(rfqs.createdAt));\n  }\n\n  async updateRFQStatus(id: string, status: string): Promise<void> {\n    await db.update(rfqs).set({ status: status as any }).where(eq(rfqs.id, id));\n  }\n\n  async createQuote(quote: InsertQuote): Promise<Quote> {\n    const result = await db.insert(quotes).values(quote).returning();\n    return result[0];\n  }\n\n  async getQuotesByRFQ(rfqId: string): Promise<Quote[]> {\n    return await db.select().from(quotes).where(eq(quotes.rfqId, rfqId));\n  }\n\n  async getQuotesBySupplier(supplierId: string): Promise<Quote[]> {\n    return await db.select().from(quotes).where(eq(quotes.supplierId, supplierId)).orderBy(desc(quotes.createdAt));\n  }\n\n  async createSupplierInvite(rfqId: string, supplierId: string, invitedBy: string): Promise<void> {\n    await db.insert(supplierInvites).values({\n      rfqId,\n      supplierId,\n      invitedBy,\n      responseDeadline: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now\n    });\n  }\n\n  async getSupplierInvites(supplierId: string): Promise<Array<{ invite: any; rfq: RFQ }>> {\n    const result = await db\n      .select({\n        invite: supplierInvites,\n        rfq: rfqs,\n      })\n      .from(supplierInvites)\n      .innerJoin(rfqs, eq(supplierInvites.rfqId, rfqs.id))\n      .where(eq(supplierInvites.supplierId, supplierId))\n      .orderBy(desc(supplierInvites.invitedAt));\n    \n    return result;\n  }\n\n  async createOrder(orderData: any): Promise<Order> {\n    const orderNumber = `ORD-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`;\n    const result = await db.insert(orders).values({ ...orderData, orderNumber }).returning();\n    return result[0];\n  }\n\n  async getOrdersByBuyer(buyerId: string): Promise<Order[]> {\n    return await db.select().from(orders).where(eq(orders.buyerId, buyerId)).orderBy(desc(orders.createdAt));\n  }\n\n  async getOrdersBySupplier(supplierId: string): Promise<Order[]> {\n    return await db.select().from(orders).where(eq(orders.supplierId, supplierId)).orderBy(desc(orders.createdAt));\n  }\n\n  async getAllOrders(): Promise<Order[]> {\n    return await db.select().from(orders).orderBy(desc(orders.createdAt));\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<void> {\n    await db.update(orders).set({ status: status as any, updatedAt: new Date() }).where(eq(orders.id, id));\n  }\n\n  async updateOrderTotalAmount(id: string, totalAmount: string): Promise<void> {\n    await db.update(orders).set({ totalAmount, updatedAt: new Date() }).where(eq(orders.id, id));\n  }\n\n  // Admin-specific methods\n  async getAllRFQs(): Promise<RFQ[]> {\n    return await db.select().from(rfqs).orderBy(desc(rfqs.createdAt));\n  }\n\n  async updateSupplierVerificationStatus(companyId: string, status: string): Promise<void> {\n    await db.update(supplierProfiles).set({ \n      verifiedStatus: status as any, \n      updatedAt: new Date() \n    }).where(eq(supplierProfiles.companyId, companyId));\n  }\n\n  async getAdminMetrics(): Promise<{\n    activeRFQs: number;\n    verifiedSuppliers: number;\n    monthlyVolume: number;\n    successRate: number;\n  }> {\n    const activeRFQs = await db.select().from(rfqs).where(\n      inArray(rfqs.status, ['submitted', 'under_review', 'invited', 'offers_published'])\n    );\n    \n    const verifiedSuppliers = await db.select().from(supplierProfiles).where(\n      inArray(supplierProfiles.verifiedStatus, ['bronze', 'silver', 'gold'])\n    );\n\n    // Calculate real metrics from actual data\n    const currentMonth = new Date();\n    currentMonth.setDate(1);\n    currentMonth.setHours(0, 0, 0, 0);\n    \n    // Monthly volume: sum of all orders from current month  \n    const monthlyOrders = await db.select().from(orders).where(\n      gte(orders.createdAt, currentMonth)\n    );\n    \n    const monthlyVolume = monthlyOrders.reduce((sum: number, order: any) => {\n      const amount = order.totalAmount ? parseFloat(order.totalAmount.toString()) : 0;\n      return sum + amount;\n    }, 0);\n    \n    // Success rate: percentage of completed orders vs total orders\n    const completedOrders = await db.select().from(orders).where(\n      inArray(orders.status, ['delivered', 'closed'])\n    );\n    \n    const totalOrders = await db.select().from(orders);\n    const successRate = totalOrders.length > 0 ? (completedOrders.length / totalOrders.length) * 100 : 0;\n\n    return {\n      activeRFQs: activeRFQs.length,\n      verifiedSuppliers: verifiedSuppliers.length,\n      monthlyVolume: Math.round(monthlyVolume),\n      successRate: Math.round(successRate * 100) / 100, // Round to 2 decimal places\n    };\n  }\n\n  async getAllQuotes(): Promise<Array<Quote & { rfq: RFQ; supplier: User }>> {\n    const result = await db\n      .select({\n        quote: quotes,\n        rfq: rfqs,\n        supplier: users,\n      })\n      .from(quotes)\n      .innerJoin(rfqs, eq(quotes.rfqId, rfqs.id))\n      .innerJoin(users, eq(quotes.supplierId, users.id))\n      .orderBy(desc(quotes.createdAt));\n    \n    return result.map((r: any) => ({ ...r.quote, rfq: r.rfq, supplier: r.supplier }));\n  }\n\n  async createCuratedOffer(offer: InsertCuratedOffer): Promise<CuratedOffer> {\n    const result = await db.insert(curatedOffers).values(offer).returning();\n    return result[0];\n  }\n\n  async getCuratedOffers(): Promise<Array<CuratedOffer & { rfq: RFQ }>> {\n    const result = await db\n      .select({\n        offer: curatedOffers,\n        rfq: rfqs,\n      })\n      .from(curatedOffers)\n      .innerJoin(rfqs, eq(curatedOffers.rfqId, rfqs.id))\n      .orderBy(desc(curatedOffers.publishedAt));\n    \n    return result.map((r: any) => ({ ...r.offer, rfq: r.rfq }));\n  }\n\n  async getCuratedOffersByBuyer(buyerId: string): Promise<Array<CuratedOffer & { rfq: RFQ }>> {\n    const result = await db\n      .select({\n        offer: curatedOffers,\n        rfq: rfqs,\n      })\n      .from(curatedOffers)\n      .innerJoin(rfqs, eq(curatedOffers.rfqId, rfqs.id))\n      .where(and(\n        eq(rfqs.buyerId, buyerId),\n        isNotNull(curatedOffers.publishedAt)\n      ))\n      .orderBy(desc(curatedOffers.publishedAt));\n    \n    return result.map((r: any) => ({ ...r.offer, rfq: r.rfq }));\n  }\n\n  async publishCuratedOffer(offerId: string): Promise<void> {\n    await db.update(curatedOffers).set({ \n      publishedAt: new Date() \n    }).where(eq(curatedOffers.id, offerId));\n  }\n\n  // Notification methods\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const result = await db.insert(notifications).values(notification).returning();\n    return result[0];\n  }\n\n  async getNotificationsByUser(userId: string): Promise<Notification[]> {\n    return await db.select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt));\n  }\n\n  async getUnreadNotificationCount(userId: string): Promise<number> {\n    const result = await db.select({ count: sql<number>`count(*)` })\n      .from(notifications)\n      .where(and(eq(notifications.userId, userId), eq(notifications.isRead, false)));\n    return Number(result[0]?.count || 0);\n  }\n\n  async markNotificationAsRead(notificationId: string): Promise<void> {\n    await db.update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.id, notificationId));\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<void> {\n    await db.update(notifications)\n      .set({ isRead: true })\n      .where(and(eq(notifications.userId, userId), eq(notifications.isRead, false)));\n  }\n\n  // Payment methods\n  async getPaymentMethods(): Promise<PaymentMethod[]> {\n    return await db.select().from(paymentMethods);\n  }\n\n  async getActivePaymentMethods(): Promise<PaymentMethod[]> {\n    return await db.select().from(paymentMethods).where(eq(paymentMethods.isActive, true));\n  }\n\n  async createPaymentMethod(method: InsertPaymentMethod): Promise<PaymentMethod> {\n    const result = await db.insert(paymentMethods).values(method).returning();\n    return result[0];\n  }\n\n  async updatePaymentMethod(id: string, data: Partial<InsertPaymentMethod>): Promise<void> {\n    await db.update(paymentMethods).set({ ...data, updatedAt: new Date() }).where(eq(paymentMethods.id, id));\n  }\n\n  async deletePaymentMethod(id: string): Promise<void> {\n    await db.delete(paymentMethods).where(eq(paymentMethods.id, id));\n  }\n\n  // Payment configurations\n  async getPaymentConfigurations(): Promise<PaymentConfiguration[]> {\n    return await db.select().from(paymentConfigurations);\n  }\n\n  async getPaymentConfiguration(configType: string): Promise<PaymentConfiguration | undefined> {\n    const result = await db.select().from(paymentConfigurations).where(eq(paymentConfigurations.configType, configType as any)).limit(1);\n    return result[0];\n  }\n\n  async createPaymentConfiguration(config: InsertPaymentConfiguration): Promise<PaymentConfiguration> {\n    const result = await db.insert(paymentConfigurations).values(config).returning();\n    return result[0];\n  }\n\n  async updatePaymentConfiguration(id: string, data: Partial<InsertPaymentConfiguration>): Promise<void> {\n    await db.update(paymentConfigurations).set({ ...data, updatedAt: new Date() }).where(eq(paymentConfigurations.id, id));\n  }\n\n  // Payment transactions\n  async createPaymentTransaction(transaction: InsertPaymentTransaction): Promise<PaymentTransaction> {\n    const result = await db.insert(paymentTransactions).values(transaction).returning();\n    return result[0];\n  }\n\n  async getPaymentTransaction(id: string): Promise<PaymentTransaction | undefined> {\n    const result = await db.select().from(paymentTransactions).where(eq(paymentTransactions.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getPaymentTransactionByRef(transactionRef: string): Promise<PaymentTransaction | undefined> {\n    const result = await db.select().from(paymentTransactions).where(eq(paymentTransactions.transactionRef, transactionRef)).limit(1);\n    return result[0];\n  }\n\n  async updatePaymentTransactionStatus(id: string, status: string, gatewayResponse?: any): Promise<void> {\n    await db.update(paymentTransactions).set({ \n      status: status as any, \n      gatewayResponse: gatewayResponse || null,\n      updatedAt: new Date() \n    }).where(eq(paymentTransactions.id, id));\n  }\n\n  async getPaymentTransactionsByPayer(payerId: string): Promise<PaymentTransaction[]> {\n    return await db.select().from(paymentTransactions).where(eq(paymentTransactions.payerId, payerId)).orderBy(desc(paymentTransactions.createdAt));\n  }\n\n  async getPaymentTransactionsByOrder(orderId: string): Promise<PaymentTransaction[]> {\n    return await db.select().from(paymentTransactions).where(eq(paymentTransactions.orderId, orderId)).orderBy(desc(paymentTransactions.createdAt));\n  }\n\n  async getPaymentTransactionsByOffer(curatedOfferId: string): Promise<PaymentTransaction[]> {\n    return await db.select().from(paymentTransactions).where(eq(paymentTransactions.curatedOfferId, curatedOfferId)).orderBy(desc(paymentTransactions.createdAt));\n  }\n\n  // Additional offer methods\n  async getCuratedOffer(id: string): Promise<CuratedOffer | undefined> {\n    const result = await db.select().from(curatedOffers).where(eq(curatedOffers.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getCuratedOffersByRFQ(rfqId: string): Promise<CuratedOffer[]> {\n    return await db.select().from(curatedOffers).where(eq(curatedOffers.rfqId, rfqId)).orderBy(desc(curatedOffers.publishedAt));\n  }\n\n  async updateCuratedOfferPayment(id: string, paymentData: {\n    paymentLink?: string;\n    advancePaymentAmount?: number;\n    finalPaymentAmount?: number;\n    paymentDeadline?: Date;\n    paymentTerms?: string;\n  }): Promise<void> {\n    await db.update(curatedOffers).set({\n      paymentLink: paymentData.paymentLink || null,\n      advancePaymentAmount: paymentData.advancePaymentAmount?.toString() || null,\n      finalPaymentAmount: paymentData.finalPaymentAmount?.toString() || null,\n      paymentDeadline: paymentData.paymentDeadline || null,\n      paymentTerms: paymentData.paymentTerms || null,\n    }).where(eq(curatedOffers.id, id));\n  }\n\n  async getPayoutsBySupplier(supplierId: string): Promise<any[]> {\n    // Return empty array as payouts are not implemented yet\n    return [];\n  }\n}\n\n// Wrapper storage that falls back to in-memory when database operations fail\nclass FallbackStorage implements IStorage {\n  private inMemoryStorage = new InMemoryStorage();\n  private supabaseStorage = new SupabaseStorage();\n  private useFallback = dbConnectionFailed;\n\n  private async withFallback<T>(operation: (storage: IStorage) => Promise<T>): Promise<T> {\n    if (this.useFallback) {\n      return operation(this.inMemoryStorage);\n    }\n    \n    try {\n      return await operation(this.supabaseStorage);\n    } catch (error) {\n      console.error(\"Database operation failed, falling back to in-memory storage:\", error);\n      this.useFallback = true;\n      return operation(this.inMemoryStorage);\n    }\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.withFallback(async (storage) => storage.getUser(id));\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return this.withFallback(async (storage) => storage.getUserByEmail(email));\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    return this.withFallback(async (storage) => storage.getUsersByRole(role));\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    return this.withFallback(async (storage) => storage.createUser(user));\n  }\n\n  async updateUserCompany(userId: string, companyId: string): Promise<void> {\n    return this.withFallback(async (storage) => storage.updateUserCompany(userId, companyId));\n  }\n\n  async getCompany(id: string): Promise<Company | undefined> {\n    return this.withFallback(async (storage) => storage.getCompany(id));\n  }\n\n  async createCompany(company: InsertCompany): Promise<Company> {\n    return this.withFallback(async (storage) => storage.createCompany(company));\n  }\n\n  // Delegate other methods with fallback\n  async getSupplierProfile(companyId: string): Promise<any> {\n    return this.withFallback(async (storage) => storage.getSupplierProfile(companyId));\n  }\n\n  async createSupplierProfile(profile: any): Promise<any> {\n    return this.withFallback(async (storage) => storage.createSupplierProfile(profile));\n  }\n\n  async getSuppliersByCapabilities(capabilities: string[]): Promise<any> {\n    return this.withFallback(async (storage) => storage.getSuppliersByCapabilities(capabilities));\n  }\n\n  async getAllSKUs(): Promise<SKU[]> {\n    return this.withFallback(async (storage) => storage.getAllSKUs());\n  }\n\n  async getSKUByCode(code: string): Promise<any> {\n    return this.withFallback(async (storage) => storage.getSKUByCode(code));\n  }\n\n  async getSKUsByIndustry(industry: string): Promise<SKU[]> {\n    return this.withFallback(async (storage) => storage.getSKUsByIndustry(industry));\n  }\n\n  async createRFQ(rfq: any): Promise<any> {\n    return this.withFallback(async (storage) => storage.createRFQ(rfq));\n  }\n\n  async getRFQ(id: string): Promise<any> {\n    return this.withFallback(async (storage) => storage.getRFQ(id));\n  }\n\n  async getRFQsByBuyer(buyerId: string): Promise<RFQ[]> {\n    return this.withFallback(async (storage) => storage.getRFQsByBuyer(buyerId));\n  }\n\n  async updateRFQStatus(id: string, status: string): Promise<void> {\n    return this.withFallback(async (storage) => storage.updateRFQStatus(id, status));\n  }\n\n  async createQuote(quote: any): Promise<any> {\n    return this.withFallback(async (storage) => storage.createQuote(quote));\n  }\n\n  async getQuotesByRFQ(rfqId: string): Promise<Quote[]> {\n    return this.withFallback(async (storage) => storage.getQuotesByRFQ(rfqId));\n  }\n\n  async getQuotesBySupplier(supplierId: string): Promise<Quote[]> {\n    return this.withFallback(async (storage) => storage.getQuotesBySupplier(supplierId));\n  }\n\n  async createSupplierInvite(rfqId: string, supplierId: string, invitedBy: string): Promise<void> {\n    return this.withFallback(async (storage) => storage.createSupplierInvite(rfqId, supplierId, invitedBy));\n  }\n\n  async getSupplierInvites(supplierId: string): Promise<any> {\n    return this.withFallback(async (storage) => storage.getSupplierInvites(supplierId));\n  }\n\n  async createOrder(orderData: any): Promise<any> {\n    return this.withFallback(async (storage) => storage.createOrder(orderData));\n  }\n\n  async getOrdersByBuyer(buyerId: string): Promise<Order[]> {\n    return this.withFallback(async (storage) => storage.getOrdersByBuyer(buyerId));\n  }\n\n  async getOrdersBySupplier(supplierId: string): Promise<Order[]> {\n    return this.withFallback(async (storage) => storage.getOrdersBySupplier(supplierId));\n  }\n\n  async getAllOrders(): Promise<Order[]> {\n    return this.withFallback(async (storage) => storage.getAllOrders());\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<void> {\n    return this.withFallback(async (storage) => storage.updateOrderStatus(id, status));\n  }\n\n  async updateOrderTotalAmount(id: string, totalAmount: string): Promise<void> {\n    return this.withFallback(async (storage) => storage.updateOrderTotalAmount(id, totalAmount));\n  }\n\n  async createDocument(document: InsertDocument): Promise<Document> {\n    return this.withFallback(async (storage) => storage.createDocument(document));\n  }\n\n  async getDocumentsByCompany(companyId: string): Promise<Document[]> {\n    return this.withFallback(async (storage) => storage.getDocumentsByCompany(companyId));\n  }\n\n  async getDocumentsByType(companyId: string, docType: string): Promise<Document[]> {\n    return this.withFallback(async (storage) => storage.getDocumentsByType(companyId, docType));\n  }\n\n  async deleteDocument(id: string): Promise<void> {\n    return this.withFallback(async (storage) => storage.deleteDocument(id));\n  }\n\n  // Admin methods\n  async getAllRFQs(): Promise<any> {\n    return this.withFallback(async (storage) => storage.getAllRFQs());\n  }\n\n  async updateSupplierVerificationStatus(companyId: string, status: string): Promise<void> {\n    return this.withFallback(async (storage) => storage.updateSupplierVerificationStatus(companyId, status));\n  }\n\n  async getAdminMetrics(): Promise<any> {\n    return this.withFallback(async (storage) => storage.getAdminMetrics());\n  }\n\n  async getAllQuotes(): Promise<any> {\n    return this.withFallback(async (storage) => storage.getAllQuotes());\n  }\n\n  async createCuratedOffer(offer: InsertCuratedOffer): Promise<CuratedOffer> {\n    return this.withFallback(async (storage) => storage.createCuratedOffer(offer));\n  }\n\n  async getCuratedOffers(): Promise<any> {\n    return this.withFallback(async (storage) => storage.getCuratedOffers());\n  }\n\n  async getCuratedOffersByBuyer(buyerId: string): Promise<Array<CuratedOffer & { rfq: RFQ }>> {\n    return this.withFallback(async (storage) => storage.getCuratedOffersByBuyer(buyerId));\n  }\n\n  async publishCuratedOffer(offerId: string): Promise<void> {\n    return this.withFallback(async (storage) => storage.publishCuratedOffer(offerId));\n  }\n\n  // Notification methods\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    return this.withFallback(async (storage) => storage.createNotification(notification));\n  }\n\n  async getNotificationsByUser(userId: string): Promise<Notification[]> {\n    return this.withFallback(async (storage) => storage.getNotificationsByUser(userId));\n  }\n\n  async getUnreadNotificationCount(userId: string): Promise<number> {\n    return this.withFallback(async (storage) => storage.getUnreadNotificationCount(userId));\n  }\n\n  async markNotificationAsRead(notificationId: string): Promise<void> {\n    return this.withFallback(async (storage) => storage.markNotificationAsRead(notificationId));\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<void> {\n    return this.withFallback(async (storage) => storage.markAllNotificationsAsRead(userId));\n  }\n\n  // Payment methods\n  async getPaymentMethods(): Promise<PaymentMethod[]> {\n    return this.withFallback(async (storage) => storage.getPaymentMethods());\n  }\n\n  async getActivePaymentMethods(): Promise<PaymentMethod[]> {\n    return this.withFallback(async (storage) => storage.getActivePaymentMethods());\n  }\n\n  async createPaymentMethod(method: InsertPaymentMethod): Promise<PaymentMethod> {\n    return this.withFallback(async (storage) => storage.createPaymentMethod(method));\n  }\n\n  async updatePaymentMethod(id: string, data: Partial<InsertPaymentMethod>): Promise<void> {\n    return this.withFallback(async (storage) => storage.updatePaymentMethod(id, data));\n  }\n\n  async deletePaymentMethod(id: string): Promise<void> {\n    return this.withFallback(async (storage) => storage.deletePaymentMethod(id));\n  }\n\n  // Payment configurations\n  async getPaymentConfigurations(): Promise<PaymentConfiguration[]> {\n    return this.withFallback(async (storage) => storage.getPaymentConfigurations());\n  }\n\n  async getPaymentConfiguration(configType: string): Promise<PaymentConfiguration | undefined> {\n    return this.withFallback(async (storage) => storage.getPaymentConfiguration(configType));\n  }\n\n  async createPaymentConfiguration(config: InsertPaymentConfiguration): Promise<PaymentConfiguration> {\n    return this.withFallback(async (storage) => storage.createPaymentConfiguration(config));\n  }\n\n  async updatePaymentConfiguration(id: string, data: Partial<InsertPaymentConfiguration>): Promise<void> {\n    return this.withFallback(async (storage) => storage.updatePaymentConfiguration(id, data));\n  }\n\n  // Payment transactions\n  async createPaymentTransaction(transaction: InsertPaymentTransaction): Promise<PaymentTransaction> {\n    return this.withFallback(async (storage) => storage.createPaymentTransaction(transaction));\n  }\n\n  async getPaymentTransaction(id: string): Promise<PaymentTransaction | undefined> {\n    return this.withFallback(async (storage) => storage.getPaymentTransaction(id));\n  }\n\n  async getPaymentTransactionByRef(transactionRef: string): Promise<PaymentTransaction | undefined> {\n    return this.withFallback(async (storage) => storage.getPaymentTransactionByRef(transactionRef));\n  }\n\n  async updatePaymentTransactionStatus(id: string, status: string, gatewayResponse?: any): Promise<void> {\n    return this.withFallback(async (storage) => storage.updatePaymentTransactionStatus(id, status, gatewayResponse));\n  }\n\n  async getPaymentTransactionsByPayer(payerId: string): Promise<PaymentTransaction[]> {\n    return this.withFallback(async (storage) => storage.getPaymentTransactionsByPayer(payerId));\n  }\n\n  async getPaymentTransactionsByOrder(orderId: string): Promise<PaymentTransaction[]> {\n    return this.withFallback(async (storage) => storage.getPaymentTransactionsByOrder(orderId));\n  }\n\n  async getPaymentTransactionsByOffer(curatedOfferId: string): Promise<PaymentTransaction[]> {\n    return this.withFallback(async (storage) => storage.getPaymentTransactionsByOffer(curatedOfferId));\n  }\n\n  // Additional offer methods\n  async getCuratedOffer(id: string): Promise<CuratedOffer | undefined> {\n    return this.withFallback(async (storage) => storage.getCuratedOffer(id));\n  }\n\n  async getCuratedOffersByRFQ(rfqId: string): Promise<CuratedOffer[]> {\n    return this.withFallback(async (storage) => storage.getCuratedOffersByRFQ(rfqId));\n  }\n\n  async updateCuratedOfferPayment(id: string, paymentData: {\n    paymentLink?: string;\n    advancePaymentAmount?: number;\n    finalPaymentAmount?: number;\n    paymentDeadline?: Date;\n    paymentTerms?: string;\n  }): Promise<void> {\n    return this.withFallback(async (storage) => storage.updateCuratedOfferPayment(id, paymentData));\n  }\n\n  async getPayoutsBySupplier(supplierId: string): Promise<any[]> {\n    return this.withFallback(async (storage) => storage.getPayoutsBySupplier(supplierId));\n  }\n}\n\n// Comprehensive SKU data initialization\nconst COMPREHENSIVE_SKU_DATA = [\n  // Mechanical Manufacturing (9 SKUs)\n  {\n    code: 'cnc_machining',\n    industry: 'mechanical_manufacturing',\n    processName: 'CNC Machining',\n    description: 'CNC Turning, Milling, and 5-axis machining services for precision manufacturing',\n    defaultMoq: 10,\n    defaultLeadTimeDays: 14,\n    parametersSchema: {\n      required: ['material', 'quantity', 'tolerance'],\n      optional: ['surface_finish', 'heat_treatment', 'secondary_operations'],\n      materials: ['Aluminum', 'Steel', 'Stainless Steel', 'Brass', 'Copper', 'Titanium', 'Plastic'],\n      tolerances: ['±0.1mm', '±0.2mm', '±0.5mm', '±1.0mm'],\n      surface_finishes: ['As machined', 'Anodized', 'Powder coated', 'Plated']\n    }\n  },\n  {\n    code: 'sheet_metal',\n    industry: 'mechanical_manufacturing',\n    processName: 'Sheet Metal Fabrication',\n    description: 'Laser cutting, punching, bending, and welding services for metal fabrication',\n    defaultMoq: 5,\n    defaultLeadTimeDays: 10,\n    parametersSchema: {\n      required: ['material', 'thickness', 'quantity'],\n      optional: ['surface_finish', 'bending_operations', 'welding_type'],\n      materials: ['Mild Steel', 'Stainless Steel', 'Aluminum', 'Galvanized Steel'],\n      thickness_range: '0.5mm - 25mm',\n      processes: ['Laser cutting', 'Punching', 'Bending', 'Welding']\n    }\n  },\n  {\n    code: 'injection_molding',\n    industry: 'mechanical_manufacturing',\n    processName: 'Injection Molding',\n    description: 'Plastic injection molding with soft and hard tooling capabilities',\n    defaultMoq: 100,\n    defaultLeadTimeDays: 21,\n    parametersSchema: {\n      required: ['material', 'quantity', 'part_complexity'],\n      optional: ['tooling_type', 'surface_finish', 'insert_molding'],\n      materials: ['ABS', 'PP', 'PE', 'PC', 'PA', 'POM', 'TPU'],\n      tooling_types: ['Soft tooling', 'Hard tooling', 'Aluminum tooling'],\n      moq_range: '100 - 100000'\n    }\n  },\n  {\n    code: 'die_casting',\n    industry: 'mechanical_manufacturing',\n    processName: 'Die Casting',\n    description: 'Aluminum, Zinc, and Magnesium die casting for precision parts',\n    defaultMoq: 50,\n    defaultLeadTimeDays: 18,\n    parametersSchema: {\n      required: ['material', 'quantity', 'part_weight'],\n      optional: ['surface_finish', 'machining_required', 'heat_treatment'],\n      materials: ['Aluminum', 'Zinc', 'Magnesium'],\n      weight_range: '10g - 5kg',\n      tolerances: ['±0.1mm', '±0.2mm', '±0.3mm']\n    }\n  },\n  {\n    code: 'forging',\n    industry: 'mechanical_manufacturing',\n    processName: 'Forging',\n    description: 'Open die, closed die, and ring rolling forging services',\n    defaultMoq: 25,\n    defaultLeadTimeDays: 20,\n    parametersSchema: {\n      required: ['material', 'quantity', 'forging_type'],\n      optional: ['heat_treatment', 'machining_allowance', 'grain_flow'],\n      materials: ['Carbon Steel', 'Alloy Steel', 'Stainless Steel', 'Aluminum', 'Titanium'],\n      forging_types: ['Open die', 'Closed die', 'Ring rolling'],\n      weight_range: '0.1kg - 500kg'\n    }\n  },\n  {\n    code: 'extrusion',\n    industry: 'mechanical_manufacturing',\n    processName: 'Extrusion',\n    description: 'Aluminum and plastic profile extrusion services',\n    defaultMoq: 100,\n    defaultLeadTimeDays: 15,\n    parametersSchema: {\n      required: ['material', 'profile_type', 'quantity'],\n      optional: ['surface_finish', 'secondary_operations', 'cutting_length'],\n      materials: ['Aluminum', 'PVC', 'ABS', 'PC', 'HDPE'],\n      profile_types: ['Standard profiles', 'Custom profiles'],\n      length_range: '0.5m - 12m'\n    }\n  },\n  {\n    code: '3d_printing',\n    industry: 'mechanical_manufacturing',\n    processName: '3D Printing',\n    description: 'FDM, SLA, SLS, and DMLS 3D printing services',\n    defaultMoq: 1,\n    defaultLeadTimeDays: 5,\n    parametersSchema: {\n      required: ['material', 'printing_technology', 'quantity'],\n      optional: ['surface_finish', 'support_removal', 'post_processing'],\n      technologies: ['FDM', 'SLA', 'SLS', 'DMLS'],\n      materials: ['PLA', 'ABS', 'PETG', 'Resin', 'Nylon', 'Metal powders'],\n      max_dimensions: '300x300x300mm'\n    }\n  },\n  {\n    code: 'tooling_development',\n    industry: 'mechanical_manufacturing',\n    processName: 'Tooling Development',\n    description: 'Molds, dies, jigs, and fixtures development and manufacturing',\n    defaultMoq: 1,\n    defaultLeadTimeDays: 30,\n    parametersSchema: {\n      required: ['tooling_type', 'application', 'material'],\n      optional: ['expected_runs', 'tolerance_requirements', 'cooling_system'],\n      tooling_types: ['Injection molds', 'Die casting dies', 'Jigs', 'Fixtures'],\n      materials: ['Tool steel', 'Aluminum', 'Stainless steel'],\n      complexity: ['Simple', 'Medium', 'Complex']\n    }\n  },\n  {\n    code: 'assembly_kitting',\n    industry: 'mechanical_manufacturing',\n    processName: 'Assembly & Kitting',\n    description: 'Product assembly and kitting services for manufacturing',\n    defaultMoq: 10,\n    defaultLeadTimeDays: 7,\n    parametersSchema: {\n      required: ['assembly_type', 'quantity', 'components_count'],\n      optional: ['packaging_requirements', 'testing_required', 'documentation'],\n      assembly_types: ['Manual assembly', 'Automated assembly', 'Kitting only'],\n      complexity: ['Simple', 'Medium', 'Complex'],\n      components_range: '2 - 100 components'\n    }\n  },\n\n  // Electronics & Electrical (6 SKUs)\n  {\n    code: 'pcb_prototyping',\n    industry: 'electronics_electrical',\n    processName: 'PCB Prototyping',\n    description: 'Fast-turn PCB prototyping services for electronic development',\n    defaultMoq: 5,\n    defaultLeadTimeDays: 3,\n    parametersSchema: {\n      required: ['layers', 'dimensions', 'quantity'],\n      optional: ['material', 'surface_finish', 'via_type'],\n      layers: ['1', '2', '4', '6', '8', '10+'],\n      materials: ['FR4', 'Rogers', 'Aluminum', 'Flexible'],\n      surface_finishes: ['HASL', 'OSP', 'ENIG', 'Immersion Silver']\n    }\n  },\n  {\n    code: 'pcb_assembly',\n    industry: 'electronics_electrical',\n    processName: 'PCB Assembly',\n    description: 'SMT and through-hole PCB assembly services',\n    defaultMoq: 10,\n    defaultLeadTimeDays: 7,\n    parametersSchema: {\n      required: ['pcb_type', 'components_count', 'quantity'],\n      optional: ['testing_requirements', 'conformal_coating', 'programming'],\n      assembly_types: ['SMT only', 'Through-hole only', 'Mixed technology'],\n      components_range: '10 - 1000 components',\n      testing: ['AOI', 'ICT', 'Functional test', 'Burn-in']\n    }\n  },\n  {\n    code: 'cable_harness',\n    industry: 'electronics_electrical',\n    processName: 'Cable Harness Assembly',\n    description: 'Custom cable harness and wire assembly services',\n    defaultMoq: 25,\n    defaultLeadTimeDays: 10,\n    parametersSchema: {\n      required: ['cable_type', 'length', 'connectors'],\n      optional: ['shielding', 'jacketing', 'labeling'],\n      cable_types: ['Power cables', 'Data cables', 'Coaxial', 'Ribbon'],\n      length_range: '0.1m - 50m',\n      connectors: ['Standard', 'Custom', 'Automotive', 'Industrial']\n    }\n  },\n  {\n    code: 'box_build',\n    industry: 'electronics_electrical',\n    processName: 'Box Build Assembly',\n    description: 'Electronic enclosure and system assembly services',\n    defaultMoq: 5,\n    defaultLeadTimeDays: 14,\n    parametersSchema: {\n      required: ['enclosure_type', 'complexity', 'quantity'],\n      optional: ['testing_requirements', 'labeling', 'documentation'],\n      enclosure_types: ['Plastic', 'Metal', 'Custom'],\n      complexity: ['Simple', 'Medium', 'Complex'],\n      testing: ['Functional', 'Environmental', 'Safety']\n    }\n  },\n  {\n    code: 'battery_pack',\n    industry: 'electronics_electrical',\n    processName: 'Battery Pack Assembly',\n    description: 'Custom battery pack assembly and testing services',\n    defaultMoq: 10,\n    defaultLeadTimeDays: 12,\n    parametersSchema: {\n      required: ['battery_type', 'voltage', 'capacity'],\n      optional: ['bms_required', 'enclosure_type', 'certification'],\n      battery_types: ['Li-ion', 'LiFePO4', 'NiMH', 'Lead acid'],\n      voltage_range: '3.7V - 400V',\n      certifications: ['UN38.3', 'IEC62133', 'UL2054']\n    }\n  },\n  {\n    code: 'electronic_testing',\n    industry: 'electronics_electrical',\n    processName: 'Electronic Testing & QA',\n    description: 'ICT, AOI, functional, and burn-in testing services',\n    defaultMoq: 1,\n    defaultLeadTimeDays: 5,\n    parametersSchema: {\n      required: ['testing_type', 'product_type', 'quantity'],\n      optional: ['test_duration', 'environmental_conditions', 'certification'],\n      testing_types: ['ICT', 'AOI', 'Functional', 'Burn-in', 'Environmental'],\n      standards: ['IPC', 'IEC', 'MIL-STD', 'ISO'],\n      certifications: ['CE', 'FCC', 'RoHS', 'REACH']\n    }\n  },\n\n  // Packaging & Printing (7 SKUs)\n  {\n    code: 'corrugated_boxes',\n    industry: 'packaging_printing',\n    processName: 'Corrugated Boxes',\n    description: 'Custom corrugated box manufacturing and printing',\n    defaultMoq: 100,\n    defaultLeadTimeDays: 10,\n    parametersSchema: {\n      required: ['box_style', 'dimensions', 'quantity'],\n      optional: ['printing', 'coating', 'die_cutting'],\n      box_styles: ['RSC', 'HSC', 'FOL', '5PF', 'Custom'],\n      flute_types: ['3mm', '5mm', '7mm', 'Double wall'],\n      printing: ['Flexo', 'Offset', 'Digital']\n    }\n  },\n  {\n    code: 'carton_packaging',\n    industry: 'packaging_printing',\n    processName: 'Carton Packaging',\n    description: 'Printed carton and folding box manufacturing',\n    defaultMoq: 500,\n    defaultLeadTimeDays: 12,\n    parametersSchema: {\n      required: ['carton_type', 'material', 'printing_colors'],\n      optional: ['surface_finish', 'die_cutting', 'window_patching'],\n      carton_types: ['Straight tuck', 'Reverse tuck', 'Auto-lock', 'Custom'],\n      materials: ['SBS', 'FBB', 'Kraft', 'Recycled'],\n      finishes: ['Matte', 'Gloss', 'UV coating', 'Lamination']\n    }\n  },\n  {\n    code: 'labels_stickers',\n    industry: 'packaging_printing',\n    processName: 'Labels & Stickers',\n    description: 'Custom label and sticker printing services',\n    defaultMoq: 1000,\n    defaultLeadTimeDays: 7,\n    parametersSchema: {\n      required: ['label_type', 'material', 'printing_method'],\n      optional: ['adhesive_type', 'die_cutting', 'finishing'],\n      label_types: ['Roll labels', 'Sheet labels', 'Stickers', 'Decals'],\n      materials: ['Paper', 'Vinyl', 'Polyester', 'Clear film'],\n      printing: ['Digital', 'Flexo', 'Screen', 'Offset']\n    }\n  },\n  {\n    code: 'flexible_packaging',\n    industry: 'packaging_printing',\n    processName: 'Flexible Packaging',\n    description: 'Pouches, bags, and laminate manufacturing services',\n    defaultMoq: 1000,\n    defaultLeadTimeDays: 14,\n    parametersSchema: {\n      required: ['package_type', 'material_structure', 'size'],\n      optional: ['barrier_properties', 'closure_type', 'printing'],\n      package_types: ['Stand-up pouches', 'Flat pouches', 'Rollstock', 'Bags'],\n      materials: ['PE', 'PP', 'PET', 'Aluminum', 'Paper'],\n      barriers: ['Moisture', 'Oxygen', 'Light', 'Aroma']\n    }\n  },\n  {\n    code: 'rigid_packaging',\n    industry: 'packaging_printing',\n    processName: 'Rigid Packaging',\n    description: 'Tins, rigid boxes, and container manufacturing',\n    defaultMoq: 200,\n    defaultLeadTimeDays: 15,\n    parametersSchema: {\n      required: ['container_type', 'material', 'capacity'],\n      optional: ['printing', 'coating', 'closure_type'],\n      container_types: ['Tins', 'Rigid boxes', 'Bottles', 'Jars'],\n      materials: ['Tinplate', 'Aluminum', 'Plastic', 'Glass'],\n      capacity_range: '50ml - 5000ml'\n    }\n  },\n  {\n    code: 'foam_protective',\n    industry: 'packaging_printing',\n    processName: 'Foam & Protective Packaging',\n    description: 'Protective foam inserts and packaging solutions',\n    defaultMoq: 50,\n    defaultLeadTimeDays: 8,\n    parametersSchema: {\n      required: ['foam_type', 'density', 'application'],\n      optional: ['die_cutting', 'lamination', 'conductive_properties'],\n      foam_types: ['PU foam', 'EPE foam', 'EPS foam', 'EVA foam'],\n      density_range: '15kg/m3 - 100kg/m3',\n      properties: ['Anti-static', 'Conductive', 'Fire retardant']\n    }\n  },\n  {\n    code: 'biodegradable_packaging',\n    industry: 'packaging_printing',\n    processName: 'Biodegradable Packaging',\n    description: 'Eco-friendly and sustainable packaging solutions',\n    defaultMoq: 500,\n    defaultLeadTimeDays: 12,\n    parametersSchema: {\n      required: ['package_type', 'material', 'certification'],\n      optional: ['barrier_properties', 'printing', 'composting_time'],\n      materials: ['PLA', 'Starch-based', 'Bagasse', 'Paper'],\n      certifications: ['Compostable', 'Biodegradable', 'Food contact safe'],\n      applications: ['Food packaging', 'Retail', 'E-commerce']\n    }\n  },\n\n  // Textile & Leather (5 SKUs)\n  {\n    code: 'cut_and_sew',\n    industry: 'textile_leather',\n    processName: 'Cut & Sew Jobwork',\n    description: 'Garment and uniform manufacturing services',\n    defaultMoq: 50,\n    defaultLeadTimeDays: 15,\n    parametersSchema: {\n      required: ['garment_type', 'fabric_type', 'sizes'],\n      optional: ['printing', 'embroidery', 'special_features'],\n      garment_types: ['T-shirts', 'Shirts', 'Pants', 'Uniforms', 'Workwear'],\n      fabrics: ['Cotton', 'Polyester', 'Blends', 'Functional fabrics'],\n      sizes: ['XS-XXL', 'Custom sizing']\n    }\n  },\n  {\n    code: 'embroidery_printing',\n    industry: 'textile_leather',\n    processName: 'Embroidery & Printing',\n    description: 'Screen printing and embroidery services for textiles',\n    defaultMoq: 25,\n    defaultLeadTimeDays: 7,\n    parametersSchema: {\n      required: ['decoration_type', 'design_complexity', 'quantity'],\n      optional: ['colors', 'placement', 'special_effects'],\n      decoration_types: ['Screen printing', 'Digital printing', 'Embroidery', 'Heat transfer'],\n      complexity: ['Simple', 'Medium', 'Complex', 'Multi-color'],\n      placements: ['Front', 'Back', 'Sleeve', 'Multiple locations']\n    }\n  },\n  {\n    code: 'knitting_weaving',\n    industry: 'textile_leather',\n    processName: 'Knitting & Weaving',\n    description: 'Fabric production and textile manufacturing services',\n    defaultMoq: 100,\n    defaultLeadTimeDays: 20,\n    parametersSchema: {\n      required: ['fabric_type', 'yarn_specification', 'width'],\n      optional: ['weight', 'finish', 'pattern'],\n      fabric_types: ['Knitted', 'Woven', 'Non-woven'],\n      yarns: ['Cotton', 'Polyester', 'Wool', 'Blends', 'Technical yarns'],\n      widths: ['150cm', '180cm', '220cm', 'Custom']\n    }\n  },\n  {\n    code: 'leather_goods',\n    industry: 'textile_leather',\n    processName: 'Leather Goods Manufacturing',\n    description: 'Manufacturing of bags, belts, wallets, and leather accessories',\n    defaultMoq: 20,\n    defaultLeadTimeDays: 18,\n    parametersSchema: {\n      required: ['product_type', 'leather_type', 'quality_grade'],\n      optional: ['hardware', 'lining', 'customization'],\n      product_types: ['Bags', 'Belts', 'Wallets', 'Accessories', 'Footwear'],\n      leather_types: ['Genuine leather', 'PU leather', 'Synthetic'],\n      grades: ['Top grain', 'Full grain', 'Split leather']\n    }\n  },\n  {\n    code: 'upholstery',\n    industry: 'textile_leather',\n    processName: 'Upholstery Jobwork',\n    description: 'Automotive and furniture upholstery services',\n    defaultMoq: 10,\n    defaultLeadTimeDays: 12,\n    parametersSchema: {\n      required: ['application', 'material_type', 'pattern'],\n      optional: ['foam_type', 'stitching_style', 'trim'],\n      applications: ['Automotive', 'Furniture', 'Marine', 'Aviation'],\n      materials: ['Leather', 'Vinyl', 'Fabric', 'Technical textiles'],\n      features: ['Fire retardant', 'Water resistant', 'UV resistant']\n    }\n  },\n\n  // Construction & Infrastructure (7 SKUs)\n  {\n    code: 'structural_steel',\n    industry: 'construction_infrastructure',\n    processName: 'Structural Steel Fabrication',\n    description: 'Building and infrastructure steel fabrication services',\n    defaultMoq: 1,\n    defaultLeadTimeDays: 21,\n    parametersSchema: {\n      required: ['steel_grade', 'structure_type', 'drawings'],\n      optional: ['surface_treatment', 'welding_certification', 'erection'],\n      steel_grades: ['IS2062', 'IS800', 'ASTM A36', 'ASTM A572'],\n      structure_types: ['Beams', 'Columns', 'Trusses', 'Frames'],\n      treatments: ['Galvanizing', 'Painting', 'Fireproofing']\n    }\n  },\n  {\n    code: 'prefab_modules',\n    industry: 'construction_infrastructure',\n    processName: 'Prefab Modules',\n    description: 'Site cabins, sheds, and modular structure manufacturing',\n    defaultMoq: 1,\n    defaultLeadTimeDays: 25,\n    parametersSchema: {\n      required: ['module_type', 'dimensions', 'specifications'],\n      optional: ['insulation', 'electrical', 'plumbing'],\n      module_types: ['Site offices', 'Toilets', 'Stores', 'Accommodation'],\n      materials: ['Steel frame', 'Sandwich panels', 'Container based'],\n      features: ['Insulated', 'AC ready', 'Furnished']\n    }\n  },\n  {\n    code: 'metal_joinery',\n    industry: 'construction_infrastructure',\n    processName: 'Metal Joinery & Welding',\n    description: 'Custom metalwork and fabrication services',\n    defaultMoq: 5,\n    defaultLeadTimeDays: 14,\n    parametersSchema: {\n      required: ['metal_type', 'joinery_type', 'finish'],\n      optional: ['installation', 'hardware', 'glass_work'],\n      metal_types: ['Aluminum', 'Steel', 'Stainless steel', 'MS'],\n      joinery_types: ['Windows', 'Doors', 'Partitions', 'Railings'],\n      finishes: ['Powder coating', 'Anodizing', 'Galvanizing']\n    }\n  },\n  {\n    code: 'carpentry_woodwork',\n    industry: 'construction_infrastructure',\n    processName: 'Carpentry & Woodwork',\n    description: 'Custom furniture and wooden structure manufacturing',\n    defaultMoq: 5,\n    defaultLeadTimeDays: 18,\n    parametersSchema: {\n      required: ['wood_type', 'product_type', 'finish'],\n      optional: ['hardware', 'assembly', 'installation'],\n      wood_types: ['Plywood', 'MDF', 'Solid wood', 'Particle board'],\n      products: ['Furniture', 'Cabinets', 'Doors', 'Paneling'],\n      finishes: ['Laminate', 'Veneer', 'Paint', 'Polish']\n    }\n  },\n  {\n    code: 'stone_tile',\n    industry: 'construction_infrastructure',\n    processName: 'Stone & Tile Cutting',\n    description: 'Natural stone and tile processing services',\n    defaultMoq: 10,\n    defaultLeadTimeDays: 10,\n    parametersSchema: {\n      required: ['material_type', 'processing_type', 'dimensions'],\n      optional: ['surface_finish', 'edge_treatment', 'installation'],\n      materials: ['Granite', 'Marble', 'Sandstone', 'Ceramic tiles'],\n      processing: ['Cutting', 'Polishing', 'Honing', 'Flaming'],\n      thickness: ['10mm', '15mm', '20mm', '25mm', '30mm']\n    }\n  },\n  {\n    code: 'precast_concrete',\n    industry: 'construction_infrastructure',\n    processName: 'Precast Concrete Components',\n    description: 'Concrete elements and structure manufacturing',\n    defaultMoq: 1,\n    defaultLeadTimeDays: 21,\n    parametersSchema: {\n      required: ['component_type', 'concrete_grade', 'dimensions'],\n      optional: ['reinforcement', 'surface_finish', 'installation'],\n      components: ['Beams', 'Columns', 'Slabs', 'Walls', 'Custom'],\n      grades: ['M20', 'M25', 'M30', 'M35', 'M40'],\n      finishes: ['Smooth', 'Textured', 'Exposed aggregate']\n    }\n  },\n  {\n    code: 'facade_glass_aluminium',\n    industry: 'construction_infrastructure',\n    processName: 'Glass & Aluminium Facade',\n    description: 'Building facade systems and glazing services',\n    defaultMoq: 1,\n    defaultLeadTimeDays: 30,\n    parametersSchema: {\n      required: ['system_type', 'glass_specification', 'area'],\n      optional: ['thermal_performance', 'safety_features', 'automation'],\n      systems: ['Curtain wall', 'Window wall', 'Structural glazing'],\n      glass_types: ['Float glass', 'Toughened', 'Laminated', 'Insulated'],\n      features: ['Thermal break', 'Sound insulation', 'Security']\n    }\n  }\n];\n\nasync function initializeDatabase() {\n  if (!db) return;\n  \n  try {\n    // Clear existing SKU data to ensure fresh data with correct industry IDs\n    console.log('Clearing existing SKU data...');\n    await db.delete(skus);\n\n    console.log('Initializing database with comprehensive SKU data...');\n    \n    // Insert all SKUs with correct industry IDs\n    const skuInserts = COMPREHENSIVE_SKU_DATA.map(sku => ({\n      code: sku.code,\n      industry: sku.industry,\n      processName: sku.processName,\n      description: sku.description,\n      defaultMoq: sku.defaultMoq,\n      defaultLeadTimeDays: sku.defaultLeadTimeDays,\n      parametersSchema: sku.parametersSchema,\n      active: true\n    }));\n\n    await db.insert(skus).values(skuInserts);\n    console.log(`Successfully inserted ${COMPREHENSIVE_SKU_DATA.length} SKUs into database`);\n    \n  } catch (error) {\n    console.error('Failed to initialize database with SKU data:', error);\n  }\n}\n\nasync function initializeAdminUsers() {\n  if (!db) return;\n  \n  try {\n    // Check if admin users already exist\n    const existingAdmins = await db.select()\n      .from(users)\n      .where(eq(users.role, 'admin'))\n      .limit(1);\n    \n    if (existingAdmins.length > 0) {\n      console.log('Admin users already exist, skipping admin seeding');\n      return;\n    }\n\n    console.log('Creating default admin users...');\n    \n    // Create admin company first\n    const adminCompany = {\n      id: randomUUID(),\n      name: 'Logicwerk Admin',\n      address: null,\n      contactInfo: null,\n      website: null,\n      businessType: null,\n      yearEstablished: null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    \n    await db.insert(companies).values(adminCompany);\n    \n    // Create default admin user\n    const saltRounds = 10;\n    const hashedPassword = await bcrypt.hash('admin123', saltRounds);\n    \n    const adminUser = {\n      id: randomUUID(),\n      email: 'admin@logicwerk.com',\n      password: hashedPassword,\n      name: 'System Administrator',\n      role: 'admin' as const,\n      companyId: adminCompany.id,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    \n    await db.insert(users).values(adminUser);\n    \n    console.log('✅ Successfully created admin user:');\n    console.log('   Email: admin@logicwerk.com');\n    console.log('   Password: admin123');\n    console.log('   Role: admin');\n    \n  } catch (error) {\n    console.error('Failed to initialize admin users:', error);\n  }\n}\n\n// Initialize storage with fallback capability\nconst storage: IStorage = new FallbackStorage();\n\nif (dbConnectionFailed) {\n  console.warn(\"Database connection failed, using in-memory storage fallback\");\n} else {\n  console.log(\"Database connection established, using Supabase storage\");\n  // Initialize database with comprehensive SKU data\n  initializeDatabase();\n  // Initialize admin users for system access\n  initializeAdminUsers();\n}\n\n// Debug: Test storage initialization\n(async () => {\n  try {\n    const allSKUs = await storage.getAllSKUs();\n    console.log(`Storage initialized with ${allSKUs.length} SKUs`);\n    \n    const mechanicalSKUs = await storage.getSKUsByIndustry('mechanical_manufacturing');\n    console.log(`Found ${mechanicalSKUs.length} SKUs for mechanical_manufacturing industry`);\n  } catch (error) {\n    console.error('Storage initialization test failed:', error);\n  }\n})();\n\nexport { storage };\n","size_bytes":84227},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, uuid, timestamp, boolean, integer, numeric, jsonb, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const userRoleEnum = pgEnum(\"user_role\", [\"buyer\", \"supplier\", \"admin\"]);\nexport const rfqStatusEnum = pgEnum(\"rfq_status\", [\n  \"draft\", \"submitted\", \"under_review\", \"invited\", \"offers_published\", \n  \"accepted\", \"in_production\", \"inspection\", \"shipped\", \"delivered\", \"closed\", \"cancelled\"\n]);\nexport const supplierVerificationEnum = pgEnum(\"supplier_verification\", [\"unverified\", \"bronze\", \"silver\", \"gold\"]);\nexport const inviteStatusEnum = pgEnum(\"invite_status\", [\"invited\", \"responded\", \"declined\"]);\nexport const quoteStatusEnum = pgEnum(\"quote_status\", [\"draft\", \"submitted\", \"accepted\", \"rejected\"]);\nexport const orderStatusEnum = pgEnum(\"order_status\", [\n  \"created\", \"deposit_paid\", \"production\", \"inspection\", \"shipped\", \"delivered\", \"closed\", \"cancelled\"\n]);\nexport const payoutStatusEnum = pgEnum(\"payout_status\", [\"pending\", \"paid\", \"failed\"]);\nexport const inspectionStatusEnum = pgEnum(\"inspection_status\", [\"pass\", \"fail\"]);\nexport const ticketStatusEnum = pgEnum(\"ticket_status\", [\"open\", \"in_progress\", \"resolved\"]);\nexport const notificationTypeEnum = pgEnum(\"notification_type\", [\n  \"rfq_submitted\", \"rfq_approved\", \"rfq_status_change\", \"quote_received\", \n  \"quote_accepted\", \"quote_rejected\", \"supplier_invitation\", \"supplier_verified\",\n  \"order_created\", \"order_status_change\", \"production_update\", \"inspection_completed\",\n  \"payout_processed\", \"payment_received\", \"payment_due\", \"payment_failed\", \"general\"\n]);\n\n// Payment-related enums\nexport const paymentMethodTypeEnum = pgEnum(\"payment_method_type\", [\n  \"razorpay\", \"bank_transfer\", \"upi\", \"wallet\", \"other\"\n]);\n\nexport const paymentTransactionStatusEnum = pgEnum(\"payment_transaction_status\", [\n  \"pending\", \"processing\", \"completed\", \"failed\", \"cancelled\", \"refunded\"\n]);\n\nexport const paymentTransactionTypeEnum = pgEnum(\"payment_transaction_type\", [\n  \"advance_payment\", \"final_payment\", \"full_payment\", \"refund\", \"commission\"\n]);\n\nexport const paymentConfigTypeEnum = pgEnum(\"payment_config_type\", [\n  \"advance_percentage\", \"commission_rate\", \"platform_fee\", \"gateway_fee\"\n]);\n\n// Core tables\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: userRoleEnum(\"role\").notNull().default(\"buyer\"),\n  name: text(\"name\"),\n  companyId: uuid(\"company_id\").references(() => companies.id),\n  phone: text(\"phone\"),\n  isVerified: boolean(\"is_verified\").default(false),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const companies = pgTable(\"companies\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  gstin: text(\"gstin\"),\n  pan: text(\"pan\"),\n  address: jsonb(\"address\"),\n  city: text(\"city\"),\n  state: text(\"state\"),\n  country: text(\"country\").default(\"India\"),\n  documents: jsonb(\"documents\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const supplierProfiles = pgTable(\"supplier_profiles\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  companyId: uuid(\"company_id\").references(() => companies.id).notNull(),\n  capabilities: jsonb(\"capabilities\"),\n  machines: jsonb(\"machines\"),\n  moqDefault: integer(\"moq_default\"),\n  capacityCalendar: jsonb(\"capacity_calendar\"),\n  certifications: jsonb(\"certifications\"),\n  verifiedStatus: supplierVerificationEnum(\"verified_status\").default(\"unverified\"),\n  bankDetails: jsonb(\"bank_details\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const skus = pgTable(\"skus\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(),\n  industry: text(\"industry\").notNull(),\n  processName: text(\"process_name\").notNull(),\n  description: text(\"description\"),\n  defaultMoq: integer(\"default_moq\"),\n  defaultLeadTimeDays: integer(\"default_lead_time_days\"),\n  parametersSchema: jsonb(\"parameters_schema\"),\n  active: boolean(\"active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const rfqs = pgTable(\"rfqs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  rfqNumber: text(\"rfq_number\").notNull().unique(),\n  buyerId: uuid(\"buyer_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  status: rfqStatusEnum(\"status\").default(\"draft\"),\n  details: jsonb(\"details\").notNull(),\n  files: jsonb(\"files\"),\n  ndaRequired: boolean(\"nda_required\").default(false),\n  confidential: boolean(\"confidential\").default(false),\n  budgetRange: jsonb(\"budget_range\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const rfqItems = pgTable(\"rfq_items\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  rfqId: uuid(\"rfq_id\").references(() => rfqs.id).notNull(),\n  itemRef: text(\"item_ref\").notNull(),\n  skuCode: text(\"sku_code\").references(() => skus.code).notNull(),\n  itemDetails: jsonb(\"item_details\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const supplierInvites = pgTable(\"supplier_invites\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  rfqId: uuid(\"rfq_id\").references(() => rfqs.id).notNull(),\n  supplierId: uuid(\"supplier_id\").references(() => users.id).notNull(),\n  invitedBy: uuid(\"invited_by\").references(() => users.id).notNull(),\n  invitedAt: timestamp(\"invited_at\").defaultNow(),\n  status: inviteStatusEnum(\"status\").default(\"invited\"),\n  responseDeadline: timestamp(\"response_deadline\"),\n});\n\nexport const quotes = pgTable(\"quotes\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  rfqId: uuid(\"rfq_id\").references(() => rfqs.id).notNull(),\n  supplierId: uuid(\"supplier_id\").references(() => users.id).notNull(),\n  quoteJson: jsonb(\"quote_json\").notNull(),\n  status: quoteStatusEnum(\"status\").default(\"draft\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const curatedOffers = pgTable(\"curated_offers\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  rfqId: uuid(\"rfq_id\").references(() => rfqs.id).notNull(),\n  adminId: uuid(\"admin_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  details: jsonb(\"details\").notNull(),\n  totalPrice: numeric(\"total_price\", { precision: 12, scale: 2 }),\n  supplierIndicators: jsonb(\"supplier_indicators\"),\n  publishedAt: timestamp(\"published_at\"),\n  expiresAt: timestamp(\"expires_at\"),\n  // Payment integration fields\n  paymentLink: text(\"payment_link\"),\n  advancePaymentAmount: numeric(\"advance_payment_amount\", { precision: 12, scale: 2 }),\n  finalPaymentAmount: numeric(\"final_payment_amount\", { precision: 12, scale: 2 }),\n  paymentDeadline: timestamp(\"payment_deadline\"),\n  paymentTerms: text(\"payment_terms\"),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderNumber: text(\"order_number\").notNull().unique(),\n  rfqId: uuid(\"rfq_id\").references(() => rfqs.id).notNull(),\n  curatedOfferId: uuid(\"curated_offer_id\").references(() => curatedOffers.id),\n  buyerId: uuid(\"buyer_id\").references(() => users.id).notNull(),\n  adminId: uuid(\"admin_id\").references(() => users.id),\n  supplierId: uuid(\"supplier_id\").references(() => users.id),\n  status: orderStatusEnum(\"status\").default(\"created\"),\n  depositPercent: integer(\"deposit_percent\").default(30),\n  depositPaid: boolean(\"deposit_paid\").default(false),\n  totalAmount: numeric(\"total_amount\", { precision: 12, scale: 2 }),\n  escrowTxRef: text(\"escrow_tx_ref\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const productionUpdates = pgTable(\"production_updates\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: uuid(\"order_id\").references(() => orders.id).notNull(),\n  stage: text(\"stage\").notNull(),\n  detail: text(\"detail\"),\n  updatedBy: uuid(\"updated_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const inspections = pgTable(\"inspections\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: uuid(\"order_id\").references(() => orders.id).notNull(),\n  inspectorId: uuid(\"inspector_id\").references(() => users.id),\n  reportRef: text(\"report_ref\"),\n  status: inspectionStatusEnum(\"status\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const payouts = pgTable(\"payouts\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: uuid(\"order_id\").references(() => orders.id).notNull(),\n  supplierId: uuid(\"supplier_id\").references(() => users.id).notNull(),\n  amount: numeric(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  fees: numeric(\"fees\", { precision: 12, scale: 2 }),\n  status: payoutStatusEnum(\"status\").default(\"pending\"),\n  paidAt: timestamp(\"paid_at\"),\n});\n\nexport const documents = pgTable(\"documents\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  companyId: uuid(\"company_id\").references(() => companies.id),\n  docType: text(\"doc_type\").notNull(),\n  fileRef: text(\"file_ref\").notNull(),\n  metadata: jsonb(\"metadata\"),\n  uploadedBy: uuid(\"uploaded_by\").references(() => users.id),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow(),\n});\n\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  entityType: text(\"entity_type\").notNull(),\n  entityId: uuid(\"entity_id\").notNull(),\n  action: text(\"action\").notNull(),\n  userId: uuid(\"user_id\").references(() => users.id),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const tickets = pgTable(\"tickets\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ref: text(\"ref\").notNull().unique(),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  subject: text(\"subject\").notNull(),\n  status: ticketStatusEnum(\"status\").default(\"open\"),\n  messages: jsonb(\"messages\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  type: notificationTypeEnum(\"type\").notNull(),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  metadata: jsonb(\"metadata\"),\n  entityId: uuid(\"entity_id\"),\n  entityType: text(\"entity_type\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Payment system tables\nexport const paymentMethods = pgTable(\"payment_methods\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  type: paymentMethodTypeEnum(\"type\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  configuration: jsonb(\"configuration\"), // Gateway API keys, settings, etc.\n  displayName: text(\"display_name\").notNull(),\n  description: text(\"description\"),\n  processingFeePercent: numeric(\"processing_fee_percent\", { precision: 5, scale: 2 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const paymentConfigurations = pgTable(\"payment_configurations\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  configType: paymentConfigTypeEnum(\"config_type\").notNull(),\n  value: numeric(\"value\", { precision: 12, scale: 2 }).notNull(),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const paymentTransactions = pgTable(\"payment_transactions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  transactionRef: text(\"transaction_ref\").notNull().unique(),\n  orderId: uuid(\"order_id\").references(() => orders.id),\n  curatedOfferId: uuid(\"curated_offer_id\").references(() => curatedOffers.id),\n  payerId: uuid(\"payer_id\").references(() => users.id).notNull(), // Buyer who makes payment\n  recipientId: uuid(\"recipient_id\").references(() => users.id), // Supplier who receives payout\n  paymentMethodId: uuid(\"payment_method_id\").references(() => paymentMethods.id),\n  amount: numeric(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  fees: numeric(\"fees\", { precision: 12, scale: 2 }).default(\"0\"),\n  netAmount: numeric(\"net_amount\", { precision: 12, scale: 2 }).notNull(),\n  currency: text(\"currency\").default(\"INR\"),\n  status: paymentTransactionStatusEnum(\"status\").default(\"pending\"),\n  transactionType: paymentTransactionTypeEnum(\"transaction_type\").notNull(),\n  gatewayTransactionId: text(\"gateway_transaction_id\"),\n  gatewayResponse: jsonb(\"gateway_response\"),\n  notes: text(\"notes\"),\n  processedAt: timestamp(\"processed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCompanySchema = createInsertSchema(companies).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSupplierProfileSchema = createInsertSchema(supplierProfiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRFQSchema = createInsertSchema(rfqs).omit({\n  id: true,\n  rfqNumber: true,\n  createdAt: true,\n  updatedAt: true,\n}).refine((data) => {\n  // Validate that details.items exists and is an array with at least one item\n  if (!data.details || typeof data.details !== 'object') {\n    return false;\n  }\n  \n  const details = data.details as any;\n  if (!Array.isArray(details.items) || details.items.length === 0) {\n    return false;\n  }\n  \n  // Validate that each item has a skuCode\n  return details.items.every((item: any) => item && typeof item.skuCode === 'string' && item.skuCode.trim().length > 0);\n}, {\n  message: \"RFQ must have at least one item in details.items, and each item must have a valid skuCode\",\n});\n\nexport const insertQuoteSchema = createInsertSchema(quotes).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Select types\nexport type User = typeof users.$inferSelect;\nexport type Company = typeof companies.$inferSelect;\nexport type SupplierProfile = typeof supplierProfiles.$inferSelect;\nexport type SKU = typeof skus.$inferSelect;\nexport type RFQ = typeof rfqs.$inferSelect;\nexport type RFQItem = typeof rfqItems.$inferSelect;\nexport type SupplierInvite = typeof supplierInvites.$inferSelect;\nexport type Quote = typeof quotes.$inferSelect;\nexport type CuratedOffer = typeof curatedOffers.$inferSelect;\nexport type Order = typeof orders.$inferSelect;\nexport type ProductionUpdate = typeof productionUpdates.$inferSelect;\nexport type Inspection = typeof inspections.$inferSelect;\nexport type Payout = typeof payouts.$inferSelect;\nexport type Document = typeof documents.$inferSelect;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type Ticket = typeof tickets.$inferSelect;\nexport type Notification = typeof notifications.$inferSelect;\nexport type PaymentMethod = typeof paymentMethods.$inferSelect;\nexport type PaymentConfiguration = typeof paymentConfigurations.$inferSelect;\nexport type PaymentTransaction = typeof paymentTransactions.$inferSelect;\n\nexport const insertDocumentSchema = createInsertSchema(documents).omit({\n  id: true,\n  uploadedAt: true,\n});\n\nexport const insertCuratedOfferSchema = createInsertSchema(curatedOffers).omit({\n  id: true,\n  publishedAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPaymentMethodSchema = createInsertSchema(paymentMethods).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPaymentConfigurationSchema = createInsertSchema(paymentConfigurations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPaymentTransactionSchema = createInsertSchema(paymentTransactions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Type definitions for offer details and related structures\nexport const offerDetailsSchema = z.object({\n  unitPrice: z.number(),\n  toolingCost: z.number().optional(),\n  leadTime: z.number().optional(),\n  moq: z.number().optional(),\n});\n\nexport const rfqItemDetailsSchema = z.object({\n  quantity: z.number(),\n  skuCode: z.string(),\n  specifications: z.record(z.any()).optional(),\n});\n\nexport const rfqDetailsSchema = z.object({\n  items: z.array(rfqItemDetailsSchema),\n  budgetRange: z.object({\n    min: z.number(),\n    max: z.number(),\n  }).optional(),\n});\n\nexport type OfferDetails = z.infer<typeof offerDetailsSchema>;\nexport type RFQItemDetails = z.infer<typeof rfqItemDetailsSchema>;\nexport type RFQDetails = z.infer<typeof rfqDetailsSchema>;\n\n// Insert types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertCompany = z.infer<typeof insertCompanySchema>;\nexport type InsertSupplierProfile = z.infer<typeof insertSupplierProfileSchema>;\nexport type InsertRFQ = z.infer<typeof insertRFQSchema>;\nexport type InsertQuote = z.infer<typeof insertQuoteSchema>;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\nexport type InsertCuratedOffer = z.infer<typeof insertCuratedOfferSchema>;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type InsertPaymentMethod = z.infer<typeof insertPaymentMethodSchema>;\nexport type InsertPaymentConfiguration = z.infer<typeof insertPaymentConfigurationSchema>;\nexport type InsertPaymentTransaction = z.infer<typeof insertPaymentTransactionSchema>;\n","size_bytes":18167},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/components/auth/auth-provider\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useState } from \"react\";\n\n// Pages\nimport Login from \"@/pages/auth/login\";\nimport Register from \"@/pages/auth/register\";\nimport BuyerDashboard from \"@/pages/buyer/dashboard\";\nimport CreateRFQ from \"@/pages/buyer/create-rfq\";\nimport BuyerRFQs from \"@/pages/buyer/rfqs\";\nimport BuyerRFQDetail from \"@/pages/buyer/rfq-detail\";\nimport BuyerOffers from \"@/pages/buyer/offers\";\nimport BuyerOrders from \"@/pages/buyer/orders\";\nimport BuyerPayments from \"@/pages/buyer/payments\";\nimport SupplierDashboard from \"@/pages/supplier/dashboard\";\nimport SupplierOnboarding from \"@/pages/supplier/onboarding\";\nimport SupplierRFQs from \"@/pages/supplier/rfqs\";\nimport SupplierQuotes from \"@/pages/supplier/quotes\";\nimport SupplierRFQDetail from \"@/pages/supplier/rfq-detail\";\nimport SupplierOrders from \"@/pages/supplier/orders\";\nimport SupplierPayouts from \"@/pages/supplier/payouts\";\nimport AdminDashboard from \"@/pages/admin/dashboard\";\nimport AdminRFQManagement from \"@/pages/admin/rfq-management\";\nimport AdminRFQDetail from \"@/pages/admin/rfq-detail\";\nimport AdminSupplierManagement from \"@/pages/admin/supplier-management\";\nimport AdminOfferComposer from \"@/pages/admin/offer-composer\";\nimport AdminOrderManagement from \"@/pages/admin/order-management\";\nimport AdminPaymentConfig from \"@/pages/admin/payment-config\";\nimport NotFound from \"@/pages/not-found\";\n\n// Components\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\n\nfunction DashboardLayout() {\n  const { user } = useAuth();\n  const [activeTab, setActiveTab] = useState(() => {\n    if (user?.role === 'admin') return 'admin';\n    if (user?.role === 'supplier') return 'supplier';\n    return 'buyer';\n  });\n\n  const currentPath = window.location.pathname;\n  \n  const buyerSidebarItems = [\n    { icon: 'fas fa-home', label: 'Dashboard', href: '/buyer/dashboard', active: currentPath === '/buyer/dashboard' },\n    { icon: 'fas fa-plus-circle', label: 'Create RFQ', href: '/buyer/create-rfq', active: currentPath === '/buyer/create-rfq' },\n    { icon: 'fas fa-file-alt', label: 'My RFQs', href: '/buyer/rfqs', active: currentPath === '/buyer/rfqs' },\n    { icon: 'fas fa-handshake', label: 'Offers', href: '/buyer/offers', active: currentPath === '/buyer/offers' },\n    { icon: 'fas fa-shopping-cart', label: 'Orders', href: '/buyer/orders', active: currentPath === '/buyer/orders' },\n    { icon: 'fas fa-credit-card', label: 'Payments', href: '/buyer/payments', active: currentPath === '/buyer/payments' },\n    { icon: 'fas fa-headset', label: 'Support', href: '#', active: false },\n  ];\n\n  const supplierSidebarItems = [\n    { icon: 'fas fa-home', label: 'Dashboard', href: '/supplier/dashboard', active: currentPath === '/supplier/dashboard' },\n    { icon: 'fas fa-file-invoice', label: 'Invited RFQs', href: '/supplier/rfqs', active: currentPath === '/supplier/rfqs' },\n    { icon: 'fas fa-quote-right', label: 'My Quotes', href: '/supplier/quotes', active: currentPath === '/supplier/quotes' },\n    { icon: 'fas fa-shopping-cart', label: 'Orders', href: '/supplier/orders', active: currentPath === '/supplier/orders' },\n    { icon: 'fas fa-money-bill-wave', label: 'Payouts', href: '/supplier/payouts', active: currentPath === '/supplier/payouts' },\n    { icon: 'fas fa-user-cog', label: 'Profile', href: '/supplier/onboarding', active: currentPath === '/supplier/onboarding' },\n  ];\n\n  const adminSidebarItems = [\n    { icon: 'fas fa-home', label: 'Dashboard', href: '/admin/dashboard', active: currentPath === '/admin/dashboard' },\n    { icon: 'fas fa-file-alt', label: 'RFQ Management', href: '/admin/rfqs', active: currentPath === '/admin/rfqs' },\n    { icon: 'fas fa-users', label: 'Supplier Management', href: '/admin/suppliers', active: currentPath === '/admin/suppliers' },\n    { icon: 'fas fa-handshake', label: 'Offer Composer', href: '/admin/offers', active: currentPath === '/admin/offers' },\n    { icon: 'fas fa-shopping-cart', label: 'Order Management', href: '/admin/orders', active: currentPath === '/admin/orders' },\n    { icon: 'fas fa-credit-card', label: 'Payment Configuration', href: '/admin/payment-config', active: currentPath === '/admin/payment-config' },\n    { icon: 'fas fa-chart-bar', label: 'Analytics', href: '#', active: false },\n  ];\n\n  const getSidebarItems = () => {\n    switch (activeTab) {\n      case 'supplier': return supplierSidebarItems;\n      case 'admin': return adminSidebarItems;\n      default: return buyerSidebarItems;\n    }\n  };\n\n  const handleTabChange = (tab: string) => {\n    setActiveTab(tab);\n    // Navigate to the respective dashboard\n    window.location.href = `/${tab}/dashboard`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar onTabChange={handleTabChange} activeTab={activeTab} />\n      <div className=\"flex\">\n        <Sidebar items={getSidebarItems()} />\n        <main className=\"flex-1\">\n          <Switch>\n            {/* Buyer Routes */}\n            <Route path=\"/buyer/dashboard\" component={BuyerDashboard} />\n            <Route path=\"/buyer/create-rfq\" component={CreateRFQ} />\n            <Route path=\"/buyer/rfqs\" component={BuyerRFQs} />\n            <Route path=\"/buyer/rfq/:id\" component={BuyerRFQDetail} />\n            <Route path=\"/buyer/offers\" component={BuyerOffers} />\n            <Route path=\"/buyer/orders\" component={BuyerOrders} />\n            <Route path=\"/buyer/payments\" component={BuyerPayments} />\n            \n            {/* Supplier Routes */}\n            <Route path=\"/supplier/dashboard\" component={SupplierDashboard} />\n            <Route path=\"/supplier/onboarding\" component={SupplierOnboarding} />\n            <Route path=\"/supplier/rfqs\" component={SupplierRFQs} />\n            <Route path=\"/supplier/quotes\" component={SupplierQuotes} />\n            <Route path=\"/supplier/rfq/:id\" component={SupplierRFQDetail} />\n            <Route path=\"/supplier/orders\" component={SupplierOrders} />\n            <Route path=\"/supplier/payouts\" component={SupplierPayouts} />\n            \n            {/* Admin Routes */}\n            <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n            <Route path=\"/admin/rfqs\" component={AdminRFQManagement} />\n            <Route path=\"/admin/rfq/:id\" component={AdminRFQDetail} />\n            <Route path=\"/admin/suppliers\" component={AdminSupplierManagement} />\n            <Route path=\"/admin/offers\" component={AdminOfferComposer} />\n            <Route path=\"/admin/orders\" component={AdminOrderManagement} />\n            <Route path=\"/admin/payment-config\" component={AdminPaymentConfig} />\n            \n            {/* Default redirect based on role */}\n            <Route path=\"/dashboard\">\n              {user?.role === 'admin' && <AdminDashboard />}\n              {user?.role === 'supplier' && <SupplierDashboard />}\n              {(!user?.role || user?.role === 'buyer') && <BuyerDashboard />}\n            </Route>\n            \n            <Route component={NotFound} />\n          </Switch>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nfunction Router() {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      \n      {user ? (\n        <Route path=\"/*\" component={DashboardLayout} />\n      ) : (\n        <Route>\n          <Login />\n        </Route>\n      )}\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <Router />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":8405},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(221.2, 83.2%, 53.3%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05);\n  --shadow-sm: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05), 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1);\n  --shadow: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05), 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(0, 0%, 0%, 0.1), 0px 2px 4px -1px hsl(0, 0%, 0%, 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(0, 0%, 0%, 0.1), 0px 4px 6px -2px hsl(0, 0%, 0%, 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(0, 0%, 0%, 0.1), 0px 10px 10px -5px hsl(0, 0%, 0%, 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0, 0%, 0%, 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(224.3, 76.3%, 94.1%);\n  --chart-1: hsl(217.2, 91.2%, 59.8%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(222.2, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217.2, 91.2%, 59.8%);\n  --sidebar-primary-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-accent: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(224.3, 76.3%, 94.1%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold;\n  }\n\n  .sidebar-link.active {\n    @apply bg-primary text-primary-foreground;\n  }\n\n  .tab-content {\n    @apply hidden;\n  }\n\n  .tab-content.active {\n    @apply block;\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground) / 0.3);\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--muted-foreground) / 0.5);\n}\n\n/* Animation for loading states */\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n.animate-pulse {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Custom focus styles */\n.focus-visible:focus-visible {\n  @apply outline-none ring-2 ring-ring ring-offset-2 ring-offset-background;\n}\n\n/* Professional button styles */\n.btn-primary {\n  @apply bg-primary text-primary-foreground hover:opacity-90 focus-visible:ring-primary;\n}\n\n.btn-secondary {\n  @apply bg-secondary text-secondary-foreground hover:opacity-80 focus-visible:ring-secondary;\n}\n\n/* Card hover effects */\n.card-hover {\n  @apply transition-all duration-200 hover:shadow-md hover:border-primary hover:border-opacity-20;\n}\n\n/* Status indicators */\n.status-active {\n  @apply bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200;\n}\n\n.status-pending {\n  @apply bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200;\n}\n\n.status-inactive {\n  @apply bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200;\n}\n\n/* Form styles */\n.form-input {\n  @apply w-full px-3 py-2 border border-input bg-background text-foreground rounded-md focus:outline-none focus:ring-2 focus:ring-ring focus:border-ring;\n}\n\n.form-label {\n  @apply block text-sm font-medium text-foreground mb-1;\n}\n\n/* Table styles */\n.table-header {\n  @apply bg-muted bg-opacity-50 text-muted-foreground font-medium text-sm;\n}\n\n.table-cell {\n  @apply px-6 py-4 text-sm;\n}\n\n/* Responsive utilities */\n@media (max-width: 768px) {\n  .mobile-hidden {\n    @apply hidden;\n  }\n  \n  .mobile-full {\n    @apply w-full;\n  }\n}\n\n/* Print styles */\n@media print {\n  .print-hidden {\n    @apply hidden;\n  }\n  \n  .print-visible {\n    @apply block;\n  }\n}\n","size_bytes":6110},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.tsx":{"content":"import { useAuth as useAuthContext } from '@/components/auth/auth-provider';\n\nexport const useAuth = useAuthContext;\n","size_bytes":117},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/constants.ts":{"content":"export const INDUSTRIES = [\n  {\n    id: 'mechanical_manufacturing',\n    name: 'Mechanical Manufacturing',\n    description: 'CNC, Sheet Metal, Injection Molding',\n    icon: 'fas fa-cog',\n  },\n  {\n    id: 'electronics_electrical',\n    name: 'Electronics & Electrical',\n    description: 'PCB, Assembly, Testing',\n    icon: 'fas fa-microchip',\n  },\n  {\n    id: 'packaging_printing',\n    name: 'Packaging & Printing',\n    description: 'Corrugated, Labels, Flexible',\n    icon: 'fas fa-box',\n  },\n  {\n    id: 'textile_leather',\n    name: 'Textile & Leather',\n    description: 'Cut & Sew, Embroidery, Leather',\n    icon: 'fas fa-cut',\n  },\n  {\n    id: 'construction_infrastructure',\n    name: 'Construction & Infrastructure',\n    description: 'Steel, Prefab, Joinery',\n    icon: 'fas fa-building',\n  },\n];\n\nexport const RFQ_STATUS_COLORS = {\n  draft: 'bg-gray-100 text-gray-800',\n  submitted: 'bg-blue-100 text-blue-800',\n  under_review: 'bg-yellow-100 text-yellow-800',\n  invited: 'bg-purple-100 text-purple-800',\n  offers_published: 'bg-green-100 text-green-800',\n  accepted: 'bg-emerald-100 text-emerald-800',\n  in_production: 'bg-orange-100 text-orange-800',\n  inspection: 'bg-indigo-100 text-indigo-800',\n  shipped: 'bg-cyan-100 text-cyan-800',\n  delivered: 'bg-green-100 text-green-800',\n  closed: 'bg-gray-100 text-gray-800',\n  cancelled: 'bg-red-100 text-red-800',\n};\n\nexport const ORDER_STATUS_COLORS = {\n  created: 'bg-blue-100 text-blue-800',\n  deposit_paid: 'bg-green-100 text-green-800',\n  production: 'bg-orange-100 text-orange-800',\n  inspection: 'bg-purple-100 text-purple-800',\n  shipped: 'bg-cyan-100 text-cyan-800',\n  delivered: 'bg-emerald-100 text-emerald-800',\n  closed: 'bg-gray-100 text-gray-800',\n  cancelled: 'bg-red-100 text-red-800',\n};\n\nexport const UNITS = [\n  { value: 'pcs', label: 'Pieces' },\n  { value: 'sets', label: 'Sets' },\n  { value: 'meters', label: 'Meters' },\n  { value: 'sqm', label: 'Square Meters' },\n  { value: 'kg', label: 'Kilograms' },\n];\n\nexport const PRIORITIES = [\n  { value: 'standard', label: 'Standard' },\n  { value: 'premium', label: 'Premium' },\n  { value: 'fast_track', label: 'Fast Track' },\n];\n\nexport const TOLERANCES = [\n  { value: '±0.1mm', label: '±0.1mm (High Precision)' },\n  { value: '±0.2mm', label: '±0.2mm (Standard)' },\n  { value: '±0.5mm', label: '±0.5mm (General)' },\n  { value: '±1.0mm', label: '±1.0mm (Rough)' },\n];\n\nexport const SURFACE_FINISHES = [\n  { value: 'anodize', label: 'Anodizing' },\n  { value: 'powder_coat', label: 'Powder Coating' },\n  { value: 'electroplate', label: 'Electroplating' },\n  { value: 'painting', label: 'Painting' },\n  { value: 'heat_treat', label: 'Heat Treatment' },\n  { value: 'polishing', label: 'Polishing' },\n];\n\nexport const INSPECTION_TYPES = [\n  { value: 'none', label: 'None' },\n  { value: 'basic', label: 'Basic Dimensional' },\n  { value: 'advanced', label: 'Advanced CMM' },\n  { value: 'lab_test', label: 'Lab Testing' },\n];\n\nexport const PACKAGING_TYPES = [\n  { value: 'standard', label: 'Standard' },\n  { value: 'custom_printed', label: 'Custom Printed' },\n  { value: 'protective_foam', label: 'Protective Foam' },\n];\n","size_bytes":3138},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { getAuthHeaders } from \"./supabase\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const authHeaders = getAuthHeaders();\n  const headers = data \n    ? { \"Content-Type\": \"application/json\", ...authHeaders }\n    : { ...authHeaders };\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const authHeaders = getAuthHeaders();\n    \n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n      headers: {\n        ...authHeaders,\n      },\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1625},"client/src/lib/supabase.ts":{"content":"// Note: According to the Supabase blueprint, we should use Drizzle directly\n// instead of @supabase/supabase-js for database operations.\n// The authentication is handled by the backend API.\n\n// Simple HTTP client for API calls (keeping for backward compatibility)\nexport const apiClient = {\n  get: async (url: string, headers: Record<string, string> = {}) => {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        ...headers,\n      },\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    return response.json();\n  },\n\n  post: async (url: string, data: any, headers: Record<string, string> = {}) => {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...headers,\n      },\n      body: JSON.stringify(data),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    return response.json();\n  },\n\n  put: async (url: string, data: any, headers: Record<string, string> = {}) => {\n    const response = await fetch(url, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        ...headers,\n      },\n      body: JSON.stringify(data),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    return response.json();\n  },\n\n  delete: async (url: string, headers: Record<string, string> = {}) => {\n    const response = await fetch(url, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        ...headers,\n      },\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    return response.json();\n  },\n\n  patch: async (url: string, data: any, headers: Record<string, string> = {}) => {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        ...headers,\n      },\n      body: JSON.stringify(data),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    return response.json();\n  },\n};\n\n// Auth helpers\nexport const getAuthHeaders = (): Record<string, string> => {\n  // First try to get JWT token\n  const token = localStorage.getItem('token');\n  if (token) {\n    return {\n      'Authorization': `Bearer ${token}`,\n    };\n  }\n  \n  // Fall back to header-based auth for backward compatibility\n  const user = localStorage.getItem('user');\n  if (user) {\n    const userData = JSON.parse(user);\n    if (userData.email) {\n      return {\n        'x-user-email': userData.email,\n      };\n    }\n  }\n  return {};\n};\n\nexport const authenticatedApiClient = {\n  get: (url: string) => apiClient.get(url, getAuthHeaders()),\n  post: (url: string, data: any) => apiClient.post(url, data, getAuthHeaders()),\n  put: (url: string, data: any) => apiClient.put(url, data, getAuthHeaders()),\n  delete: (url: string) => apiClient.delete(url, getAuthHeaders()),\n  patch: (url: string, data: any) => apiClient.patch(url, data, getAuthHeaders()),\n};\n","size_bytes":3217},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n// Shared currency formatter - ensures consistent INR formatting across the app\nexport function formatCurrency(amount: string | number): string {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  if (isNaN(numAmount)) return '₹0';\n  return `₹${numAmount.toLocaleString('en-IN')}`;\n}\n","size_bytes":484},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/auth/auth-provider.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { User } from '@shared/schema';\n\ninterface AuthContextType {\n  user: User | null;\n  login: (email: string, password: string) => Promise<void>;\n  register: (userData: any) => Promise<void>;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for stored user on mount\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Login failed');\n      }\n\n      const { user, token } = await response.json();\n      setUser(user);\n      localStorage.setItem('user', JSON.stringify(user));\n      \n      // Store JWT token if provided\n      if (token) {\n        localStorage.setItem('token', token);\n      }\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const register = async (userData: any) => {\n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(userData),\n      });\n\n      if (!response.ok) {\n        throw new Error('Registration failed');\n      }\n\n      const { user, token } = await response.json();\n      setUser(user);\n      localStorage.setItem('user', JSON.stringify(user));\n      \n      // Store JWT token if provided\n      if (token) {\n        localStorage.setItem('token', token);\n      }\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, register, logout, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":2577},"client/src/components/layout/navbar.tsx":{"content":"import { Bell, LogOut, User } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useLocation } from 'wouter';\nimport { NotificationDropdown } from './notification-dropdown';\n\ninterface NavbarProps {\n  onTabChange?: (tab: string) => void;\n  activeTab?: string;\n}\n\nexport function Navbar({ onTabChange, activeTab }: NavbarProps) {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const handleLogout = () => {\n    logout();\n    setLocation('/login');\n  };\n\n  const getInitials = (name?: string) => {\n    if (!name) return user?.email?.charAt(0).toUpperCase() || 'U';\n    return name.split(' ').map(n => n.charAt(0)).join('').toUpperCase();\n  };\n\n  const tabs = [\n    { id: 'buyer', label: 'Buyer Portal', roles: ['buyer', 'admin'] },\n    { id: 'supplier', label: 'Supplier Portal', roles: ['supplier', 'admin'] },\n    { id: 'admin', label: 'Admin Portal', roles: ['admin'] },\n  ];\n\n  const visibleTabs = tabs.filter(tab => \n    user?.role && tab.roles.includes(user.role)\n  );\n\n  return (\n    <header className=\"bg-card border-b border-border sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex-shrink-0\">\n              <h1 className=\"text-2xl font-bold text-primary\">Logicwerk</h1>\n            </div>\n            {onTabChange && (\n              <nav className=\"hidden md:flex space-x-6\">\n                {visibleTabs.map(tab => (\n                  <button\n                    key={tab.id}\n                    onClick={() => onTabChange(tab.id)}\n                    className={`px-3 py-2 text-sm font-medium transition-colors ${\n                      activeTab === tab.id\n                        ? 'text-foreground font-semibold'\n                        : 'text-muted-foreground hover:text-foreground'\n                    }`}\n                    data-testid={`tab-${tab.id}`}\n                  >\n                    {tab.label}\n                  </button>\n                ))}\n              </nav>\n            )}\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <NotificationDropdown />\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-sm font-medium\">\n                <span data-testid=\"text-user-initials\">{getInitials(user?.name || undefined)}</span>\n              </div>\n              <span className=\"text-sm font-medium\" data-testid=\"text-user-name\">\n                {user?.name || user?.email}\n              </span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleLogout}\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3113},"client/src/components/layout/sidebar.tsx":{"content":"import { cn } from '@/lib/utils';\n\ninterface SidebarItem {\n  icon: string;\n  label: string;\n  href: string;\n  active?: boolean;\n}\n\ninterface SidebarProps {\n  items: SidebarItem[];\n  onItemClick?: (href: string) => void;\n}\n\nexport function Sidebar({ items, onItemClick }: SidebarProps) {\n  return (\n    <aside className=\"w-64 bg-card border-r border-border min-h-screen\">\n      <div className=\"p-6\">\n        <nav className=\"space-y-2\">\n          {items.map((item, index) => (\n            <a\n              key={index}\n              href={item.href}\n              onClick={(e) => {\n                if (onItemClick) {\n                  e.preventDefault();\n                  onItemClick(item.href);\n                }\n              }}\n              className={cn(\n                \"flex items-center px-3 py-2 rounded-md text-sm font-medium transition-colors\",\n                item.active\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n              )}\n              data-testid={`link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <i className={`${item.icon} mr-3 w-4`}></i>\n              {item.label}\n            </a>\n          ))}\n        </nav>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":1307},"client/src/components/rfq/configurator.tsx":{"content":"import { useState, useRef } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { useToast } from '@/hooks/use-toast';\nimport { SKU } from '@shared/schema';\nimport { UNITS, PRIORITIES, TOLERANCES, SURFACE_FINISHES, INSPECTION_TYPES, PACKAGING_TYPES } from '@/lib/constants';\nimport { Upload, X } from 'lucide-react';\n\nconst rfqItemSchema = z.object({\n  itemTitle: z.string().min(1, 'Item title is required'),\n  quantity: z.number().min(1, 'Quantity must be at least 1'),\n  unit: z.string().min(1, 'Unit is required'),\n  targetDeliveryDate: z.string().optional(),\n  leadTimeDays: z.number().optional(),\n  priority: z.string(),\n  material: z.string().optional(),\n  materialGrade: z.string().optional(),\n  tolerance: z.string().optional(),\n  surfaceFinish: z.array(z.string()).optional(),\n  specialRequirements: z.string().optional(),\n  toolingRequired: z.boolean(),\n  toolingScopeDescription: z.string().optional(),\n  expectedRuns: z.number().optional(),\n  sampleRequired: z.boolean(),\n  sampleQty: z.number().optional(),\n  sampleDeadline: z.string().optional(),\n  inspection: z.string(),\n  packaging: z.string(),\n  targetUnitPrice: z.number().optional(),\n  budgetMin: z.number().optional(),\n  budgetMax: z.number().optional(),\n  ndaRequired: z.boolean(),\n  confidential: z.boolean(),\n  termsAccepted: z.boolean().refine(val => val === true, 'You must accept the terms and conditions'),\n  files: z.array(z.object({\n    name: z.string(),\n    size: z.number(),\n    type: z.string(),\n    data: z.string()\n  })).optional(),\n});\n\ntype RFQItemForm = z.infer<typeof rfqItemSchema>;\n\ninterface ConfiguratorProps {\n  selectedSKU: SKU;\n  onSubmit: (data: RFQItemForm) => void;\n  onBack: () => void;\n}\n\nexport function Configurator({ selectedSKU, onSubmit, onBack }: ConfiguratorProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n  const totalSteps = 7;\n  const [uploadedFiles, setUploadedFiles] = useState<{name: string, size: number, type: string, data: string}[]>([]);\n  const { toast } = useToast();\n  \n  // File upload refs\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const form = useForm<RFQItemForm>({\n    resolver: zodResolver(rfqItemSchema),\n    defaultValues: {\n      priority: 'standard',\n      toolingRequired: false,\n      sampleRequired: false,\n      ndaRequired: false,\n      confidential: false,\n      termsAccepted: false,\n      inspection: 'basic',\n      packaging: 'standard',\n      surfaceFinish: [],\n      files: [],\n    },\n  });\n\n  const { watch } = form;\n  const toolingRequired = watch('toolingRequired');\n  const sampleRequired = watch('sampleRequired');\n\n  const handleNext = () => {\n    if (currentStep < totalSteps) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePrev = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleFileUpload = async () => {\n    const input = fileInputRef.current;\n    if (!input) return;\n\n    input.click();\n    \n    input.onchange = async (e) => {\n      const files = (e.target as HTMLInputElement).files;\n      if (!files) return;\n\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        \n        // Validate file type for CAD/engineering files\n        const allowedTypes = [\n          'application/pdf',\n          'image/jpeg', 'image/jpg', 'image/png',\n          'application/step', 'model/step', 'application/stp',\n          'application/iges', 'model/iges',\n          'model/stl', 'application/sla',\n          'image/vnd.dwg', 'application/dwg',\n          'image/vnd.dxf', 'application/dxf',\n          'application/zip',\n          'text/plain'\n        ];\n        \n        const fileExtension = file.name.toLowerCase().split('.').pop();\n        const allowedExtensions = ['pdf', 'jpg', 'jpeg', 'png', 'step', 'stp', 'iges', 'igs', 'stl', 'dwg', 'dxf', 'zip', 'txt'];\n        \n        if (!allowedTypes.includes(file.type) && !allowedExtensions.includes(fileExtension || '')) {\n          toast({\n            title: \"Invalid file type\",\n            description: \"Please select CAD files (STEP, IGES, STL, DWG, DXF), documents (PDF), images (JPG, PNG), or ZIP files.\",\n            variant: \"destructive\",\n          });\n          continue;\n        }\n\n        // Validate file size (50MB max for CAD files, 10MB for others)\n        const isCadFile = ['step', 'stp', 'iges', 'igs', 'stl', 'dwg', 'dxf'].includes(fileExtension || '');\n        const maxSize = isCadFile ? 50 * 1024 * 1024 : 10 * 1024 * 1024;\n        \n        if (file.size > maxSize) {\n          const maxSizeMB = maxSize / (1024 * 1024);\n          toast({\n            title: \"File too large\",\n            description: `Please select a file smaller than ${maxSizeMB}MB for ${isCadFile ? 'CAD files' : 'documents/images'}.`,\n            variant: \"destructive\",\n          });\n          continue;\n        }\n\n        try {\n          // Convert file to base64\n          const reader = new FileReader();\n          reader.onload = () => {\n            const base64 = reader.result as string;\n            const newFile = {\n              name: file.name,\n              size: file.size,\n              type: file.type,\n              data: base64\n            };\n            \n            setUploadedFiles(prev => {\n              const updated = [...prev, newFile];\n              // Update form data\n              form.setValue('files', updated);\n              return updated;\n            });\n            \n            toast({\n              title: \"File uploaded successfully\",\n              description: `${file.name} has been added to your RFQ.`,\n            });\n          };\n          reader.readAsDataURL(file);\n        } catch (error) {\n          toast({\n            title: \"Upload failed\",\n            description: \"Failed to process the file.\",\n            variant: \"destructive\",\n          });\n        }\n      }\n      \n      // Reset input\n      (e.target as HTMLInputElement).value = '';\n    };\n  };\n\n  const handleRemoveFile = (index: number) => {\n    setUploadedFiles(prev => {\n      const updated = prev.filter((_, i) => i !== index);\n      form.setValue('files', updated);\n      return updated;\n    });\n    \n    toast({\n      title: \"File removed\",\n      description: \"File has been removed from your RFQ.\",\n    });\n  };\n\n  const handleSubmit = (data: RFQItemForm) => {\n    // Include uploaded files in submission data\n    const submissionData = {\n      ...data,\n      files: uploadedFiles\n    };\n    onSubmit(submissionData);\n  };\n\n  const steps = [\n    { number: 1, title: 'Basics' },\n    { number: 2, title: 'Files & Geometry' },\n    { number: 3, title: 'Material & Specs' },\n    { number: 4, title: 'Tooling & Samples' },\n    { number: 5, title: 'Add-ons' },\n    { number: 6, title: 'Commercial' },\n    { number: 7, title: 'Review & Submit' },\n  ];\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      {/* Step Indicator */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-center space-x-4 overflow-x-auto pb-2\">\n          {steps.map((step, index) => (\n            <div key={step.number} className=\"flex items-center space-x-2 flex-shrink-0\">\n              <div\n                className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                  currentStep >= step.number\n                    ? 'bg-primary text-primary-foreground'\n                    : 'bg-muted text-muted-foreground'\n                }`}\n              >\n                {step.number}\n              </div>\n              <span className={`text-sm ${currentStep >= step.number ? 'font-medium' : 'text-muted-foreground'}`}>\n                {step.title}\n              </span>\n              {index < steps.length - 1 && <div className=\"w-8 h-px bg-border\"></div>}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Step {currentStep}: {steps[currentStep - 1].title}</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {currentStep === 1 && (\n                <>\n                  <FormField\n                    control={form.control}\n                    name=\"itemTitle\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Item Title *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., Aluminum Brackets\" {...field} data-testid=\"input-item-title\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"quantity\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Quantity *</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              {...field}\n                              onChange={(e) => field.onChange(parseInt(e.target.value))}\n                              data-testid=\"input-quantity\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"unit\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Unit *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-unit\">\n                                <SelectValue placeholder=\"Select unit\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {UNITS.map((unit) => (\n                                <SelectItem key={unit.value} value={unit.value}>\n                                  {unit.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"targetDeliveryDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Target Delivery Date</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} data-testid=\"input-delivery-date\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"priority\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Priority</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-priority\">\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {PRIORITIES.map((priority) => (\n                              <SelectItem key={priority.value} value={priority.value}>\n                                {priority.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </>\n              )}\n\n              {currentStep === 2 && (\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label>CAD Files & Technical Drawings</Label>\n                    <div className=\"mt-2 border-dashed border-2 border-border rounded-lg p-8 text-center\">\n                      <Upload className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                      <p className=\"text-muted-foreground mb-2\">\n                        Upload CAD files, technical drawings, specifications, or reference images\n                      </p>\n                      <p className=\"text-sm text-muted-foreground mb-4\">\n                        Supported: STEP, IGES, STL, DWG, DXF, PDF, JPG, PNG, ZIP (up to 50MB for CAD files)\n                      </p>\n                      <Button \n                        type=\"button\"\n                        variant=\"outline\" \n                        onClick={handleFileUpload}\n                        data-testid=\"button-upload-files\"\n                      >\n                        Select Files\n                      </Button>\n                      <input\n                        type=\"file\"\n                        ref={fileInputRef}\n                        multiple\n                        accept=\".step,.stp,.iges,.igs,.stl,.dwg,.dxf,.pdf,.jpg,.jpeg,.png,.zip,.txt\"\n                        style={{ display: 'none' }}\n                        data-testid=\"input-file-upload\"\n                      />\n                    </div>\n                    \n                    {uploadedFiles.length > 0 && (\n                      <div className=\"mt-4 space-y-2\">\n                        <Label className=\"text-sm font-medium\">Uploaded Files ({uploadedFiles.length})</Label>\n                        <div className=\"space-y-2\">\n                          {uploadedFiles.map((file, index) => (\n                            <div key={index} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg border\">\n                              <div className=\"flex items-center space-x-3\">\n                                <div className=\"w-8 h-8 rounded bg-primary/10 flex items-center justify-center\">\n                                  <Upload className=\"h-4 w-4 text-primary\" />\n                                </div>\n                                <div>\n                                  <p className=\"text-sm font-medium\">{file.name}</p>\n                                  <p className=\"text-xs text-muted-foreground\">\n                                    {(file.size / 1024 / 1024).toFixed(2)} MB\n                                  </p>\n                                </div>\n                              </div>\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleRemoveFile(index)}\n                                data-testid={`button-remove-file-${index}`}\n                              >\n                                <X className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {currentStep === 3 && (\n                <>\n                  <FormField\n                    control={form.control}\n                    name=\"material\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Material</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., Aluminum 6061, SS304, ABS\" {...field} data-testid=\"input-material\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"materialGrade\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Material Grade (Optional)</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., T6, 316L\" {...field} data-testid=\"input-material-grade\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"tolerance\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Tolerance</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-tolerance\">\n                              <SelectValue placeholder=\"Select tolerance\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {TOLERANCES.map((tolerance) => (\n                              <SelectItem key={tolerance.value} value={tolerance.value}>\n                                {tolerance.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"specialRequirements\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Special Requirements</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"e.g., RoHS compliance, UL certification, special packaging requirements\"\n                            {...field}\n                            data-testid=\"textarea-special-requirements\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </>\n              )}\n\n              {currentStep === 4 && (\n                <>\n                  <FormField\n                    control={form.control}\n                    name=\"toolingRequired\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox \n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                            data-testid=\"checkbox-tooling-required\"\n                          />\n                        </FormControl>\n                        <div className=\"space-y-1 leading-none\">\n                          <FormLabel>Tooling Required</FormLabel>\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n\n                  {toolingRequired && (\n                    <>\n                      <FormField\n                        control={form.control}\n                        name=\"toolingScopeDescription\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Tooling Scope Description</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Describe the tooling requirements\"\n                                {...field}\n                                data-testid=\"textarea-tooling-scope\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"expectedRuns\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Expected Production Runs</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"e.g., 10000\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value))}\n                                data-testid=\"input-expected-runs\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </>\n                  )}\n\n                  <FormField\n                    control={form.control}\n                    name=\"sampleRequired\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox \n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                            data-testid=\"checkbox-sample-required\"\n                          />\n                        </FormControl>\n                        <div className=\"space-y-1 leading-none\">\n                          <FormLabel>Sample Required</FormLabel>\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n\n                  {sampleRequired && (\n                    <>\n                      <FormField\n                        control={form.control}\n                        name=\"sampleQty\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Sample Quantity</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"e.g., 5\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value))}\n                                data-testid=\"input-sample-qty\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"sampleDeadline\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Sample Deadline</FormLabel>\n                            <FormControl>\n                              <Input type=\"date\" {...field} data-testid=\"input-sample-deadline\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </>\n                  )}\n                </>\n              )}\n\n              {currentStep === 5 && (\n                <>\n                  <FormField\n                    control={form.control}\n                    name=\"inspection\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Quality Inspection</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-inspection\">\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {INSPECTION_TYPES.map((type) => (\n                              <SelectItem key={type.value} value={type.value}>\n                                {type.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"packaging\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Packaging</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-packaging\">\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {PACKAGING_TYPES.map((type) => (\n                              <SelectItem key={type.value} value={type.value}>\n                                {type.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </>\n              )}\n\n              {currentStep === 6 && (\n                <>\n                  <FormField\n                    control={form.control}\n                    name=\"targetUnitPrice\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Target Unit Price (Optional)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"₹\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseFloat(e.target.value))}\n                            data-testid=\"input-target-price\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"budgetMin\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Budget Range Min (Optional)</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              step=\"0.01\"\n                              placeholder=\"₹\"\n                              {...field}\n                              onChange={(e) => field.onChange(parseFloat(e.target.value))}\n                              data-testid=\"input-budget-min\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"budgetMax\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Budget Range Max (Optional)</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              step=\"0.01\"\n                              placeholder=\"₹\"\n                              {...field}\n                              onChange={(e) => field.onChange(parseFloat(e.target.value))}\n                              data-testid=\"input-budget-max\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"ndaRequired\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox \n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                            data-testid=\"checkbox-nda-required\"\n                          />\n                        </FormControl>\n                        <div className=\"space-y-1 leading-none\">\n                          <FormLabel>NDA Required</FormLabel>\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"confidential\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox \n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                            data-testid=\"checkbox-confidential\"\n                          />\n                        </FormControl>\n                        <div className=\"space-y-1 leading-none\">\n                          <FormLabel>Hide buyer identity from suppliers</FormLabel>\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n                </>\n              )}\n\n              {currentStep === 7 && (\n                <div className=\"space-y-6\">\n                  <h3 className=\"text-lg font-semibold\">Review Your RFQ</h3>\n                  \n                  {/* Basic Information */}\n                  <div className=\"bg-muted/50 p-4 rounded-lg\">\n                    <h4 className=\"font-medium mb-3\">Basic Information</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm\">\n                      <p><strong>Item:</strong> {form.getValues('itemTitle')}</p>\n                      <p><strong>Process:</strong> {selectedSKU.processName}</p>\n                      <p><strong>Quantity:</strong> {form.getValues('quantity')} {form.getValues('unit')}</p>\n                      <p><strong>Material:</strong> {form.getValues('material')}</p>\n                      <p><strong>Priority:</strong> {form.getValues('priority')}</p>\n                      {form.getValues('targetDeliveryDate') && (\n                        <p><strong>Delivery Date:</strong> {form.getValues('targetDeliveryDate')}</p>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Files Section */}\n                  {uploadedFiles.length > 0 && (\n                    <div className=\"bg-muted/50 p-4 rounded-lg\">\n                      <h4 className=\"font-medium mb-3\">Attached Files ({uploadedFiles.length})</h4>\n                      <div className=\"space-y-2\">\n                        {uploadedFiles.map((file, index) => (\n                          <div key={index} className=\"flex items-center space-x-3 text-sm\">\n                            <Upload className=\"h-4 w-4 text-primary\" />\n                            <span>{file.name}</span>\n                            <span className=\"text-muted-foreground\">({(file.size / 1024 / 1024).toFixed(2)} MB)</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Material & Specifications */}\n                  {(form.getValues('materialGrade') || form.getValues('tolerance') || form.getValues('specialRequirements')) && (\n                    <div className=\"bg-muted/50 p-4 rounded-lg\">\n                      <h4 className=\"font-medium mb-3\">Material & Specifications</h4>\n                      <div className=\"space-y-1 text-sm\">\n                        {form.getValues('materialGrade') && <p><strong>Grade:</strong> {form.getValues('materialGrade')}</p>}\n                        {form.getValues('tolerance') && <p><strong>Tolerance:</strong> {form.getValues('tolerance')}</p>}\n                        {form.getValues('specialRequirements') && (\n                          <p><strong>Special Requirements:</strong> {form.getValues('specialRequirements')}</p>\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Additional Options */}\n                  {(form.getValues('toolingRequired') || form.getValues('sampleRequired') || form.getValues('ndaRequired') || form.getValues('confidential')) && (\n                    <div className=\"bg-muted/50 p-4 rounded-lg\">\n                      <h4 className=\"font-medium mb-3\">Additional Options</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm\">\n                        {form.getValues('toolingRequired') && <p>✓ Tooling Required</p>}\n                        {form.getValues('sampleRequired') && <p>✓ Sample Required</p>}\n                        {form.getValues('ndaRequired') && <p>✓ NDA Required</p>}\n                        {form.getValues('confidential') && <p>✓ Confidential RFQ</p>}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Budget Range */}\n                  {(form.getValues('budgetMin') || form.getValues('budgetMax') || form.getValues('targetUnitPrice')) && (\n                    <div className=\"bg-muted/50 p-4 rounded-lg\">\n                      <h4 className=\"font-medium mb-3\">Budget Information</h4>\n                      <div className=\"space-y-1 text-sm\">\n                        {form.getValues('targetUnitPrice') && <p><strong>Target Unit Price:</strong> ₹{form.getValues('targetUnitPrice')}</p>}\n                        {(form.getValues('budgetMin') && form.getValues('budgetMax')) && (\n                          <p><strong>Budget Range:</strong> ₹{form.getValues('budgetMin')} - ₹{form.getValues('budgetMax')}</p>\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                  <FormField\n                    control={form.control}\n                    name=\"termsAccepted\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <div className=\"flex items-start space-x-3 p-4 border rounded-lg\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"checkbox-terms\"\n                            />\n                          </FormControl>\n                          <div>\n                            <FormLabel className=\"text-sm cursor-pointer\">\n                              I agree to the Terms & Conditions and anti-disintermediation policy *\n                            </FormLabel>\n                            <p className=\"text-xs text-muted-foreground mt-1\">\n                              By submitting this RFQ, I confirm that all information provided is accurate and complete.\n                            </p>\n                            <FormMessage />\n                          </div>\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <div className=\"flex justify-between\">\n            {currentStep > 1 ? (\n              <Button type=\"button\" variant=\"outline\" onClick={handlePrev} data-testid=\"button-prev\">\n                Previous\n              </Button>\n            ) : (\n              <Button type=\"button\" variant=\"outline\" onClick={onBack} data-testid=\"button-back\">\n                Back to Process Selection\n              </Button>\n            )}\n\n            {currentStep < totalSteps ? (\n              <Button type=\"button\" onClick={handleNext} data-testid=\"button-next\">\n                Continue\n              </Button>\n            ) : (\n              <Button \n                type=\"button\" \n                data-testid=\"button-submit-rfq\"\n                onClick={async (e) => {\n                  // Validate the form\n                  const isValid = await form.trigger();\n                  const formData = form.getValues();\n                  \n                  if (isValid) {\n                    handleSubmit(formData);\n                  } else {\n                    toast({\n                      title: \"Please complete all required fields\",\n                      description: \"Check the form for any missing or invalid information.\",\n                      variant: \"destructive\",\n                    });\n                  }\n                }}\n              >\n                Submit RFQ\n              </Button>\n            )}\n          </div>\n        </form>\n      </Form>\n    </div>\n  );\n}\n","size_bytes":38632},"client/src/components/rfq/industry-selector.tsx":{"content":"import { INDUSTRIES } from '@/lib/constants';\nimport { Card, CardContent } from '@/components/ui/card';\n\ninterface IndustrySelectorProps {\n  selectedIndustry?: string;\n  onIndustrySelect: (industry: string) => void;\n}\n\nexport function IndustrySelector({ selectedIndustry, onIndustrySelect }: IndustrySelectorProps) {\n  return (\n    <div>\n      <h3 className=\"text-lg font-semibold mb-4\">Select Industry</h3>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {INDUSTRIES.map((industry) => (\n          <Card\n            key={industry.id}\n            className={`cursor-pointer transition-colors hover:border-primary hover:bg-accent ${\n              selectedIndustry === industry.id ? 'border-primary bg-accent' : ''\n            }`}\n            onClick={() => onIndustrySelect(industry.id)}\n            data-testid={`card-industry-${industry.id}`}\n          >\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <i className={`${industry.icon} text-2xl text-primary`}></i>\n                <div>\n                  <h4 className=\"font-semibold\">{industry.name}</h4>\n                  <p className=\"text-sm text-muted-foreground\">{industry.description}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1384},"client/src/components/rfq/process-selector.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { apiClient } from '@/lib/supabase';\nimport { SKU } from '@shared/schema';\n\ninterface ProcessSelectorProps {\n  selectedIndustry: string;\n  selectedProcess?: string;\n  onProcessSelect: (process: SKU) => void;\n}\n\nexport function ProcessSelector({ selectedIndustry, selectedProcess, onProcessSelect }: ProcessSelectorProps) {\n  const { data: skus = [], isLoading } = useQuery({\n    queryKey: ['/api/skus/industry', selectedIndustry],\n    queryFn: () => apiClient.get(`/api/skus/industry/${selectedIndustry}`) as Promise<SKU[]>,\n    enabled: !!selectedIndustry,\n  });\n\n  if (isLoading) {\n    return <div className=\"text-center py-8 text-muted-foreground\">Loading processes...</div>;\n  }\n\n  return (\n    <div>\n      <h3 className=\"text-lg font-semibold mb-4\">Select Process</h3>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {skus.map((sku) => (\n          <Card\n            key={sku.code}\n            className={`cursor-pointer transition-colors hover:border-primary hover:bg-accent ${\n              selectedProcess === sku.code ? 'border-primary bg-accent' : ''\n            }`}\n            onClick={() => onProcessSelect(sku)}\n            data-testid={`card-process-${sku.code}`}\n          >\n            <CardContent className=\"p-4\">\n              <div className=\"space-y-2\">\n                <h4 className=\"font-semibold\">{sku.processName}</h4>\n                <p className=\"text-sm text-muted-foreground\">{sku.description}</p>\n                <div className=\"flex justify-between text-sm text-muted-foreground\">\n                  <span>Default MOQ: {sku.defaultMoq || 'N/A'}</span>\n                  <span>Lead Time: {sku.defaultLeadTimeDays || 'N/A'} days</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1932},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/dashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { \n  FileText, Users, TrendingUp, Trophy, \n  Clock, AlertCircle, CheckCircle, Building2, \n  Microchip, Package, Settings, CreditCard, DollarSign\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { authenticatedApiClient } from '@/lib/supabase';\nimport { useLocation } from 'wouter';\n\nexport default function AdminDashboard() {\n  const [, setLocation] = useLocation();\n\n  const { data: suppliers = [] } = useQuery({\n    queryKey: ['/api/protected/admin/suppliers'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/admin/suppliers'),\n  });\n\n  const { data: metrics = {\n    activeRFQs: 0,\n    verifiedSuppliers: 0,\n    monthlyVolume: 0,\n    successRate: 0,\n  } } = useQuery({\n    queryKey: ['/api/protected/admin/metrics'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/admin/metrics'),\n  });\n\n  // Payment analytics\n  const { data: paymentAnalytics = {\n    totalTransactions: 0,\n    totalRevenue: 0,\n    pendingPayments: 0,\n    completedToday: 0,\n  } } = useQuery({\n    queryKey: ['/api/protected/admin/payment-analytics'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/admin/payment-analytics'),\n  });\n\n  // Recent payment transactions\n  const { data: recentPayments = [] } = useQuery({\n    queryKey: ['/api/protected/admin/payment-transactions', 'recent'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/admin/payment-transactions?limit=5'),\n  });\n\n  const rfqInbox = [\n    {\n      id: '1',\n      title: 'CNC Machined Brackets',\n      quantity: '100 pcs',\n      dueDate: 'Dec 15',\n      status: 'new',\n      priority: 'high',\n    },\n    {\n      id: '2',\n      title: 'PCB Assembly Service',\n      quantity: '200 pcs',\n      dueDate: 'Dec 18',\n      status: 'matching',\n      priority: 'medium',\n    },\n    {\n      id: '3',\n      title: 'Custom Packaging',\n      quantity: '1000 pcs',\n      dueDate: 'Dec 20',\n      status: 'quoted',\n      priority: 'low',\n    },\n  ];\n\n  const verificationQueue = [\n    {\n      id: '1',\n      company: 'Precision Tech Pvt Ltd',\n      capability: 'CNC Machining',\n      status: 'pending',\n      type: 'new',\n    },\n    {\n      id: '2',\n      company: 'ElectroCircuits Solutions',\n      capability: 'PCB Assembly',\n      status: 'approved',\n      type: 'certified',\n    },\n    {\n      id: '3',\n      company: 'PackPro Industries',\n      capability: 'Packaging',\n      status: 'incomplete',\n      type: 'followup',\n    },\n  ];\n\n  return (\n    <div className=\"p-8\">\n      {/* Dashboard Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Admin Dashboard</h1>\n        <p className=\"text-muted-foreground mt-2\">Manage marketplace operations</p>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm\">Active RFQs</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-active-rfqs\">\n                  {metrics.activeRFQs}\n                </p>\n              </div>\n              <FileText className=\"h-8 w-8 text-blue-600\" />\n            </div>\n            <p className=\"text-green-600 text-sm mt-2\">+8% from last week</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm\">Verified Suppliers</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-verified-suppliers\">\n                  {metrics.verifiedSuppliers}\n                </p>\n              </div>\n              <Users className=\"h-8 w-8 text-green-600\" />\n            </div>\n            <p className=\"text-green-600 text-sm mt-2\">+12 new this month</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm\">Monthly Volume</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-monthly-volume\">\n                  ₹{(metrics.monthlyVolume / 100000).toFixed(1)}L\n                </p>\n              </div>\n              <TrendingUp className=\"h-8 w-8 text-purple-600\" />\n            </div>\n            <p className=\"text-green-600 text-sm mt-2\">+23% from last month</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm\">Success Rate</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-success-rate\">\n                  {metrics.successRate}%\n                </p>\n              </div>\n              <Trophy className=\"h-8 w-8 text-yellow-600\" />\n            </div>\n            <p className=\"text-green-600 text-sm mt-2\">+2.3% improvement</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Payment Analytics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm\">Total Transactions</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-transactions\">\n                  {paymentAnalytics.totalTransactions || 247}\n                </p>\n              </div>\n              <CreditCard className=\"h-8 w-8 text-blue-600\" />\n            </div>\n            <p className=\"text-green-600 text-sm mt-2\">+15 today</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm\">Payment Revenue</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-payment-revenue\">\n                  ₹{((paymentAnalytics.totalRevenue || 1250000) / 100000).toFixed(1)}L\n                </p>\n              </div>\n              <DollarSign className=\"h-8 w-8 text-green-600\" />\n            </div>\n            <p className=\"text-green-600 text-sm mt-2\">+18% this month</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm\">Pending Payments</p>\n                <p className=\"text-2xl font-bold text-yellow-600\" data-testid=\"text-pending-payments\">\n                  {paymentAnalytics.pendingPayments || 23}\n                </p>\n              </div>\n              <Clock className=\"h-8 w-8 text-yellow-600\" />\n            </div>\n            <p className=\"text-yellow-600 text-sm mt-2\">Requires attention</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm\">Completed Today</p>\n                <p className=\"text-2xl font-bold text-green-600\" data-testid=\"text-completed-today\">\n                  {paymentAnalytics.completedToday || 18}\n                </p>\n              </div>\n              <CheckCircle className=\"h-8 w-8 text-green-600\" />\n            </div>\n            <p className=\"text-green-600 text-sm mt-2\">All processed</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activities */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n        {/* RFQ Inbox */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-xl\">RFQ Inbox</CardTitle>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setLocation('/admin/rfqs')}\n                data-testid=\"button-view-all-rfqs\"\n              >\n                View All\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {rfqInbox.map((rfq) => (\n              <div\n                key={rfq.id}\n                className=\"flex items-center justify-between p-3 border border-border rounded-lg\"\n                data-testid={`card-rfq-${rfq.id}`}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-3 h-3 rounded-full ${\n                    rfq.priority === 'high' ? 'bg-red-500' :\n                    rfq.priority === 'medium' ? 'bg-yellow-500' : 'bg-green-500'\n                  }`}></div>\n                  <div>\n                    <p className=\"font-medium text-sm\" data-testid={`text-rfq-title-${rfq.id}`}>\n                      {rfq.title}\n                    </p>\n                    <p className=\"text-muted-foreground text-xs\">\n                      Qty: {rfq.quantity} • Due: {rfq.dueDate}\n                    </p>\n                  </div>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  data-testid={`button-process-rfq-${rfq.id}`}\n                >\n                  {rfq.status === 'new' ? 'Match' : \n                   rfq.status === 'matching' ? 'Review' : 'Compose'}\n                </Button>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n\n        {/* Supplier Verification Queue */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-xl\">Verification Queue</CardTitle>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setLocation('/admin/suppliers')}\n                data-testid=\"button-view-all-suppliers\"\n              >\n                View All\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {verificationQueue.map((supplier) => (\n              <div\n                key={supplier.id}\n                className=\"flex items-center justify-between p-3 border border-border rounded-lg\"\n                data-testid={`card-supplier-${supplier.id}`}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                    {supplier.capability.includes('CNC') ? <Settings className=\"h-4 w-4 text-blue-600\" /> :\n                     supplier.capability.includes('PCB') ? <Microchip className=\"h-4 w-4 text-green-600\" /> :\n                     <Package className=\"h-4 w-4 text-purple-600\" />}\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-sm\" data-testid={`text-supplier-name-${supplier.id}`}>\n                      {supplier.company}\n                    </p>\n                    <p className=\"text-muted-foreground text-xs\">\n                      {supplier.capability} • {supplier.type}\n                    </p>\n                  </div>\n                </div>\n                <Button\n                  variant={supplier.status === 'approved' ? 'default' : \n                          supplier.status === 'incomplete' ? 'secondary' : 'outline'}\n                  size=\"sm\"\n                  className={\n                    supplier.status === 'approved' ? 'bg-green-600 hover:bg-green-600/90' :\n                    supplier.status === 'incomplete' ? 'bg-yellow-600 hover:bg-yellow-600/90' : ''\n                  }\n                  data-testid={`button-verify-supplier-${supplier.id}`}\n                >\n                  {supplier.status === 'approved' ? 'Approved' :\n                   supplier.status === 'incomplete' ? 'Follow Up' : 'Review'}\n                </Button>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Offer Composer Interface */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"text-xl\">Offer Composer</CardTitle>\n              <p className=\"text-muted-foreground text-sm mt-1\">Create platform offers from supplier quotes</p>\n            </div>\n            <Button\n              onClick={() => setLocation('/admin/offers')}\n              data-testid=\"button-open-composer\"\n            >\n              Open Composer\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Standard Offer */}\n            <div className=\"border border-border rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <h3 className=\"font-semibold text-foreground\">Standard Offer</h3>\n                <Badge className=\"bg-blue-100 text-blue-800\">Popular</Badge>\n              </div>\n              <div className=\"space-y-3\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Unit Price</p>\n                  <p className=\"text-lg font-bold\">₹2,450</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Lead Time</p>\n                  <p className=\"font-medium\">14 days</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Quality Assurance</p>\n                  <p className=\"font-medium\">Basic dimensional check</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Warranty</p>\n                  <p className=\"font-medium\">6 months</p>\n                </div>\n              </div>\n              <Button className=\"w-full mt-4\" variant=\"outline\" data-testid=\"button-publish-standard\">\n                Publish Offer\n              </Button>\n            </div>\n\n            {/* Premium Offer */}\n            <div className=\"border border-border rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <h3 className=\"font-semibold text-foreground\">Premium Offer</h3>\n                <Badge className=\"bg-green-100 text-green-800\">Best Value</Badge>\n              </div>\n              <div className=\"space-y-3\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Unit Price</p>\n                  <p className=\"text-lg font-bold\">₹2,850</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Lead Time</p>\n                  <p className=\"font-medium\">12 days</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Quality Assurance</p>\n                  <p className=\"font-medium\">Advanced CMM inspection</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Warranty</p>\n                  <p className=\"font-medium\">12 months</p>\n                </div>\n              </div>\n              <Button className=\"w-full mt-4\" data-testid=\"button-publish-premium\">\n                Publish Offer\n              </Button>\n            </div>\n\n            {/* Fast Track Offer */}\n            <div className=\"border border-border rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <h3 className=\"font-semibold text-foreground\">Fast Track Offer</h3>\n                <Badge className=\"bg-red-100 text-red-800\">Express</Badge>\n              </div>\n              <div className=\"space-y-3\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Unit Price</p>\n                  <p className=\"text-lg font-bold\">₹3,200</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Lead Time</p>\n                  <p className=\"font-medium\">7 days</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Quality Assurance</p>\n                  <p className=\"font-medium\">Priority inspection</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Warranty</p>\n                  <p className=\"font-medium\">6 months</p>\n                </div>\n              </div>\n              <Button className=\"w-full mt-4\" variant=\"outline\" data-testid=\"button-publish-fast\">\n                Publish Offer\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":17332},"client/src/pages/admin/offer-composer.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Plus, Edit, Trash2, Send, Eye, FileText, DollarSign, Clock, Award, CreditCard, ExternalLink, Calendar, Settings } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { authenticatedApiClient } from '@/lib/supabase';\nimport { formatCurrency } from '@/lib/utils';\nimport { useToast } from '@/hooks/use-toast';\n\nconst offerSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  unitPrice: z.number().min(0.01, 'Unit price must be greater than 0'),\n  leadTimeDays: z.number().min(1, 'Lead time must be at least 1 day'),\n  warranty: z.string().min(1, 'Warranty is required'),\n  qualityAssurance: z.string().min(1, 'Quality assurance is required'),\n  features: z.array(z.string()).min(1, 'At least one feature is required'),\n  validityDays: z.number().min(1, 'Validity must be at least 1 day'),\n  description: z.string().optional(),\n  // Payment fields\n  paymentLink: z.string().url('Must be a valid URL').optional().or(z.literal('')),\n  advancePaymentPercentage: z.number().min(0).max(100).optional(),\n  paymentDeadlineDays: z.number().min(1, 'Payment deadline must be at least 1 day').optional(),\n  paymentTerms: z.string().optional(),\n});\n\ntype OfferForm = z.infer<typeof offerSchema>;\n\nexport default function AdminOfferComposer() {\n  const [selectedRFQ, setSelectedRFQ] = useState<any>(null);\n  const [selectedQuotes, setSelectedQuotes] = useState<any[]>([]);\n  const [showOfferDialog, setShowOfferDialog] = useState(false);\n  const [editingOffer, setEditingOffer] = useState<any>(null);\n  const [calculatedPayments, setCalculatedPayments] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: rfqs = [] } = useQuery({\n    queryKey: ['/api/protected/rfqs'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/rfqs'),\n  });\n\n  const { data: quotes = [] } = useQuery({\n    queryKey: ['/api/protected/admin/quotes'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/admin/quotes'),\n    enabled: !!selectedRFQ,\n  });\n\n  const { data: offers = [] } = useQuery({\n    queryKey: ['/api/protected/admin/offers', selectedRFQ?.id],\n    queryFn: () => selectedRFQ ? \n      authenticatedApiClient.get(`/api/protected/admin/offers?rfqId=${selectedRFQ.id}`) :\n      authenticatedApiClient.get('/api/protected/admin/offers'),\n    enabled: !!selectedRFQ,\n  });\n\n  // Payment configurations for calculations\n  const { data: paymentConfigs = [] } = useQuery({\n    queryKey: ['/api/protected/admin/payment-configurations'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/admin/payment-configurations'),\n  });\n\n  const form = useForm<OfferForm>({\n    resolver: zodResolver(offerSchema),\n    defaultValues: {\n      leadTimeDays: 14,\n      validityDays: 30,\n      features: [],\n      advancePaymentPercentage: 30,\n      paymentDeadlineDays: 7,\n      paymentTerms: 'Payment due within specified deadline. Late payments may incur additional charges.',\n    },\n  });\n\n  const createOfferMutation = useMutation({\n    mutationFn: (data: any) =>\n      authenticatedApiClient.post('/api/protected/admin/curated-offers', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/protected/admin/offers'] });\n      setShowOfferDialog(false);\n      setEditingOffer(null);\n      form.reset();\n      toast({\n        title: \"Offer created successfully\",\n        description: \"The curated offer has been created and can now be published.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to create offer\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const publishOfferMutation = useMutation({\n    mutationFn: (offerId: string) =>\n      authenticatedApiClient.post(`/api/protected/admin/offers/${offerId}/publish`, {}),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/protected/admin/offers'] });\n      toast({\n        title: \"Offer published successfully\",\n        description: \"The offer has been sent to the buyer.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to publish offer\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rfqsWithQuotes = rfqs.filter((rfq: any) => \n    rfq.status === 'invited' || rfq.status === 'under_review'\n  );\n\n  // Calculate payment amounts based on configuration\n  const calculatePaymentAmounts = (totalPrice: number, advancePercentage: number = 30) => {\n    const advanceAmount = Math.round(totalPrice * (advancePercentage / 100));\n    const finalAmount = totalPrice - advanceAmount;\n    return { advanceAmount, finalAmount, totalPrice };\n  };\n\n  const handleSubmitOffer = (data: OfferForm) => {\n    if (!selectedRFQ) return;\n\n    // Calculate total price by summing all RFQ items, not just the first one\n    const totalPrice = selectedRFQ.details?.items?.reduce((sum: number, item: any) => {\n      return sum + (data.unitPrice * (item.quantity || 1));\n    }, 0) || (data.unitPrice * 1);\n    \n    const paymentAmounts = calculatePaymentAmounts(totalPrice, data.advancePaymentPercentage);\n\n    const offerData = {\n      rfqId: selectedRFQ.id,\n      title: data.title,\n      details: {\n        unitPrice: data.unitPrice,\n        leadTimeDays: data.leadTimeDays,\n        warranty: data.warranty,\n        qualityAssurance: data.qualityAssurance,\n        features: data.features,\n        description: data.description,\n        validityDays: data.validityDays,\n        totalPrice: paymentAmounts.totalPrice,\n      },\n      // Payment information\n      paymentLink: data.paymentLink || null,\n      advancePaymentAmount: paymentAmounts.advanceAmount.toString(),\n      finalPaymentAmount: paymentAmounts.finalAmount.toString(),\n      paymentDeadline: data.paymentDeadlineDays ? new Date(Date.now() + data.paymentDeadlineDays * 24 * 60 * 60 * 1000).toISOString() : null,\n      paymentTerms: data.paymentTerms || null,\n      supplierIndicators: {\n        quotesUsed: selectedQuotes.length,\n        averagePrice: selectedQuotes.reduce((sum: number, q: any) => sum + (q.quoteJson?.unitPrice || 0), 0) / selectedQuotes.length || 0,\n      },\n    };\n\n    createOfferMutation.mutate(offerData);\n  };\n\n  const handlePublishOffer = (offerId: string) => {\n    publishOfferMutation.mutate(offerId);\n  };\n\n  const offerTypeOptions = [\n    { value: 'Standard', label: 'Standard Offer', color: 'bg-blue-100 text-blue-800' },\n    { value: 'Premium', label: 'Premium Offer', color: 'bg-green-100 text-green-800' },\n    { value: 'Fast Track', label: 'Fast Track Offer', color: 'bg-red-100 text-red-800' },\n  ];\n\n  const qualityOptions = [\n    'Basic dimensional check',\n    'Advanced CMM inspection',\n    'Priority inspection',\n    'Lab testing included',\n    'Material certificates',\n    'First article inspection',\n  ];\n\n  const featureOptions = [\n    'Quality Assured',\n    'On-time Delivery',\n    'Premium Quality',\n    'Express Processing',\n    'Extended Warranty',\n    'Express Delivery',\n    'Rush Processing',\n    'Free Samples',\n    'Custom Packaging',\n    'Technical Support',\n  ];\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Offer Composer</h1>\n        <p className=\"text-muted-foreground mt-2\">Create and manage platform offers from supplier quotes</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* RFQ Selection */}\n        <div className=\"lg:col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Select RFQ</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {rfqsWithQuotes.length === 0 ? (\n                <p className=\"text-muted-foreground text-sm\">No RFQs with quotes available</p>\n              ) : (\n                rfqsWithQuotes.map((rfq: any) => (\n                  <div\n                    key={rfq.id}\n                    className={`p-3 border rounded-lg cursor-pointer transition-colors ${\n                      selectedRFQ?.id === rfq.id ? 'border-primary bg-accent' : 'hover:bg-accent'\n                    }`}\n                    onClick={() => setSelectedRFQ(rfq)}\n                    data-testid={`card-rfq-${rfq.id}`}\n                  >\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <p className=\"font-medium text-sm\" data-testid={`text-rfq-title-${rfq.id}`}>\n                          {rfq.rfqNumber}\n                        </p>\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {rfq.status.replace('_', ' ')}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">{rfq.title}</p>\n                      <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                        <span>Qty: {rfq.details?.items?.[0]?.quantity || 'N/A'}</span>\n                        <span>Process: {rfq.details?.sku?.processName || 'N/A'}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </CardContent>\n          </Card>\n\n          {selectedRFQ && (\n            <Card className=\"mt-4\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">RFQ Details</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div>\n                  <p className=\"text-sm font-medium\">Process</p>\n                  <p className=\"text-sm text-muted-foreground\">{selectedRFQ.details?.sku?.processName}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium\">Quantity</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {selectedRFQ.details?.items?.[0]?.quantity} {selectedRFQ.details?.items?.[0]?.unit}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium\">Material</p>\n                  <p className=\"text-sm text-muted-foreground\">{selectedRFQ.details?.items?.[0]?.material}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium\">Target Price</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {selectedRFQ.details?.items?.[0]?.targetUnitPrice \n                      ? `₹${selectedRFQ.details.items[0].targetUnitPrice}`\n                      : 'Not specified'}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Main Content */}\n        <div className=\"lg:col-span-2\">\n          <Tabs defaultValue=\"quotes\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"quotes\">Supplier Quotes</TabsTrigger>\n              <TabsTrigger value=\"compose\">Compose Offers</TabsTrigger>\n              <TabsTrigger value=\"published\">Published Offers</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"quotes\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Received Quotes</CardTitle>\n                  {selectedRFQ && (\n                    <p className=\"text-sm text-muted-foreground\">\n                      For RFQ: {selectedRFQ.rfqNumber}\n                    </p>\n                  )}\n                </CardHeader>\n                <CardContent>\n                  {!selectedRFQ ? (\n                    <p className=\"text-muted-foreground text-center py-8\">\n                      Select an RFQ to view supplier quotes\n                    </p>\n                  ) : quotes.length === 0 ? (\n                    <p className=\"text-muted-foreground text-center py-8\">\n                      No quotes received for this RFQ yet\n                    </p>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {quotes.map((quote: any) => (\n                        <div\n                          key={quote.id}\n                          className=\"border rounded-lg p-4 space-y-3\"\n                          data-testid={`card-quote-${quote.id}`}\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <p className=\"font-medium\">Supplier {quote.supplierId.slice(-6)}</p>\n                              <p className=\"text-sm text-muted-foreground\">\n                                Submitted {new Date(quote.createdAt).toLocaleDateString()}\n                              </p>\n                            </div>\n                            <Badge className=\"bg-green-100 text-green-800\">\n                              {quote.status.toUpperCase()}\n                            </Badge>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                            <div>\n                              <p className=\"text-muted-foreground\">Unit Price</p>\n                              <p className=\"font-medium text-lg\">{quote.quoteJson?.unitPrice ? formatCurrency(quote.quoteJson.unitPrice) : 'N/A'}</p>\n                            </div>\n                            <div>\n                              <p className=\"text-muted-foreground\">Lead Time</p>\n                              <p className=\"font-medium\">{quote.quoteJson?.leadTimeDays} days</p>\n                            </div>\n                            <div>\n                              <p className=\"text-muted-foreground\">Total Amount</p>\n                              <p className=\"font-medium\">{quote.quoteJson?.totalAmount ? formatCurrency(quote.quoteJson.totalAmount) : 'N/A'}</p>\n                            </div>\n                          </div>\n\n                          {quote.quoteJson?.notes && (\n                            <div>\n                              <p className=\"text-sm font-medium\">Notes</p>\n                              <p className=\"text-sm text-muted-foreground\">{quote.quoteJson.notes}</p>\n                            </div>\n                          )}\n\n                          <div className=\"flex justify-end\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => {\n                                const isSelected = selectedQuotes.some(q => q.id === quote.id);\n                                if (isSelected) {\n                                  setSelectedQuotes(selectedQuotes.filter(q => q.id !== quote.id));\n                                } else {\n                                  setSelectedQuotes([...selectedQuotes, quote]);\n                                }\n                              }}\n                              data-testid={`button-select-quote-${quote.id}`}\n                            >\n                              {selectedQuotes.some(q => q.id === quote.id) ? 'Deselect' : 'Select for Offer'}\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"compose\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Compose New Offer</CardTitle>\n                    {selectedRFQ && (\n                      <Dialog open={showOfferDialog} onOpenChange={setShowOfferDialog}>\n                        <DialogTrigger asChild>\n                          <Button data-testid=\"button-create-offer\">\n                            <Plus className=\"h-4 w-4 mr-2\" />\n                            Create Offer\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                          <DialogHeader>\n                            <DialogTitle>Create Curated Offer</DialogTitle>\n                          </DialogHeader>\n                          \n                          <Form {...form}>\n                            <form onSubmit={form.handleSubmit(handleSubmitOffer)} className=\"space-y-6\">\n                              <FormField\n                                control={form.control}\n                                name=\"title\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Offer Title</FormLabel>\n                                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                      <FormControl>\n                                        <SelectTrigger data-testid=\"select-offer-title\">\n                                          <SelectValue placeholder=\"Select offer type\" />\n                                        </SelectTrigger>\n                                      </FormControl>\n                                      <SelectContent>\n                                        {offerTypeOptions.map((option) => (\n                                          <SelectItem key={option.value} value={option.value}>\n                                            {option.label}\n                                          </SelectItem>\n                                        ))}\n                                      </SelectContent>\n                                    </Select>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n\n                              <div className=\"grid grid-cols-2 gap-4\">\n                                <FormField\n                                  control={form.control}\n                                  name=\"unitPrice\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Unit Price (₹)</FormLabel>\n                                      <FormControl>\n                                        <Input\n                                          type=\"number\"\n                                          step=\"0.01\"\n                                          placeholder=\"Enter unit price\"\n                                          {...field}\n                                          onChange={(e) => field.onChange(parseFloat(e.target.value))}\n                                          data-testid=\"input-unit-price\"\n                                        />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n\n                                <FormField\n                                  control={form.control}\n                                  name=\"leadTimeDays\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Lead Time (Days)</FormLabel>\n                                      <FormControl>\n                                        <Input\n                                          type=\"number\"\n                                          placeholder=\"Enter lead time\"\n                                          {...field}\n                                          onChange={(e) => field.onChange(parseInt(e.target.value))}\n                                          data-testid=\"input-lead-time\"\n                                        />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                              </div>\n\n                              <div className=\"grid grid-cols-2 gap-4\">\n                                <FormField\n                                  control={form.control}\n                                  name=\"warranty\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Warranty</FormLabel>\n                                      <FormControl>\n                                        <Input placeholder=\"e.g., 6 months\" {...field} data-testid=\"input-warranty\" />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n\n                                <FormField\n                                  control={form.control}\n                                  name=\"validityDays\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Offer Validity (Days)</FormLabel>\n                                      <FormControl>\n                                        <Input\n                                          type=\"number\"\n                                          placeholder=\"Enter validity period\"\n                                          {...field}\n                                          onChange={(e) => field.onChange(parseInt(e.target.value))}\n                                          data-testid=\"input-validity\"\n                                        />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                              </div>\n\n                              <FormField\n                                control={form.control}\n                                name=\"qualityAssurance\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Quality Assurance</FormLabel>\n                                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                      <FormControl>\n                                        <SelectTrigger data-testid=\"select-quality-assurance\">\n                                          <SelectValue placeholder=\"Select quality assurance level\" />\n                                        </SelectTrigger>\n                                      </FormControl>\n                                      <SelectContent>\n                                        {qualityOptions.map((option) => (\n                                          <SelectItem key={option} value={option}>\n                                            {option}\n                                          </SelectItem>\n                                        ))}\n                                      </SelectContent>\n                                    </Select>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n\n                              <FormField\n                                control={form.control}\n                                name=\"features\"\n                                render={() => (\n                                  <FormItem>\n                                    <FormLabel>Features</FormLabel>\n                                    <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                                      {featureOptions.map((feature) => (\n                                        <FormField\n                                          key={feature}\n                                          control={form.control}\n                                          name=\"features\"\n                                          render={({ field }) => (\n                                            <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                                              <FormControl>\n                                                <input\n                                                  type=\"checkbox\"\n                                                  checked={field.value?.includes(feature)}\n                                                  onChange={(e) => {\n                                                    const updatedValue = e.target.checked\n                                                      ? [...(field.value || []), feature]\n                                                      : (field.value || []).filter(value => value !== feature);\n                                                    field.onChange(updatedValue);\n                                                  }}\n                                                  className=\"h-4 w-4\"\n                                                  data-testid={`checkbox-feature-${feature.toLowerCase().replace(/\\s+/g, '-')}`}\n                                                />\n                                              </FormControl>\n                                              <FormLabel className=\"text-sm font-normal\">\n                                                {feature}\n                                              </FormLabel>\n                                            </FormItem>\n                                          )}\n                                        />\n                                      ))}\n                                    </div>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n\n                              <FormField\n                                control={form.control}\n                                name=\"description\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Additional Description</FormLabel>\n                                    <FormControl>\n                                      <Textarea\n                                        placeholder=\"Any additional details about the offer...\"\n                                        {...field}\n                                        data-testid=\"textarea-description\"\n                                      />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n\n                              {/* Payment Configuration Section */}\n                              <div className=\"border-t pt-6\">\n                                <div className=\"flex items-center space-x-2 mb-4\">\n                                  <CreditCard className=\"h-5 w-5 text-blue-600\" />\n                                  <h3 className=\"text-lg font-semibold\">Payment Configuration</h3>\n                                </div>\n                                \n                                <div className=\"space-y-4\">\n                                  <FormField\n                                    control={form.control}\n                                    name=\"paymentLink\"\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormLabel>Payment Link (Optional)</FormLabel>\n                                        <FormControl>\n                                          <Input\n                                            placeholder=\"https://razorpay.me/your-payment-link\"\n                                            {...field}\n                                            data-testid=\"input-payment-link\"\n                                          />\n                                        </FormControl>\n                                        <p className=\"text-xs text-muted-foreground\">\n                                          External payment link for Razorpay or other gateways\n                                        </p>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n\n                                  <div className=\"grid grid-cols-2 gap-4\">\n                                    <FormField\n                                      control={form.control}\n                                      name=\"advancePaymentPercentage\"\n                                      render={({ field }) => (\n                                        <FormItem>\n                                          <FormLabel>Advance Payment (%)</FormLabel>\n                                          <FormControl>\n                                            <Input\n                                              type=\"number\"\n                                              min=\"0\"\n                                              max=\"100\"\n                                              placeholder=\"30\"\n                                              {...field}\n                                              onChange={(e) => {\n                                                const value = parseFloat(e.target.value) || 0;\n                                                field.onChange(value);\n                                                // Calculate and update payment preview\n                                                const totalPrice = form.getValues('unitPrice') * (selectedRFQ?.details?.items?.[0]?.quantity || 1);\n                                                setCalculatedPayments(calculatePaymentAmounts(totalPrice, value));\n                                              }}\n                                              data-testid=\"input-advance-percentage\"\n                                            />\n                                          </FormControl>\n                                          <FormMessage />\n                                        </FormItem>\n                                      )}\n                                    />\n\n                                    <FormField\n                                      control={form.control}\n                                      name=\"paymentDeadlineDays\"\n                                      render={({ field }) => (\n                                        <FormItem>\n                                          <FormLabel>Payment Deadline (Days)</FormLabel>\n                                          <FormControl>\n                                            <Input\n                                              type=\"number\"\n                                              min=\"1\"\n                                              placeholder=\"7\"\n                                              {...field}\n                                              onChange={(e) => field.onChange(parseInt(e.target.value))}\n                                              data-testid=\"input-payment-deadline\"\n                                            />\n                                          </FormControl>\n                                          <FormMessage />\n                                        </FormItem>\n                                      )}\n                                    />\n                                  </div>\n\n                                  <FormField\n                                    control={form.control}\n                                    name=\"paymentTerms\"\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormLabel>Payment Terms</FormLabel>\n                                        <FormControl>\n                                          <Textarea\n                                            placeholder=\"Payment terms and conditions...\"\n                                            {...field}\n                                            data-testid=\"textarea-payment-terms\"\n                                          />\n                                        </FormControl>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n\n                                  {/* Payment Amount Preview */}\n                                  {calculatedPayments && (\n                                    <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-200 dark:border-blue-800\">\n                                      <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">Payment Breakdown Preview</h4>\n                                      <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                                        <div>\n                                          <p className=\"text-blue-700 dark:text-blue-300\">Advance Payment</p>\n                                          <p className=\"font-bold text-blue-900 dark:text-blue-100\">\n                                            ₹{calculatedPayments.advanceAmount.toLocaleString()}\n                                          </p>\n                                        </div>\n                                        <div>\n                                          <p className=\"text-blue-700 dark:text-blue-300\">Final Payment</p>\n                                          <p className=\"font-bold text-blue-900 dark:text-blue-100\">\n                                            ₹{calculatedPayments.finalAmount.toLocaleString()}\n                                          </p>\n                                        </div>\n                                        <div>\n                                          <p className=\"text-blue-700 dark:text-blue-300\">Total Amount</p>\n                                          <p className=\"font-bold text-blue-900 dark:text-blue-100\">\n                                            ₹{calculatedPayments.totalPrice.toLocaleString()}\n                                          </p>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n\n                              <div className=\"flex justify-end space-x-2\">\n                                <Button\n                                  type=\"button\"\n                                  variant=\"outline\"\n                                  onClick={() => setShowOfferDialog(false)}\n                                  data-testid=\"button-cancel-offer\"\n                                >\n                                  Cancel\n                                </Button>\n                                <Button\n                                  type=\"submit\"\n                                  disabled={createOfferMutation.isPending}\n                                  data-testid=\"button-save-offer\"\n                                >\n                                  {createOfferMutation.isPending ? 'Creating...' : 'Create Offer'}\n                                </Button>\n                              </div>\n                            </form>\n                          </Form>\n                        </DialogContent>\n                      </Dialog>\n                    )}\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {!selectedRFQ ? (\n                    <p className=\"text-muted-foreground text-center py-8\">\n                      Select an RFQ to compose offers\n                    </p>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {selectedQuotes.length > 0 && (\n                        <div className=\"bg-muted/50 p-4 rounded-lg\">\n                          <h3 className=\"font-medium mb-2\">Selected Quotes ({selectedQuotes.length})</h3>\n                          <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                            <div>\n                              <p className=\"text-muted-foreground\">Average Price</p>\n                              <p className=\"font-medium\">\n                                ₹{Math.round(selectedQuotes.reduce((sum, q) => sum + (q.quoteJson?.unitPrice || 0), 0) / selectedQuotes.length).toLocaleString()}\n                              </p>\n                            </div>\n                            <div>\n                              <p className=\"text-muted-foreground\">Best Lead Time</p>\n                              <p className=\"font-medium\">\n                                {Math.min(...selectedQuotes.map(q => q.quoteJson?.leadTimeDays || 999))} days\n                              </p>\n                            </div>\n                            <div>\n                              <p className=\"text-muted-foreground\">Price Range</p>\n                              <p className=\"font-medium\">\n                                ₹{Math.min(...selectedQuotes.map(q => q.quoteJson?.unitPrice || 0)).toLocaleString()} - \n                                ₹{Math.max(...selectedQuotes.map(q => q.quoteJson?.unitPrice || 0)).toLocaleString()}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                      \n                      <p className=\"text-muted-foreground\">\n                        Select quotes from the \"Supplier Quotes\" tab to create competitive offers for the buyer.\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"published\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Published Offers</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {offers.length === 0 ? (\n                    <p className=\"text-muted-foreground text-center py-8\">\n                      No offers have been published yet\n                    </p>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {offers.map((offer: any) => (\n                        <div\n                          key={offer.id}\n                          className=\"border rounded-lg p-4 space-y-3\"\n                          data-testid={`card-offer-${offer.id}`}\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <h3 className=\"font-medium\">{offer.title}</h3>\n                              <p className=\"text-sm text-muted-foreground\">\n                                RFQ: {offer.rfqId} • Created {new Date(offer.createdAt).toLocaleDateString()}\n                              </p>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              {offer.publishedAt ? (\n                                <Badge className=\"bg-green-100 text-green-800\">Published</Badge>\n                              ) : (\n                                <Badge variant=\"secondary\">Draft</Badge>\n                              )}\n                            </div>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-4 gap-4 text-sm mb-3\">\n                            <div>\n                              <p className=\"text-muted-foreground\">Price</p>\n                              <p className=\"font-medium\">₹{offer.details?.unitPrice?.toLocaleString()}</p>\n                            </div>\n                            <div>\n                              <p className=\"text-muted-foreground\">Lead Time</p>\n                              <p className=\"font-medium\">{offer.details?.leadTimeDays} days</p>\n                            </div>\n                            <div>\n                              <p className=\"text-muted-foreground\">Warranty</p>\n                              <p className=\"font-medium\">{offer.details?.warranty}</p>\n                            </div>\n                            <div>\n                              <p className=\"text-muted-foreground\">Quality</p>\n                              <p className=\"font-medium\">{offer.details?.qualityAssurance}</p>\n                            </div>\n                          </div>\n\n                          {/* Payment Information */}\n                          {(offer.advancePaymentAmount || offer.paymentLink) && (\n                            <div className=\"bg-green-50 dark:bg-green-900/20 p-3 rounded-lg border border-green-200 dark:border-green-800\">\n                              <div className=\"flex items-center space-x-2 mb-2\">\n                                <CreditCard className=\"h-4 w-4 text-green-600\" />\n                                <h4 className=\"font-medium text-green-900 dark:text-green-100\">Payment Details</h4>\n                              </div>\n                              <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                                {offer.advancePaymentAmount && (\n                                  <div>\n                                    <p className=\"text-green-700 dark:text-green-300\">Advance Payment</p>\n                                    <p className=\"font-bold text-green-900 dark:text-green-100\">\n                                      ₹{parseFloat(offer.advancePaymentAmount).toLocaleString()}\n                                    </p>\n                                  </div>\n                                )}\n                                {offer.finalPaymentAmount && (\n                                  <div>\n                                    <p className=\"text-green-700 dark:text-green-300\">Final Payment</p>\n                                    <p className=\"font-bold text-green-900 dark:text-green-100\">\n                                      ₹{parseFloat(offer.finalPaymentAmount).toLocaleString()}\n                                    </p>\n                                  </div>\n                                )}\n                                {offer.paymentDeadline && (\n                                  <div>\n                                    <p className=\"text-green-700 dark:text-green-300\">Payment Deadline</p>\n                                    <p className=\"font-bold text-green-900 dark:text-green-100\">\n                                      {new Date(offer.paymentDeadline).toLocaleDateString()}\n                                    </p>\n                                  </div>\n                                )}\n                              </div>\n                              {offer.paymentLink && (\n                                <div className=\"mt-2\">\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => window.open(offer.paymentLink, '_blank')}\n                                    className=\"text-green-700 border-green-300 hover:bg-green-100 dark:text-green-300 dark:border-green-700 dark:hover:bg-green-900/30\"\n                                    data-testid={`button-payment-link-${offer.id}`}\n                                  >\n                                    <ExternalLink className=\"h-3 w-3 mr-1\" />\n                                    Payment Link\n                                  </Button>\n                                </div>\n                              )}\n                            </div>\n                          )}\n\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              onClick={() => {\n                                // Show offer details in a modal or navigate to detail view\n                                toast({\n                                  title: \"Offer Details\",\n                                  description: `${offer.title} - ₹${offer.details?.unitPrice} per unit, ${offer.details?.leadTimeDays} days lead time`,\n                                });\n                              }}\n                              data-testid={`button-view-offer-${offer.id}`}\n                            >\n                              <Eye className=\"h-4 w-4 mr-1\" />\n                              View\n                            </Button>\n                            {offer.paymentLink && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => window.open(offer.paymentLink, '_blank')}\n                                data-testid={`button-open-payment-${offer.id}`}\n                              >\n                                <ExternalLink className=\"h-4 w-4 mr-1\" />\n                                Payment\n                              </Button>\n                            )}\n                            {!offer.publishedAt && (\n                              <Button\n                                size=\"sm\"\n                                onClick={() => handlePublishOffer(offer.id)}\n                                disabled={publishOfferMutation.isPending}\n                                data-testid={`button-publish-offer-${offer.id}`}\n                              >\n                                <Send className=\"h-4 w-4 mr-1\" />\n                                Publish\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":47530},"client/src/pages/admin/rfq-management.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { Search, Filter, Users, Send, Eye, MoreHorizontal } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { authenticatedApiClient } from '@/lib/supabase';\nimport { RFQ_STATUS_COLORS } from '@/lib/constants';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function AdminRFQManagement() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [selectedRFQ, setSelectedRFQ] = useState<any>(null);\n  const [selectedSuppliers, setSelectedSuppliers] = useState<string[]>([]);\n  const [showInviteDialog, setShowInviteDialog] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: rfqs = [], isLoading: rfqsLoading } = useQuery({\n    queryKey: ['/api/protected/rfqs'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/rfqs'),\n  });\n\n  const { data: suppliers = [] } = useQuery({\n    queryKey: ['/api/protected/admin/suppliers'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/admin/suppliers'),\n  });\n\n  const verifiedSuppliers = suppliers.filter((s: any) => \n    s.profile?.verifiedStatus && ['bronze', 'silver', 'gold'].includes(s.profile.verifiedStatus)\n  );\n\n  const inviteSuppliersMutation = useMutation({\n    mutationFn: (data: { rfqId: string; supplierIds: string[] }) =>\n      authenticatedApiClient.post('/api/protected/admin/invite', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/protected/rfqs'] });\n      setShowInviteDialog(false);\n      setSelectedSuppliers([]);\n      setSelectedRFQ(null);\n      toast({\n        title: \"Invitations sent successfully\",\n        description: \"Suppliers have been notified about the RFQ.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to send invitations\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredRFQs = rfqs.filter((rfq: any) => {\n    const matchesSearch = rfq.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         rfq.rfqNumber.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || rfq.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const handleInviteSuppliers = () => {\n    if (!selectedRFQ || selectedSuppliers.length === 0) return;\n\n    inviteSuppliersMutation.mutate({\n      rfqId: selectedRFQ.id,\n      supplierIds: selectedSuppliers,\n    });\n  };\n\n  const getMatchingSuppliers = (rfq: any) => {\n    // Simple matching based on capabilities and verification status\n    const rfqProcess = rfq.details?.sku?.processName?.toLowerCase() || '';\n    return verifiedSuppliers.filter((supplier: any) => {\n      const capabilities = supplier.profile?.capabilities || [];\n      return capabilities.some((cap: string) => \n        cap.toLowerCase().includes(rfqProcess.split(' ')[0]) // Simple matching\n      );\n    });\n  };\n\n  const statusOptions = [\n    { value: 'all', label: 'All Status' },\n    { value: 'submitted', label: 'Submitted' },\n    { value: 'under_review', label: 'Under Review' },\n    { value: 'invited', label: 'Suppliers Invited' },\n    { value: 'offers_published', label: 'Offers Published' },\n    { value: 'accepted', label: 'Accepted' },\n  ];\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground\">RFQ Management</h1>\n        <p className=\"text-muted-foreground mt-2\">Review, match suppliers, and manage RFQs</p>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  placeholder=\"Search RFQs by title or ID...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-rfqs\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-status-filter\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {statusOptions.map(option => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\" data-testid=\"button-filter\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                More Filters\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* RFQ List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>All RFQs ({filteredRFQs.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {rfqsLoading ? (\n            <div className=\"text-center py-8 text-muted-foreground\">Loading RFQs...</div>\n          ) : filteredRFQs.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No RFQs found matching your criteria\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">RFQ ID</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Title</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Buyer</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Process</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Status</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Created</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {filteredRFQs.map((rfq: any) => (\n                    <tr key={rfq.id} data-testid={`row-rfq-${rfq.id}`}>\n                      <td className=\"py-4 px-6 text-sm font-mono\" data-testid={`text-rfq-number-${rfq.id}`}>\n                        {rfq.rfqNumber}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm font-medium\" data-testid={`text-rfq-title-${rfq.id}`}>\n                        {rfq.title}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm\">\n                        {rfq.buyerId ? `Buyer-${rfq.buyerId.slice(-6)}` : 'Unknown'}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm\">\n                        {rfq.details?.sku?.processName || 'N/A'}\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <Badge className={RFQ_STATUS_COLORS[rfq.status || 'draft'] || RFQ_STATUS_COLORS.draft}>\n                          {(rfq.status || 'draft').replace('_', ' ').toUpperCase()}\n                        </Badge>\n                      </td>\n                      <td className=\"py-4 px-6 text-sm text-muted-foreground\">\n                        {new Date(rfq.createdAt).toLocaleDateString()}\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => setLocation(`/admin/rfq/${rfq.id}`)}\n                            data-testid={`button-view-rfq-${rfq.id}`}\n                          >\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            View\n                          </Button>\n                          \n                          {rfq.status === 'submitted' || rfq.status === 'under_review' ? (\n                            <Dialog open={showInviteDialog && selectedRFQ?.id === rfq.id} onOpenChange={setShowInviteDialog}>\n                              <DialogTrigger asChild>\n                                <Button\n                                  size=\"sm\"\n                                  onClick={() => setSelectedRFQ(rfq)}\n                                  data-testid={`button-invite-suppliers-${rfq.id}`}\n                                >\n                                  <Users className=\"h-4 w-4 mr-1\" />\n                                  Invite Suppliers\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent className=\"max-w-4xl\">\n                                <DialogHeader>\n                                  <DialogTitle>Invite Suppliers for {rfq.rfqNumber}</DialogTitle>\n                                </DialogHeader>\n                                \n                                <div className=\"space-y-4\">\n                                  <div className=\"bg-muted/50 p-4 rounded-lg\">\n                                    <h3 className=\"font-semibold mb-2\">RFQ Details</h3>\n                                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                                      <div>\n                                        <span className=\"text-muted-foreground\">Process:</span> {rfq.details?.sku?.processName}\n                                      </div>\n                                      <div>\n                                        <span className=\"text-muted-foreground\">Quantity:</span> {rfq.details?.items?.[0]?.quantity} {rfq.details?.items?.[0]?.unit}\n                                      </div>\n                                      <div>\n                                        <span className=\"text-muted-foreground\">Material:</span> {rfq.details?.items?.[0]?.material}\n                                      </div>\n                                      <div>\n                                        <span className=\"text-muted-foreground\">Priority:</span> {rfq.details?.items?.[0]?.priority}\n                                      </div>\n                                    </div>\n                                  </div>\n\n                                  <div>\n                                    <h3 className=\"font-semibold mb-3\">Matching Suppliers ({getMatchingSuppliers(rfq).length})</h3>\n                                    <div className=\"max-h-64 overflow-y-auto space-y-2\">\n                                      {getMatchingSuppliers(rfq).map((supplier: any) => (\n                                        <div\n                                          key={supplier.user.id}\n                                          className=\"flex items-center space-x-3 p-3 border rounded-lg\"\n                                          data-testid={`card-supplier-${supplier.user.id}`}\n                                        >\n                                          <Checkbox\n                                            checked={selectedSuppliers.includes(supplier.user.id)}\n                                            onCheckedChange={(checked) => {\n                                              if (checked) {\n                                                setSelectedSuppliers([...selectedSuppliers, supplier.user.id]);\n                                              } else {\n                                                setSelectedSuppliers(selectedSuppliers.filter(id => id !== supplier.user.id));\n                                              }\n                                            }}\n                                            data-testid={`checkbox-supplier-${supplier.user.id}`}\n                                          />\n                                          <div className=\"flex-1\">\n                                            <p className=\"font-medium\">{supplier.company.name}</p>\n                                            <p className=\"text-sm text-muted-foreground\">\n                                              {supplier.profile?.capabilities?.slice(0, 3).join(', ')}\n                                            </p>\n                                            <div className=\"flex items-center space-x-2 mt-1\">\n                                              <Badge variant=\"secondary\">\n                                                {supplier.profile?.verifiedStatus ? \n                                                  supplier.profile.verifiedStatus.charAt(0).toUpperCase() + supplier.profile.verifiedStatus.slice(1) : \n                                                  'Unverified'}\n                                              </Badge>\n                                              <span className=\"text-xs text-muted-foreground\">\n                                                MOQ: {supplier.profile?.moqDefault || 'N/A'}\n                                              </span>\n                                            </div>\n                                          </div>\n                                        </div>\n                                      ))}\n                                    </div>\n                                  </div>\n\n                                  <div className=\"flex justify-end space-x-2\">\n                                    <Button\n                                      variant=\"outline\"\n                                      onClick={() => setShowInviteDialog(false)}\n                                      data-testid=\"button-cancel-invite\"\n                                    >\n                                      Cancel\n                                    </Button>\n                                    <Button\n                                      onClick={handleInviteSuppliers}\n                                      disabled={selectedSuppliers.length === 0 || inviteSuppliersMutation.isPending}\n                                      data-testid=\"button-send-invites\"\n                                    >\n                                      <Send className=\"h-4 w-4 mr-2\" />\n                                      {inviteSuppliersMutation.isPending \n                                        ? 'Sending...' \n                                        : `Send Invites (${selectedSuppliers.length})`}\n                                    </Button>\n                                  </div>\n                                </div>\n                              </DialogContent>\n                            </Dialog>\n                          ) : (\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"sm\" data-testid={`button-more-actions-${rfq.id}`}>\n                                  <MoreHorizontal className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent>\n                                <DropdownMenuItem>View Quotes</DropdownMenuItem>\n                                <DropdownMenuItem>Compose Offers</DropdownMenuItem>\n                                <DropdownMenuItem>Update Status</DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          )}\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":16965},"client/src/pages/admin/supplier-management.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Search, Filter, Building2, Award, FileCheck, Eye, MoreHorizontal, CheckCircle, XCircle, Clock } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { authenticatedApiClient } from '@/lib/supabase';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function AdminSupplierManagement() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [selectedSupplier, setSelectedSupplier] = useState<any>(null);\n  const [showDetailsDialog, setShowDetailsDialog] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: suppliers = [], isLoading } = useQuery({\n    queryKey: ['/api/protected/admin/suppliers'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/admin/suppliers'),\n  });\n\n  const updateSupplierStatusMutation = useMutation({\n    mutationFn: (data: { supplierId: string; status: string }) =>\n      authenticatedApiClient.post('/api/protected/admin/supplier-status', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/protected/admin/suppliers'] });\n      toast({\n        title: \"Supplier status updated\",\n        description: \"The supplier verification status has been updated.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to update status\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredSuppliers = suppliers.filter((supplier: any) => {\n    const matchesSearch = supplier.company.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         supplier.user.email.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || supplier.profile?.verifiedStatus === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'gold': return 'bg-yellow-100 text-yellow-800';\n      case 'silver': return 'bg-gray-100 text-gray-800';\n      case 'bronze': return 'bg-orange-100 text-orange-800';\n      default: return 'bg-red-100 text-red-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'gold':\n      case 'silver':\n      case 'bronze':\n        return CheckCircle;\n      case 'unverified':\n        return XCircle;\n      default:\n        return Clock;\n    }\n  };\n\n  const statusOptions = [\n    { value: 'all', label: 'All Status' },\n    { value: 'unverified', label: 'Unverified' },\n    { value: 'bronze', label: 'Bronze' },\n    { value: 'silver', label: 'Silver' },\n    { value: 'gold', label: 'Gold' },\n  ];\n\n  const handleStatusUpdate = (supplierId: string, newStatus: string) => {\n    updateSupplierStatusMutation.mutate({ supplierId, status: newStatus });\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Supplier Management</h1>\n        <p className=\"text-muted-foreground mt-2\">Verify suppliers, manage capabilities, and track performance</p>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-red-100 rounded-full flex items-center justify-center\">\n                <XCircle className=\"h-5 w-5 text-red-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-unverified-count\">\n                  {suppliers.filter((s: any) => s.profile?.verifiedStatus === 'unverified').length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Unverified</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center\">\n                <Award className=\"h-5 w-5 text-orange-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-bronze-count\">\n                  {suppliers.filter((s: any) => s.profile?.verifiedStatus === 'bronze').length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Bronze</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center\">\n                <Award className=\"h-5 w-5 text-gray-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-silver-count\">\n                  {suppliers.filter((s: any) => s.profile?.verifiedStatus === 'silver').length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Silver</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-yellow-100 rounded-full flex items-center justify-center\">\n                <Award className=\"h-5 w-5 text-yellow-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-gold-count\">\n                  {suppliers.filter((s: any) => s.profile?.verifiedStatus === 'gold').length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Gold</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  placeholder=\"Search suppliers by company name or email...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-suppliers\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-status-filter\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {statusOptions.map(option => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\" data-testid=\"button-filter\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                More Filters\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Supplier List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>All Suppliers ({filteredSuppliers.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8 text-muted-foreground\">Loading suppliers...</div>\n          ) : filteredSuppliers.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No suppliers found matching your criteria\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Company</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Contact</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Capabilities</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Status</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Location</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Joined</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {filteredSuppliers.map((supplier: any) => {\n                    const StatusIcon = getStatusIcon(supplier.profile?.verifiedStatus || 'unverified');\n                    return (\n                      <tr key={supplier.user.id} data-testid={`row-supplier-${supplier.user.id}`}>\n                        <td className=\"py-4 px-6\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-sm font-medium\">\n                              <Building2 className=\"h-4 w-4\" />\n                            </div>\n                            <div>\n                              <p className=\"font-medium\" data-testid={`text-company-name-${supplier.user.id}`}>\n                                {supplier.company.name}\n                              </p>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {supplier.company.gstin ? `GSTIN: ${supplier.company.gstin}` : 'No GSTIN'}\n                              </p>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"py-4 px-6 text-sm\">\n                          <div>\n                            <p className=\"font-medium\">{supplier.user.name || 'N/A'}</p>\n                            <p className=\"text-muted-foreground\">{supplier.user.email}</p>\n                          </div>\n                        </td>\n                        <td className=\"py-4 px-6 text-sm\">\n                          <div className=\"flex flex-wrap gap-1 max-w-48\">\n                            {(supplier.profile?.capabilities || []).slice(0, 3).map((cap: string, index: number) => (\n                              <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                                {cap}\n                              </Badge>\n                            ))}\n                            {(supplier.profile?.capabilities || []).length > 3 && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                +{(supplier.profile?.capabilities || []).length - 3} more\n                              </Badge>\n                            )}\n                          </div>\n                        </td>\n                        <td className=\"py-4 px-6\">\n                          <div className=\"flex items-center space-x-2\">\n                            <StatusIcon className=\"h-4 w-4\" />\n                            <Badge className={getStatusColor(supplier.profile?.verifiedStatus || 'unverified')}>\n                              {(supplier.profile?.verifiedStatus || 'unverified').toUpperCase()}\n                            </Badge>\n                          </div>\n                        </td>\n                        <td className=\"py-4 px-6 text-sm\">\n                          {supplier.company.city ? `${supplier.company.city}, ${supplier.company.state}` : 'N/A'}\n                        </td>\n                        <td className=\"py-4 px-6 text-sm text-muted-foreground\">\n                          {new Date(supplier.user.createdAt).toLocaleDateString()}\n                        </td>\n                        <td className=\"py-4 px-6\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Dialog open={showDetailsDialog && selectedSupplier?.user.id === supplier.user.id} onOpenChange={setShowDetailsDialog}>\n                              <DialogTrigger asChild>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => setSelectedSupplier(supplier)}\n                                  data-testid={`button-view-supplier-${supplier.user.id}`}\n                                >\n                                  <Eye className=\"h-4 w-4 mr-1\" />\n                                  View\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n                                <DialogHeader>\n                                  <DialogTitle>{supplier.company.name} - Supplier Details</DialogTitle>\n                                </DialogHeader>\n                                \n                                <Tabs defaultValue=\"profile\" className=\"w-full\">\n                                  <TabsList className=\"grid w-full grid-cols-4\">\n                                    <TabsTrigger value=\"profile\">Profile</TabsTrigger>\n                                    <TabsTrigger value=\"capabilities\">Capabilities</TabsTrigger>\n                                    <TabsTrigger value=\"documents\">Documents</TabsTrigger>\n                                    <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n                                  </TabsList>\n                                  \n                                  <TabsContent value=\"profile\" className=\"space-y-4\">\n                                    <Card>\n                                      <CardHeader>\n                                        <CardTitle className=\"text-lg\">Company Information</CardTitle>\n                                      </CardHeader>\n                                      <CardContent className=\"space-y-4\">\n                                        <div className=\"grid grid-cols-2 gap-4\">\n                                          <div>\n                                            <p className=\"text-sm font-medium\">Company Name</p>\n                                            <p className=\"text-sm text-muted-foreground\">{supplier.company.name}</p>\n                                          </div>\n                                          <div>\n                                            <p className=\"text-sm font-medium\">GSTIN</p>\n                                            <p className=\"text-sm text-muted-foreground\">{supplier.company.gstin || 'Not provided'}</p>\n                                          </div>\n                                          <div>\n                                            <p className=\"text-sm font-medium\">PAN</p>\n                                            <p className=\"text-sm text-muted-foreground\">{supplier.company.pan || 'Not provided'}</p>\n                                          </div>\n                                          <div>\n                                            <p className=\"text-sm font-medium\">Location</p>\n                                            <p className=\"text-sm text-muted-foreground\">\n                                              {supplier.company.city}, {supplier.company.state}\n                                            </p>\n                                          </div>\n                                        </div>\n                                        <div>\n                                          <p className=\"text-sm font-medium\">Address</p>\n                                          <p className=\"text-sm text-muted-foreground\">\n                                            {supplier.company.address?.street || 'Not provided'}\n                                          </p>\n                                        </div>\n                                      </CardContent>\n                                    </Card>\n                                    \n                                    <Card>\n                                      <CardHeader>\n                                        <CardTitle className=\"text-lg\">Contact Information</CardTitle>\n                                      </CardHeader>\n                                      <CardContent className=\"space-y-4\">\n                                        <div className=\"grid grid-cols-2 gap-4\">\n                                          <div>\n                                            <p className=\"text-sm font-medium\">Contact Person</p>\n                                            <p className=\"text-sm text-muted-foreground\">{supplier.user.name || 'Not provided'}</p>\n                                          </div>\n                                          <div>\n                                            <p className=\"text-sm font-medium\">Email</p>\n                                            <p className=\"text-sm text-muted-foreground\">{supplier.user.email}</p>\n                                          </div>\n                                          <div>\n                                            <p className=\"text-sm font-medium\">Phone</p>\n                                            <p className=\"text-sm text-muted-foreground\">{supplier.user.phone || 'Not provided'}</p>\n                                          </div>\n                                          <div>\n                                            <p className=\"text-sm font-medium\">Status</p>\n                                            <Badge className={getStatusColor(supplier.profile?.verifiedStatus || 'unverified')}>\n                                              {(supplier.profile?.verifiedStatus || 'unverified').toUpperCase()}\n                                            </Badge>\n                                          </div>\n                                        </div>\n                                      </CardContent>\n                                    </Card>\n                                  </TabsContent>\n                                  \n                                  <TabsContent value=\"capabilities\" className=\"space-y-4\">\n                                    <Card>\n                                      <CardHeader>\n                                        <CardTitle className=\"text-lg\">Manufacturing Capabilities</CardTitle>\n                                      </CardHeader>\n                                      <CardContent>\n                                        <div className=\"grid grid-cols-3 gap-2\">\n                                          {(supplier.profile?.capabilities || []).map((capability: string, index: number) => (\n                                            <Badge key={index} variant=\"secondary\">\n                                              {capability}\n                                            </Badge>\n                                          ))}\n                                        </div>\n                                        {(!supplier.profile?.capabilities || supplier.profile.capabilities.length === 0) && (\n                                          <p className=\"text-muted-foreground\">No capabilities specified</p>\n                                        )}\n                                      </CardContent>\n                                    </Card>\n                                    \n                                    <Card>\n                                      <CardHeader>\n                                        <CardTitle className=\"text-lg\">Certifications</CardTitle>\n                                      </CardHeader>\n                                      <CardContent>\n                                        <div className=\"grid grid-cols-3 gap-2\">\n                                          {(supplier.profile?.certifications || []).map((cert: string, index: number) => (\n                                            <Badge key={index} variant=\"outline\">\n                                              {cert}\n                                            </Badge>\n                                          ))}\n                                        </div>\n                                        {(!supplier.profile?.certifications || supplier.profile.certifications.length === 0) && (\n                                          <p className=\"text-muted-foreground\">No certifications specified</p>\n                                        )}\n                                      </CardContent>\n                                    </Card>\n                                    \n                                    <Card>\n                                      <CardHeader>\n                                        <CardTitle className=\"text-lg\">Production Details</CardTitle>\n                                      </CardHeader>\n                                      <CardContent className=\"space-y-4\">\n                                        <div className=\"grid grid-cols-2 gap-4\">\n                                          <div>\n                                            <p className=\"text-sm font-medium\">Default MOQ</p>\n                                            <p className=\"text-sm text-muted-foreground\">\n                                              {supplier.profile?.moqDefault || 'Not specified'}\n                                            </p>\n                                          </div>\n                                        </div>\n                                      </CardContent>\n                                    </Card>\n                                  </TabsContent>\n                                  \n                                  <TabsContent value=\"documents\" className=\"space-y-4\">\n                                    <Card>\n                                      <CardHeader>\n                                        <CardTitle className=\"text-lg\">Uploaded Documents</CardTitle>\n                                      </CardHeader>\n                                      <CardContent>\n                                        <div className=\"space-y-3\">\n                                          <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n                                            <div className=\"flex items-center space-x-3\">\n                                              <FileCheck className=\"h-5 w-5 text-green-600\" />\n                                              <div>\n                                                <p className=\"font-medium\">Company Registration</p>\n                                                <p className=\"text-sm text-muted-foreground\">Uploaded 2 weeks ago</p>\n                                              </div>\n                                            </div>\n                                            <Button variant=\"outline\" size=\"sm\">View</Button>\n                                          </div>\n                                          \n                                          <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n                                            <div className=\"flex items-center space-x-3\">\n                                              <FileCheck className=\"h-5 w-5 text-green-600\" />\n                                              <div>\n                                                <p className=\"font-medium\">GST Certificate</p>\n                                                <p className=\"text-sm text-muted-foreground\">Uploaded 2 weeks ago</p>\n                                              </div>\n                                            </div>\n                                            <Button variant=\"outline\" size=\"sm\">View</Button>\n                                          </div>\n                                          \n                                          <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n                                            <div className=\"flex items-center space-x-3\">\n                                              <FileCheck className=\"h-5 w-5 text-blue-600\" />\n                                              <div>\n                                                <p className=\"font-medium\">ISO 9001:2015 Certificate</p>\n                                                <p className=\"text-sm text-muted-foreground\">Uploaded 1 week ago</p>\n                                              </div>\n                                            </div>\n                                            <Button variant=\"outline\" size=\"sm\">View</Button>\n                                          </div>\n                                        </div>\n                                      </CardContent>\n                                    </Card>\n                                  </TabsContent>\n                                  \n                                  <TabsContent value=\"performance\" className=\"space-y-4\">\n                                    <div className=\"grid grid-cols-3 gap-4\">\n                                      <Card>\n                                        <CardContent className=\"p-6 text-center\">\n                                          <p className=\"text-2xl font-bold text-foreground\">23</p>\n                                          <p className=\"text-sm text-muted-foreground\">Total Quotes</p>\n                                        </CardContent>\n                                      </Card>\n                                      <Card>\n                                        <CardContent className=\"p-6 text-center\">\n                                          <p className=\"text-2xl font-bold text-foreground\">8</p>\n                                          <p className=\"text-sm text-muted-foreground\">Orders Won</p>\n                                        </CardContent>\n                                      </Card>\n                                      <Card>\n                                        <CardContent className=\"p-6 text-center\">\n                                          <p className=\"text-2xl font-bold text-foreground\">95%</p>\n                                          <p className=\"text-sm text-muted-foreground\">On-time Delivery</p>\n                                        </CardContent>\n                                      </Card>\n                                    </div>\n                                  </TabsContent>\n                                </Tabs>\n                                \n                                <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n                                  <Select\n                                    value={supplier.profile?.verifiedStatus || 'unverified'}\n                                    onValueChange={(value) => handleStatusUpdate(supplier.user.id, value)}\n                                  >\n                                    <SelectTrigger className=\"w-32\">\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"unverified\">Unverified</SelectItem>\n                                      <SelectItem value=\"bronze\">Bronze</SelectItem>\n                                      <SelectItem value=\"silver\">Silver</SelectItem>\n                                      <SelectItem value=\"gold\">Gold</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n                                  <Button variant=\"outline\" onClick={() => setShowDetailsDialog(false)}>\n                                    Close\n                                  </Button>\n                                </div>\n                              </DialogContent>\n                            </Dialog>\n                            \n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"sm\" data-testid={`button-more-actions-${supplier.user.id}`}>\n                                  <MoreHorizontal className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent>\n                                <DropdownMenuItem onClick={() => handleStatusUpdate(supplier.user.id, 'bronze')}>\n                                  Set to Bronze\n                                </DropdownMenuItem>\n                                <DropdownMenuItem onClick={() => handleStatusUpdate(supplier.user.id, 'silver')}>\n                                  Set to Silver\n                                </DropdownMenuItem>\n                                <DropdownMenuItem onClick={() => handleStatusUpdate(supplier.user.id, 'gold')}>\n                                  Set to Gold\n                                </DropdownMenuItem>\n                                <DropdownMenuItem onClick={() => handleStatusUpdate(supplier.user.id, 'unverified')}>\n                                  Set to Unverified\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          </div>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":30889},"client/src/pages/auth/login.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Login() {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: ''\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await login(formData.email, formData.password);\n      setLocation('/dashboard');\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome back to Logicwerk!\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Login failed\",\n        description: \"Please check your email and password and try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold text-primary\">Logicwerk</CardTitle>\n          <CardDescription>Sign in to your account</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                placeholder=\"Enter your email\"\n                required\n                data-testid=\"input-email\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={formData.password}\n                onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                placeholder=\"Enter your password\"\n                required\n                data-testid=\"input-password\"\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isLoading}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? 'Signing in...' : 'Sign In'}\n            </Button>\n          </form>\n          <div className=\"mt-4 text-center text-sm\">\n            <span className=\"text-muted-foreground\">Don't have an account? </span>\n            <button\n              onClick={() => setLocation('/register')}\n              className=\"text-primary hover:underline\"\n              data-testid=\"link-register\"\n            >\n              Sign up\n            </button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3247},"client/src/pages/auth/register.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Register() {\n  const [formData, setFormData] = useState({\n    email: '',\n    name: '',\n    password: '',\n    role: 'buyer' as 'buyer' | 'supplier',\n    companyName: '',\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const { register } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await register(formData);\n      setLocation('/dashboard');\n      toast({\n        title: \"Registration successful\",\n        description: formData.role === 'supplier' \n          ? \"Welcome to Logicwerk! Please complete your profile to start receiving RFQ invitations.\"\n          : \"Welcome to Logicwerk!\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Registration failed\",\n        description: \"Please try again with different details.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold text-primary\">Logicwerk</CardTitle>\n          <CardDescription>Create your account</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"name\">Full Name</Label>\n              <Input\n                id=\"name\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                placeholder=\"Enter your full name\"\n                required\n                data-testid=\"input-name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                placeholder=\"Enter your email\"\n                required\n                data-testid=\"input-email\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={formData.password}\n                onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                placeholder=\"Enter your password\"\n                required\n                minLength={6}\n                data-testid=\"input-password\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"companyName\">Company Name</Label>\n              <Input\n                id=\"companyName\"\n                value={formData.companyName}\n                onChange={(e) => setFormData({ ...formData, companyName: e.target.value })}\n                placeholder=\"Enter your company name\"\n                required\n                data-testid=\"input-company\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"role\">I am a</Label>\n              <Select\n                value={formData.role}\n                onValueChange={(value: 'buyer' | 'supplier') => setFormData({ ...formData, role: value })}\n              >\n                <SelectTrigger data-testid=\"select-role\">\n                  <SelectValue placeholder=\"Select your role\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"buyer\">Buyer - I need manufacturing services</SelectItem>\n                  <SelectItem value=\"supplier\">Supplier - I provide manufacturing services</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isLoading}\n              data-testid=\"button-register\"\n            >\n              {isLoading ? 'Creating account...' : 'Create Account'}\n            </Button>\n          </form>\n          <div className=\"mt-4 text-center text-sm\">\n            <span className=\"text-muted-foreground\">Already have an account? </span>\n            <button\n              onClick={() => setLocation('/login')}\n              className=\"text-primary hover:underline\"\n              data-testid=\"link-login\"\n            >\n              Sign in\n            </button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5135},"client/src/pages/buyer/create-rfq.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { IndustrySelector } from '@/components/rfq/industry-selector';\nimport { ProcessSelector } from '@/components/rfq/process-selector';\nimport { Configurator } from '@/components/rfq/configurator';\nimport { authenticatedApiClient } from '@/lib/supabase';\nimport { SKU } from '@shared/schema';\nimport { INDUSTRIES } from '@/lib/constants';\n\nexport default function CreateRFQ() {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [selectedIndustry, setSelectedIndustry] = useState<string>('');\n  const [selectedSKU, setSelectedSKU] = useState<SKU | null>(null);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createRFQMutation = useMutation({\n    mutationFn: (rfqData: any) => \n      authenticatedApiClient.post('/api/protected/rfqs', rfqData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/protected/rfqs'] });\n      toast({\n        title: \"RFQ Created Successfully\",\n        description: \"Your request for quotation has been submitted for review.\",\n      });\n      setLocation('/buyer/rfqs');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Create RFQ\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleIndustrySelect = (industry: string) => {\n    setSelectedIndustry(industry);\n    setCurrentStep(2);\n  };\n\n  const handleProcessSelect = (sku: SKU) => {\n    setSelectedSKU(sku);\n    setCurrentStep(3);\n  };\n\n  const handleConfiguratorSubmit = (data: any) => {\n    if (!selectedSKU) return;\n\n    const rfqData = {\n      title: data.itemTitle,\n      details: {\n        industry: selectedIndustry,\n        sku: selectedSKU,\n        items: [{ ...data, skuCode: selectedSKU.code }],\n        files: data.files || [], // Include uploaded files\n      },\n      ndaRequired: data.ndaRequired,\n      confidential: data.confidential,\n      budgetRange: data.budgetMin && data.budgetMax ? {\n        min: data.budgetMin,\n        max: data.budgetMax,\n      } : null,\n    };\n\n    console.log('🔥 Submitting RFQ with data:', { \n      title: rfqData.title, \n      filesCount: data.files?.length || 0,\n      industry: selectedIndustry \n    });\n\n    createRFQMutation.mutate(rfqData);\n  };\n\n  const handleBack = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n      if (currentStep === 2) {\n        setSelectedIndustry('');\n      } else if (currentStep === 3) {\n        setSelectedSKU(null);\n      }\n    } else {\n      setLocation('/buyer/dashboard');\n    }\n  };\n\n  const steps = [\n    { number: 1, title: 'Industry' },\n    { number: 2, title: 'Process' },\n    { number: 3, title: 'Configurator' },\n  ];\n\n  const selectedIndustryData = INDUSTRIES.find(ind => ind.id === selectedIndustry);\n\n  return (\n    <div className=\"p-8\">\n      <Card className=\"max-w-6xl mx-auto\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-2xl font-bold\">Create New RFQ</CardTitle>\n            <Button variant=\"outline\" onClick={handleBack} data-testid=\"button-close\">\n              ✕\n            </Button>\n          </div>\n\n          {/* Step Indicator */}\n          <div className=\"flex items-center space-x-4 pt-4\">\n            {steps.map((step, index) => (\n              <div key={step.number} className=\"flex items-center space-x-2\">\n                <div\n                  className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                    currentStep >= step.number\n                      ? 'bg-primary text-primary-foreground'\n                      : 'bg-muted text-muted-foreground'\n                  }`}\n                >\n                  {step.number}\n                </div>\n                <span className={`text-sm ${currentStep >= step.number ? 'font-medium' : 'text-muted-foreground'}`}>\n                  {step.title}\n                </span>\n                {index < steps.length - 1 && <div className=\"w-8 h-px bg-border\"></div>}\n              </div>\n            ))}\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          {currentStep === 1 && (\n            <IndustrySelector\n              selectedIndustry={selectedIndustry}\n              onIndustrySelect={handleIndustrySelect}\n            />\n          )}\n\n          {currentStep === 2 && selectedIndustry && (\n            <div>\n              <div className=\"mb-4\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Selected Industry: <span className=\"font-medium\">{selectedIndustryData?.name}</span>\n                </p>\n              </div>\n              <ProcessSelector\n                selectedIndustry={selectedIndustry}\n                selectedProcess={selectedSKU?.code}\n                onProcessSelect={handleProcessSelect}\n              />\n            </div>\n          )}\n\n          {currentStep === 3 && selectedSKU && (\n            <div>\n              <div className=\"mb-4\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Selected Process: <span className=\"font-medium\">{selectedSKU.processName}</span>\n                </p>\n              </div>\n              <Configurator\n                selectedSKU={selectedSKU}\n                onSubmit={handleConfiguratorSubmit}\n                onBack={handleBack}\n              />\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5819},"client/src/pages/buyer/dashboard.tsx":{"content":"import { Plus, FileText, Handshake, ShoppingCart } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useQuery } from '@tanstack/react-query';\nimport { authenticatedApiClient } from '@/lib/supabase';\nimport { RFQ } from '@shared/schema';\nimport { RFQ_STATUS_COLORS } from '@/lib/constants';\nimport { useLocation } from 'wouter';\n\nexport default function BuyerDashboard() {\n  const [, setLocation] = useLocation();\n\n  const { data: rfqs = [], isLoading } = useQuery({\n    queryKey: ['/api/protected/rfqs'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/rfqs') as Promise<RFQ[]>,\n  });\n\n  const { data: orders = [] } = useQuery({\n    queryKey: ['/api/protected/orders'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/orders'),\n  });\n\n  const stats = {\n    pendingOffers: rfqs.filter(rfq => rfq.status === 'offers_published').length,\n    activeOrders: orders.filter((order: any) => ['production', 'inspection', 'shipped'].includes(order.status)).length,\n  };\n\n  return (\n    <div className=\"p-8\">\n      {/* Dashboard Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Buyer Dashboard</h1>\n        <p className=\"text-muted-foreground mt-2\">Manage your RFQs, view offers, and track orders</p>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\" onClick={() => setLocation('/buyer/create-rfq')}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-lg\">Create New RFQ</CardTitle>\n                <CardDescription className=\"mt-1\">Start a new request for quotation</CardDescription>\n              </div>\n              <Button data-testid=\"button-create-rfq\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                New\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-lg\">Pending Offers</CardTitle>\n                <CardDescription className=\"mt-1\">\n                  <span data-testid=\"text-pending-offers\">{stats.pendingOffers}</span> offers awaiting review\n                </CardDescription>\n              </div>\n              <div className=\"bg-amber-100 text-amber-800 px-3 py-1 rounded-full text-sm font-medium\">\n                <span data-testid=\"text-pending-count\">{stats.pendingOffers}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-lg\">Active Orders</CardTitle>\n                <CardDescription className=\"mt-1\">\n                  <span data-testid=\"text-active-orders\">{stats.activeOrders}</span> orders in progress\n                </CardDescription>\n              </div>\n              <div className=\"bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium\">\n                <span data-testid=\"text-active-count\">{stats.activeOrders}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent RFQs */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-xl\">Recent RFQs</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8 text-muted-foreground\">Loading RFQs...</div>\n          ) : rfqs.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">No RFQs yet</h3>\n              <p className=\"text-muted-foreground mb-4\">Create your first RFQ to get started</p>\n              <Button onClick={() => setLocation('/buyer/create-rfq')} data-testid=\"button-create-first-rfq\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create RFQ\n              </Button>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">RFQ ID</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Title</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Status</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Created</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {rfqs.slice(0, 10).map((rfq) => (\n                    <tr key={rfq.id} data-testid={`row-rfq-${rfq.id}`}>\n                      <td className=\"py-4 px-6 text-sm\" data-testid={`text-rfq-number-${rfq.id}`}>\n                        {rfq.rfqNumber}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm font-medium\" data-testid={`text-rfq-title-${rfq.id}`}>\n                        {rfq.title}\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${RFQ_STATUS_COLORS[rfq.status || 'draft'] || RFQ_STATUS_COLORS.draft}`}>\n                          {(rfq.status || 'draft').replace('_', ' ').toUpperCase()}\n                        </span>\n                      </td>\n                      <td className=\"py-4 px-6 text-sm text-muted-foreground\">\n                        {new Date(rfq.createdAt!).toLocaleDateString()}\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-rfq-${rfq.id}`}>\n                          View Details\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6692},"client/src/pages/buyer/offers.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Clock, Shield, Award, CreditCard, ExternalLink, Calendar, DollarSign } from 'lucide-react';\nimport { authenticatedApiClient } from '@/lib/supabase';\nimport { formatCurrency } from '@/lib/utils';\nimport { useToast } from '@/hooks/use-toast';\nimport { CuratedOffer } from '@shared/schema';\nimport { useLocation } from 'wouter';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\n\n// Interface for offer structure used in the component\ninterface OfferData {\n  id: string;\n  rfqId: string;\n  rfqTitle: string;\n  type: string;\n  price: number;\n  unitPrice?: number;\n  quantity?: number;\n  leadTime: number;\n  warranty: string;\n  quality: string;\n  features: string[];\n  recommended: boolean;\n}\n\nexport default function BuyerOffers() {\n  const [selectedOffer, setSelectedOffer] = useState<OfferData | null>(null);\n  const [showPaymentDialog, setShowPaymentDialog] = useState(false);\n  const [paymentRef, setPaymentRef] = useState('');\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  // Fetch actual offers from API\n  const { data: offers = [], isLoading } = useQuery({\n    queryKey: ['/api/protected/buyer/offers'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/buyer/offers'),\n  });\n\n  // Transform API offers to match component interface\n  const displayOffers = offers.map((offer: any) => ({\n    id: offer.id,\n    rfqId: offer.rfqId,\n    rfqTitle: offer.rfq?.title || offer.rfq?.description || 'RFQ',\n    type: offer.title || 'Standard',\n    price: parseFloat(offer.totalPrice || '0'), // Use totalPrice for total order value\n    unitPrice: parseFloat(offer.unitPrice || offer.details?.unitPrice || '0'), // Keep unit price separate\n    quantity: offer.quantity || 100,\n    leadTime: offer.details?.leadTime || offer.details?.leadTimeDays || 14,\n    warranty: offer.details?.warranty || '6 months',\n    quality: offer.details?.qualityAssurance || 'Standard quality check',\n    features: offer.details?.features || ['Quality Assured', 'On-time Delivery'],\n    recommended: false,\n    paymentLink: offer.paymentLink, // Include payment link from admin\n  }));\n\n  // Using shared formatCurrency utility from @/lib/utils\n\n  const calculatePaymentBreakdown = (totalPrice: number, advancePercentage: number = 30) => {\n    const advanceAmount = Math.round(totalPrice * (advancePercentage / 100));\n    const finalAmount = totalPrice - advanceAmount;\n    return { advanceAmount, finalAmount, totalPrice };\n  };\n\n  const handleAcceptOffer = (offer: OfferData) => {\n    setSelectedOffer(offer);\n    setShowPaymentDialog(true);\n  };\n\n  const handlePaymentAction = async (offer: OfferData, paymentType: 'advance' | 'final') => {\n    try {\n      // Get the payment link from the offer\n      const paymentLink = (offer as any).paymentLink;\n      \n      if (paymentLink) {\n        // Open payment link in new tab\n        window.open(paymentLink, '_blank');\n        toast({\n          title: \"Payment Link Opened\",\n          description: \"Complete payment and then mark as paid below.\",\n        });\n      } else {\n        toast({\n          title: \"No Payment Link\",\n          description: \"Contact admin for payment instructions.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: \"Unable to open payment link. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleMarkAsPaid = async (offer: OfferData, transactionRef: string) => {\n    try {\n      // Calculate 30% advance payment\n      const advanceAmount = Math.round(offer.price * 0.30);\n      \n      const transactionData = {\n        curatedOfferId: offer.id,\n        status: 'completed',\n        transactionRef: transactionRef || `EXTERNAL-${Date.now()}`,\n        amount: advanceAmount.toString(), // Convert to string as expected by schema\n        netAmount: advanceAmount.toString(), // Net amount is same as amount for advance payment\n        transactionType: 'advance_payment' as const, // Required field\n        payerId: '', // Will be filled by backend with current user ID\n        paymentMethod: 'external'\n      };\n      \n      // Use apiRequest following project conventions\n      await apiRequest('POST', '/api/protected/payment-transactions', transactionData);\n      \n      // Invalidate relevant caches\n      await queryClient.invalidateQueries({ queryKey: ['/api/protected/buyer/offers'] });\n      await queryClient.invalidateQueries({ queryKey: ['/api/protected/orders'] });\n      \n      toast({\n        title: \"Payment Recorded!\",\n        description: \"Your payment has been marked as completed. Order will be created automatically.\",\n      });\n      \n      setShowPaymentDialog(false);\n      \n      // Navigate immediately after successful payment\n      setLocation('/buyer/orders');\n      \n    } catch (error) {\n      console.error('Payment recording error:', error);\n      toast({\n        title: \"Failed to Record Payment\",\n        description: \"Unable to record payment status. Please contact support.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Offers</h1>\n        <p className=\"text-muted-foreground mt-2\">Review and accept offers from the marketplace</p>\n      </div>\n\n      <div className=\"space-y-6\">\n        {displayOffers.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <p className=\"text-muted-foreground\">No offers available at the moment.</p>\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                Offers will appear here once admins publish them for your RFQs.\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          displayOffers.map((offer: OfferData) => (\n            <Card key={offer.rfqId}>\n              <CardHeader>\n                <CardTitle>{offer.rfqTitle}</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Received curated offers • Review and accept to proceed\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                  <Card \n                    key={offer.id} \n                    className={`relative ${offer.recommended ? 'border-primary shadow-lg' : ''}`}\n                    data-testid={`card-offer-${offer.id}`}\n                  >\n                    {offer.recommended && (\n                      <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                        <Badge className=\"bg-green-100 text-green-800\">\n                          <Award className=\"h-3 w-3 mr-1\" />\n                          Best Value\n                        </Badge>\n                      </div>\n                    )}\n                    \n                    <CardHeader className=\"text-center\">\n                      <CardTitle className=\"text-lg\">{offer.type} Offer</CardTitle>\n                      <div className=\"text-2xl font-bold\">{formatCurrency(offer.unitPrice || offer.price / (offer.quantity || 100))}</div>\n                      <p className=\"text-sm text-muted-foreground\">per piece</p>\n                    </CardHeader>\n                    \n                    <CardContent className=\"space-y-4\">\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"text-sm\">Lead Time: {offer.leadTime} days</span>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <Shield className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"text-sm\">Warranty: {offer.warranty}</span>\n                        </div>\n                        \n                        <div>\n                          <p className=\"text-sm font-medium\">Quality Assurance:</p>\n                          <p className=\"text-sm text-muted-foreground\">{offer.quality}</p>\n                        </div>\n                        \n                        <div>\n                          <p className=\"text-sm font-medium mb-2\">Features:</p>\n                          <div className=\"flex flex-wrap gap-1\">\n                            {offer.features.map((feature: string, index: number) => (\n                              <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                                {feature}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      {/* Payment Information */}\n                      <div className=\"bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg border border-blue-200 dark:border-blue-800 mb-4\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <CreditCard className=\"h-4 w-4 text-blue-600\" />\n                          <h4 className=\"font-medium text-blue-900 dark:text-blue-100\">Payment Structure</h4>\n                        </div>\n                        <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                          <div>\n                            <p className=\"text-blue-700 dark:text-blue-300\">Advance (30%)</p>\n                            <p className=\"font-bold text-blue-900 dark:text-blue-100\">\n                              {formatCurrency(calculatePaymentBreakdown(offer.price).advanceAmount)}\n                            </p>\n                          </div>\n                          <div>\n                            <p className=\"text-blue-700 dark:text-blue-300\">Final (70%)</p>\n                            <p className=\"font-bold text-blue-900 dark:text-blue-100\">\n                              {formatCurrency(calculatePaymentBreakdown(offer.price).finalAmount)}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"mt-2 pt-2 border-t border-blue-300 dark:border-blue-700\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-blue-700 dark:text-blue-300 text-sm\">Total Order Value</span>\n                            <span className=\"font-bold text-blue-900 dark:text-blue-100\">\n                              {formatCurrency(offer.price)}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"pt-4 border-t\">\n                        <p className=\"text-xs text-muted-foreground mb-3 text-center\">\n                          Fulfilled by Logicwerk Marketplace\n                        </p>\n                        <Button \n                          className=\"w-full\"\n                          variant={offer.recommended ? \"default\" : \"outline\"}\n                          onClick={() => handleAcceptOffer(offer)}\n                          data-testid={`button-accept-offer-${offer.id}`}\n                        >\n                          <CreditCard className=\"h-4 w-4 mr-2\" />\n                          Accept Offer & Pay\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Payment Dialog */}\n      <Dialog open={showPaymentDialog} onOpenChange={setShowPaymentDialog}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Complete Payment</DialogTitle>\n          </DialogHeader>\n          \n          {selectedOffer && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-muted/50 p-4 rounded-lg\">\n                <h3 className=\"font-medium mb-2\">{selectedOffer.type} Offer</h3>\n                <p className=\"text-sm text-muted-foreground mb-2\">\n                  RFQ: {selectedOffer.rfqTitle}\n                </p>\n                <div className=\"text-2xl font-bold\">{formatCurrency(selectedOffer.price)}</div>\n                <p className=\"text-sm text-muted-foreground\">Total Order Value</p>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div>\n                    <p className=\"font-medium\">Advance Payment (30%)</p>\n                    <p className=\"text-sm text-muted-foreground\">Required to start production</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-bold\">{formatCurrency(calculatePaymentBreakdown(selectedOffer.price).advanceAmount)}</p>\n                    <Button \n                      size=\"sm\" \n                      onClick={() => handlePaymentAction(selectedOffer, 'advance')}\n                      data-testid=\"button-pay-advance\"\n                    >\n                      <ExternalLink className=\"h-3 w-3 mr-1\" />\n                      Pay Now\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between p-3 border rounded-lg bg-muted/30\">\n                  <div>\n                    <p className=\"font-medium text-muted-foreground\">Final Payment (70%)</p>\n                    <p className=\"text-sm text-muted-foreground\">Due on delivery</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-bold text-muted-foreground\">{formatCurrency(calculatePaymentBreakdown(selectedOffer.price).finalAmount)}</p>\n                    <p className=\"text-xs text-muted-foreground\">Pay later</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-yellow-50 dark:bg-yellow-900/20 p-3 rounded-lg border border-yellow-200 dark:border-yellow-800\">\n                <div className=\"flex items-center space-x-2\">\n                  <Calendar className=\"h-4 w-4 text-yellow-600\" />\n                  <p className=\"text-sm font-medium text-yellow-800 dark:text-yellow-200\">\n                    Payment deadline: 7 days from acceptance\n                  </p>\n                </div>\n              </div>\n\n              {/* Mark as Paid Section */}\n              <div className=\"border-t pt-3 mt-4\">\n                <p className=\"text-sm text-muted-foreground mb-2\">After completing payment externally:</p>\n                <div className=\"space-y-2\">\n                  <Input \n                    placeholder=\"Enter transaction reference (optional)\"\n                    value={paymentRef}\n                    onChange={(e) => setPaymentRef(e.target.value)}\n                    data-testid=\"input-transaction-ref\"\n                  />\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    className=\"w-full\"\n                    onClick={() => selectedOffer && handleMarkAsPaid(selectedOffer, paymentRef)}\n                    data-testid=\"button-mark-paid\"\n                  >\n                    Mark as Paid\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"flex space-x-2\">\n                <Button \n                  variant=\"outline\" \n                  className=\"flex-1\"\n                  onClick={() => setShowPaymentDialog(false)}\n                  data-testid=\"button-cancel-payment\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  className=\"flex-1\"\n                  onClick={() => handlePaymentAction(selectedOffer, 'advance')}\n                  data-testid=\"button-proceed-payment\"\n                >\n                  <CreditCard className=\"h-4 w-4 mr-2\" />\n                  Proceed to Pay\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":16706},"client/src/pages/buyer/orders.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { authenticatedApiClient } from '@/lib/supabase';\nimport { formatCurrency } from '@/lib/utils';\nimport { ORDER_STATUS_COLORS } from '@/lib/constants';\nimport { ShoppingCart, Download, Eye, CreditCard, Clock, CheckCircle, AlertCircle, ExternalLink, Package, User, Calendar } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { Order, PaymentTransaction } from '@shared/schema';\n\nexport default function BuyerOrders() {\n  const { toast } = useToast();\n  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);\n  const [showOrderDetails, setShowOrderDetails] = useState(false);\n  \n  const { data: orders = [], isLoading } = useQuery({\n    queryKey: ['/api/protected/orders'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/orders'),\n  });\n\n  // Fetch payment transactions for orders\n  const { data: paymentTransactions = [] } = useQuery({\n    queryKey: ['/api/protected/buyer/payment-transactions'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/buyer/payment-transactions'),\n  });\n\n  const getPaymentStatus = (orderId: string) => {\n    const orderTransactions = (paymentTransactions as PaymentTransaction[]).filter((tx: PaymentTransaction) => tx.orderId === orderId);\n    const completedPayments = orderTransactions.filter((tx: PaymentTransaction) => tx.status === 'completed');\n    const pendingPayments = orderTransactions.filter((tx: PaymentTransaction) => tx.status === 'pending');\n    \n    if (completedPayments.length === 0) return 'not_started';\n    if (pendingPayments.length > 0) return 'partial';\n    return 'completed';\n  };\n\n  const getPaymentStatusBadge = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <Badge className=\"bg-green-100 text-green-800\"><CheckCircle className=\"h-3 w-3 mr-1\" />Paid</Badge>;\n      case 'partial':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\"><Clock className=\"h-3 w-3 mr-1\" />Partial</Badge>;\n      case 'not_started':\n        return <Badge className=\"bg-red-100 text-red-800\"><AlertCircle className=\"h-3 w-3 mr-1\" />Pending</Badge>;\n      default:\n        return <Badge variant=\"secondary\">Unknown</Badge>;\n    }\n  };\n\n  const getPaymentActions = (order: Order) => {\n    const paymentStatus = getPaymentStatus(order.id);\n    const orderTransactions = (paymentTransactions as PaymentTransaction[]).filter((tx: PaymentTransaction) => tx.orderId === order.id);\n    const pendingTransaction = orderTransactions.find((tx: PaymentTransaction) => tx.status === 'pending');\n    \n    if (paymentStatus === 'not_started' || pendingTransaction) {\n      return (\n        <Button \n          size=\"sm\" \n          variant=\"default\"\n          onClick={() => handlePaymentAction(order, pendingTransaction)}\n          data-testid={`button-pay-order-${order.id}`}\n        >\n          <CreditCard className=\"h-4 w-4 mr-1\" />\n          Pay Now\n        </Button>\n      );\n    }\n    \n    return null;\n  };\n\n  const handlePaymentAction = (order: Order, transaction: PaymentTransaction | undefined) => {\n    toast({\n      title: \"Payment Initiated\",\n      description: `Redirecting to payment gateway for order ${order.orderNumber}`,\n    });\n    // In a real app, this would redirect to Razorpay or other payment gateway\n  };\n\n  // Using shared formatCurrency utility from @/lib/utils\n\n  const handleViewOrder = (order: Order) => {\n    setSelectedOrder(order);\n    setShowOrderDetails(true);\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Orders</h1>\n        <p className=\"text-muted-foreground mt-2\">Track your orders and view delivery status</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>All Orders</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8 text-muted-foreground\">Loading orders...</div>\n          ) : orders.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <ShoppingCart className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-foreground mb-2\">No orders yet</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Accept an offer to create your first order\n              </p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Order Number</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">RFQ</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Amount</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Order Status</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Payment Status</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Created</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {(orders as Order[]).map((order: Order) => (\n                    <tr key={order.id} data-testid={`row-order-${order.id}`}>\n                      <td className=\"py-4 px-6 text-sm font-mono\" data-testid={`text-order-number-${order.id}`}>\n                        {order.orderNumber}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm\" data-testid={`text-order-rfq-${order.id}`}>\n                        {order.rfqId}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm font-medium\" data-testid={`text-order-amount-${order.id}`}>\n                        {order.totalAmount ? formatCurrency(order.totalAmount) : 'N/A'}\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <Badge className={ORDER_STATUS_COLORS[(order.status as keyof typeof ORDER_STATUS_COLORS) || 'created'] || ORDER_STATUS_COLORS.created}>\n                          {(order.status || 'created').replace('_', ' ').toUpperCase()}\n                        </Badge>\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        {getPaymentStatusBadge(getPaymentStatus(order.id))}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm text-muted-foreground\">\n                        {order.createdAt ? new Date(order.createdAt).toLocaleDateString() : 'N/A'}\n                      </td>\n                      <td className=\"py-4 px-6 space-x-2\">\n                        {getPaymentActions(order)}\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          onClick={() => handleViewOrder(order)}\n                          data-testid={`button-view-order-${order.id}`}\n                        >\n                          <Eye className=\"h-4 w-4 mr-1\" />\n                          View\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\" data-testid={`button-download-invoice-${order.id}`}>\n                          <Download className=\"h-4 w-4 mr-1\" />\n                          Invoice\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Order Details Modal */}\n      <Dialog open={showOrderDetails} onOpenChange={setShowOrderDetails}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Package className=\"h-5 w-5\" />\n              Order Details - {selectedOrder?.orderNumber}\n            </DialogTitle>\n          </DialogHeader>\n          \n          {selectedOrder && (\n            <div className=\"space-y-6\">\n              {/* Order Overview */}\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-semibold text-sm text-muted-foreground uppercase tracking-wide\">Order Information</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Order Number:</span>\n                      <span className=\"text-sm font-mono\">{selectedOrder.orderNumber}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">RFQ ID:</span>\n                      <span className=\"text-sm font-mono\">{selectedOrder.rfqId}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Total Amount:</span>\n                      <span className=\"text-sm font-semibold\">{selectedOrder.totalAmount ? formatCurrency(selectedOrder.totalAmount) : 'N/A'}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Status:</span>\n                      <Badge className={ORDER_STATUS_COLORS[(selectedOrder.status as keyof typeof ORDER_STATUS_COLORS) || 'created']}>\n                        {(selectedOrder.status || 'created').replace('_', ' ').toUpperCase()}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <h4 className=\"font-semibold text-sm text-muted-foreground uppercase tracking-wide\">Timeline</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Created:</span>\n                      <span className=\"text-sm\">{selectedOrder.createdAt ? new Date(selectedOrder.createdAt).toLocaleDateString() : 'N/A'}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Updated:</span>\n                      <span className=\"text-sm\">{selectedOrder.updatedAt ? new Date(selectedOrder.updatedAt).toLocaleDateString() : 'N/A'}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Deposit Paid:</span>\n                      <span className=\"text-sm\">\n                        {selectedOrder.depositPaid ? (\n                          <Badge className=\"bg-green-100 text-green-800\">Yes</Badge>\n                        ) : (\n                          <Badge className=\"bg-red-100 text-red-800\">No</Badge>\n                        )}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Payment Status */}\n              <div className=\"border-t pt-6\">\n                <h4 className=\"font-semibold text-sm text-muted-foreground uppercase tracking-wide mb-3\">Payment Status</h4>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Current Payment Status:</span>\n                  {getPaymentStatusBadge(getPaymentStatus(selectedOrder.id))}\n                </div>\n                {selectedOrder.escrowTxRef && (\n                  <div className=\"flex items-center justify-between mt-2\">\n                    <span className=\"text-sm text-muted-foreground\">Transaction Reference:</span>\n                    <span className=\"text-sm font-mono\">{selectedOrder.escrowTxRef}</span>\n                  </div>\n                )}\n              </div>\n\n              {/* Actions */}\n              <div className=\"border-t pt-6 flex gap-3\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowOrderDetails(false)}\n                  className=\"flex-1\"\n                >\n                  Close\n                </Button>\n                <Button variant=\"ghost\" className=\"flex items-center gap-2\">\n                  <Download className=\"h-4 w-4\" />\n                  Download Invoice\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":13190},"client/src/pages/buyer/rfqs.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Plus, FileText } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { authenticatedApiClient } from '@/lib/supabase';\nimport { RFQ } from '@shared/schema';\nimport { RFQ_STATUS_COLORS } from '@/lib/constants';\nimport { useLocation } from 'wouter';\n\nexport default function BuyerRFQs() {\n  const [, setLocation] = useLocation();\n\n  const { data: rfqs = [], isLoading } = useQuery({\n    queryKey: ['/api/protected/rfqs'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/rfqs') as Promise<RFQ[]>,\n  });\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"flex justify-between items-center mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">My RFQs</h1>\n          <p className=\"text-muted-foreground mt-2\">Track and manage your requests for quotation</p>\n        </div>\n        <Button onClick={() => setLocation('/buyer/create-rfq')} data-testid=\"button-create-rfq\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create RFQ\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>All RFQs</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8 text-muted-foreground\">Loading RFQs...</div>\n          ) : rfqs.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <FileText className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-foreground mb-2\">No RFQs yet</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Create your first RFQ to start getting quotes from verified suppliers\n              </p>\n              <Button onClick={() => setLocation('/buyer/create-rfq')} data-testid=\"button-create-first-rfq\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Your First RFQ\n              </Button>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">RFQ Number</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Title</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Status</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Created</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {rfqs.map((rfq) => (\n                    <tr key={rfq.id} data-testid={`row-rfq-${rfq.id}`}>\n                      <td className=\"py-4 px-6 text-sm font-mono\" data-testid={`text-rfq-number-${rfq.id}`}>\n                        {rfq.rfqNumber}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm font-medium\" data-testid={`text-rfq-title-${rfq.id}`}>\n                        {rfq.title}\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${RFQ_STATUS_COLORS[rfq.status || 'draft'] || RFQ_STATUS_COLORS.draft}`}>\n                          {(rfq.status || 'draft').replace('_', ' ').toUpperCase()}\n                        </span>\n                      </td>\n                      <td className=\"py-4 px-6 text-sm text-muted-foreground\">\n                        {new Date(rfq.createdAt!).toLocaleDateString()}\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          onClick={() => setLocation(`/buyer/rfq/${rfq.id}`)}\n                          data-testid={`button-view-rfq-${rfq.id}`}\n                        >\n                          View Details\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4523},"client/src/pages/supplier/dashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { FileText, Quote, ShoppingCart, DollarSign, Star, Check, AlertCircle, Upload, Building2, Award, CheckCircle, XCircle, Clock } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { authenticatedApiClient } from '@/lib/supabase';\nimport { useLocation } from 'wouter';\n\nexport default function SupplierDashboard() {\n  const [, setLocation] = useLocation();\n\n  const { data: invites = [], isLoading: invitesLoading } = useQuery({\n    queryKey: ['/api/protected/suppliers/invites'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/suppliers/invites'),\n  });\n\n  const { data: quotes = [] } = useQuery({\n    queryKey: ['/api/protected/quotes'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/quotes'),\n  });\n\n  const { data: orders = [] } = useQuery({\n    queryKey: ['/api/protected/orders'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/orders'),\n  });\n\n  const { data: profileCompletion, isLoading: profileLoading } = useQuery({\n    queryKey: ['/api/protected/suppliers/profile-completion'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/suppliers/profile-completion'),\n  });\n\n  const stats = {\n    pendingRFQs: invites.filter((invite: any) => invite.invite.status === 'invited').length,\n    submittedQuotes: quotes.length,\n    activeOrders: orders.filter((order: any) => ['production', 'inspection', 'shipped'].includes(order.status)).length,\n    monthlyPayout: 245000, // This would come from API\n  };\n\n  return (\n    <div className=\"p-8\">\n      {/* Dashboard Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Supplier Dashboard</h1>\n        <p className=\"text-muted-foreground mt-2\">Manage your quotes and track orders</p>\n      </div>\n\n      {/* Profile Completion Status */}\n      {profileLoading ? (\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-muted rounded-full flex items-center justify-center\">\n                <Clock className=\"h-6 w-6 text-muted-foreground\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-foreground\">Loading Profile Status...</h3>\n                <p className=\"text-muted-foreground text-sm\">Checking profile completion</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ) : profileCompletion?.shouldShowPrompt ? (\n        <Card className=\"mb-8 border-orange-200 bg-orange-50 dark:bg-orange-950 dark:border-orange-800\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex items-start space-x-4 flex-1\">\n                <div className=\"w-12 h-12 bg-orange-100 dark:bg-orange-900 rounded-full flex items-center justify-center\">\n                  <AlertCircle className=\"h-6 w-6 text-orange-600 dark:text-orange-400\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">Complete Your Profile for Verification</h3>\n                  <p className=\"text-muted-foreground text-sm mb-4\">\n                    Your profile is {profileCompletion.completionPercentage}% complete. Complete the remaining steps to get verified and start receiving RFQ invitations.\n                  </p>\n                  \n                  {/* Progress Bar */}\n                  <div className=\"mb-4\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-sm font-medium text-foreground\">Profile Progress</span>\n                      <span className=\"text-sm text-muted-foreground\">{profileCompletion.completionPercentage}%</span>\n                    </div>\n                    <Progress value={profileCompletion.completionPercentage} className=\"h-2\" />\n                  </div>\n\n                  {/* Completion Steps */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 mb-4\">\n                    <div className={`flex items-center space-x-2 text-sm ${\n                      profileCompletion.steps.companyInfo.completed \n                        ? 'text-green-600 dark:text-green-400' \n                        : 'text-muted-foreground'\n                    }`}>\n                      {profileCompletion.steps.companyInfo.completed ? (\n                        <CheckCircle className=\"h-4 w-4\" />\n                      ) : (\n                        <XCircle className=\"h-4 w-4\" />\n                      )}\n                      <Building2 className=\"h-4 w-4\" />\n                      <span>{profileCompletion.steps.companyInfo.label}</span>\n                    </div>\n                    \n                    <div className={`flex items-center space-x-2 text-sm ${\n                      profileCompletion.steps.supplierProfile.completed \n                        ? 'text-green-600 dark:text-green-400' \n                        : 'text-muted-foreground'\n                    }`}>\n                      {profileCompletion.steps.supplierProfile.completed ? (\n                        <CheckCircle className=\"h-4 w-4\" />\n                      ) : (\n                        <XCircle className=\"h-4 w-4\" />\n                      )}\n                      <Award className=\"h-4 w-4\" />\n                      <span>{profileCompletion.steps.supplierProfile.label}</span>\n                    </div>\n                    \n                    <div className={`flex items-center space-x-2 text-sm ${\n                      profileCompletion.steps.documentUpload.completed \n                        ? 'text-green-600 dark:text-green-400' \n                        : 'text-muted-foreground'\n                    }`}>\n                      {profileCompletion.steps.documentUpload.completed ? (\n                        <CheckCircle className=\"h-4 w-4\" />\n                      ) : (\n                        <XCircle className=\"h-4 w-4\" />\n                      )}\n                      <Upload className=\"h-4 w-4\" />\n                      <span>{profileCompletion.steps.documentUpload.label}</span>\n                    </div>\n                    \n                    <div className={`flex items-center space-x-2 text-sm ${\n                      profileCompletion.steps.verification.completed \n                        ? 'text-green-600 dark:text-green-400' \n                        : 'text-yellow-600 dark:text-yellow-400'\n                    }`}>\n                      {profileCompletion.steps.verification.completed ? (\n                        <CheckCircle className=\"h-4 w-4\" />\n                      ) : (\n                        <Clock className=\"h-4 w-4\" />\n                      )}\n                      <Star className=\"h-4 w-4\" />\n                      <span>{profileCompletion.steps.verification.label}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex flex-col space-y-2 ml-4\">\n                <Button \n                  onClick={() => setLocation('/supplier/onboarding')}\n                  data-testid=\"button-complete-profile\"\n                  className=\"whitespace-nowrap\"\n                >\n                  Complete Profile\n                </Button>\n                {profileCompletion.verificationStatus === 'unverified' && profileCompletion.profileComplete && (\n                  <p className=\"text-xs text-center text-muted-foreground\">Pending verification</p>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card className=\"mb-8 border-green-200 bg-green-50 dark:bg-green-950 dark:border-green-800\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center\">\n                  <Check className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-foreground\">Profile Verified</h3>\n                  <p className=\"text-muted-foreground text-sm\">\n                    {profileCompletion?.verificationStatus === 'gold' && 'Gold tier supplier - All documents verified'}\n                    {profileCompletion?.verificationStatus === 'silver' && 'Silver tier supplier - Profile verified'}\n                    {profileCompletion?.verificationStatus === 'bronze' && 'Bronze tier supplier - Basic verification'}\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Badge className={\n                  profileCompletion?.verificationStatus === 'gold' ? 'bg-yellow-100 text-yellow-800' :\n                  profileCompletion?.verificationStatus === 'silver' ? 'bg-gray-100 text-gray-800' :\n                  'bg-orange-100 text-orange-800'\n                }>\n                  <Star className=\"h-3 w-3 mr-1\" />\n                  {profileCompletion?.verificationStatus?.charAt(0).toUpperCase() + profileCompletion?.verificationStatus?.slice(1)}\n                </Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm\">Pending RFQs</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-pending-rfqs\">\n                  {stats.pendingRFQs}\n                </p>\n              </div>\n              <FileText className=\"h-8 w-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm\">Submitted Quotes</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-submitted-quotes\">\n                  {stats.submittedQuotes}\n                </p>\n              </div>\n              <Quote className=\"h-8 w-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm\">Active Orders</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-active-orders\">\n                  {stats.activeOrders}\n                </p>\n              </div>\n              <ShoppingCart className=\"h-8 w-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm\">This Month Payout</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-monthly-payout\">\n                  ₹{stats.monthlyPayout.toLocaleString()}\n                </p>\n              </div>\n              <DollarSign className=\"h-8 w-8 text-purple-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent RFQs */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-xl\">Invited RFQs</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {invitesLoading ? (\n            <div className=\"text-center py-8 text-muted-foreground\">Loading RFQs...</div>\n          ) : invites.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">No RFQ invitations yet</h3>\n              <p className=\"text-muted-foreground\">Invitations will appear here when admins match you to RFQs</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">RFQ ID</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Process</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Quantity</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Deadline</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Status</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {invites.slice(0, 5).map((invite: any) => (\n                    <tr key={invite.invite.id} data-testid={`row-invite-${invite.invite.id}`}>\n                      <td className=\"py-4 px-6 text-sm\" data-testid={`text-rfq-number-${invite.invite.id}`}>\n                        {invite.rfq.rfqNumber}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm\">\n                        {invite.rfq.details?.sku?.processName || 'N/A'}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm\">\n                        {invite.rfq.details?.items?.[0]?.quantity || 'N/A'} {invite.rfq.details?.items?.[0]?.unit || ''}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm\">\n                        {invite.invite.responseDeadline ? new Date(invite.invite.responseDeadline).toLocaleDateString() : 'N/A'}\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <Badge\n                          className={\n                            invite.invite.status === 'invited'\n                              ? 'bg-red-100 text-red-800'\n                              : invite.invite.status === 'responded'\n                              ? 'bg-green-100 text-green-800'\n                              : 'bg-gray-100 text-gray-800'\n                          }\n                        >\n                          {invite.invite.status === 'invited' ? 'Quote Pending' : \n                           invite.invite.status === 'responded' ? 'Quote Submitted' : \n                           'Declined'}\n                        </Badge>\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        {invite.invite.status === 'invited' ? (\n                          <Button\n                            size=\"sm\"\n                            onClick={() => setLocation('/supplier/rfqs')}\n                            data-testid={`button-submit-quote-${invite.invite.id}`}\n                          >\n                            Submit Quote\n                          </Button>\n                        ) : (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => setLocation('/supplier/quotes')}\n                            data-testid={`button-view-quote-${invite.invite.id}`}\n                          >\n                            View Quote\n                          </Button>\n                        )}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":16326},"client/src/pages/supplier/onboarding.tsx":{"content":"import { useState, useRef } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useMutation, useQueryClient, useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { useToast } from '@/hooks/use-toast';\nimport { authenticatedApiClient } from '@/lib/supabase';\nimport { Upload, Building2, FileCheck, Award } from 'lucide-react';\n\nconst companySchema = z.object({\n  name: z.string().min(1, 'Company name is required'),\n  gstin: z.string().optional(),\n  pan: z.string().optional(),\n  city: z.string().min(1, 'City is required'),\n  state: z.string().min(1, 'State is required'),\n  country: z.string().default('India'),\n  address: z.object({\n    street: z.string().min(1, 'Street address is required'),\n    pincode: z.string().min(6, 'Valid pincode is required'),\n  }),\n});\n\nconst profileSchema = z.object({\n  capabilities: z.array(z.string()).min(1, 'Select at least one capability'),\n  machines: z.array(z.string()),\n  moqDefault: z.preprocess(\n    (val) => {\n      if (typeof val === 'string') {\n        const parsed = parseInt(val, 10);\n        return isNaN(parsed) ? undefined : parsed;\n      }\n      return val;\n    },\n    z.number().min(1, 'Minimum MOQ is required')\n  ),\n  certifications: z.array(z.string()),\n});\n\ntype CompanyForm = z.infer<typeof companySchema>;\ntype ProfileForm = z.infer<typeof profileSchema>;\n\nexport default function SupplierOnboarding() {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [companyId, setCompanyId] = useState<string | null>(null);\n  const [uploadedDocs, setUploadedDocs] = useState<{[key: string]: string}>({});\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  // File upload refs\n  const registrationRef = useRef<HTMLInputElement>(null);\n  const gstRef = useRef<HTMLInputElement>(null);\n  const bankRef = useRef<HTMLInputElement>(null);\n  const isoRef = useRef<HTMLInputElement>(null);\n  const samplesRef = useRef<HTMLInputElement>(null);\n  const machinesRef = useRef<HTMLInputElement>(null);\n\n  const companyForm = useForm<CompanyForm>({\n    resolver: zodResolver(companySchema),\n    defaultValues: {\n      country: 'India',\n      address: { street: '', pincode: '' },\n    },\n  });\n\n  const profileForm = useForm<ProfileForm>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      capabilities: [],\n      machines: [],\n      certifications: [],\n    },\n  });\n\n  const createCompanyMutation = useMutation({\n    mutationFn: (data: CompanyForm) =>\n      authenticatedApiClient.post('/api/protected/companies', data),\n    onSuccess: (company) => {\n      setCompanyId(company.id);\n      setCurrentStep(2);\n      toast({\n        title: \"Company information saved\",\n        description: \"Please complete your supplier profile.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to save company information\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createProfileMutation = useMutation({\n    mutationFn: (data: ProfileForm) =>\n      authenticatedApiClient.post('/api/protected/suppliers/profile', data),\n    onSuccess: () => {\n      setCurrentStep(3);\n      toast({\n        title: \"Profile created successfully\",\n        description: \"Please upload your documents for verification.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to create profile\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const uploadDocumentMutation = useMutation({\n    mutationFn: (data: { docType: string; fileName: string; fileData: string; metadata: any }) =>\n      authenticatedApiClient.post('/api/protected/documents/upload', data),\n    onSuccess: (data, variables) => {\n      setUploadedDocs(prev => ({ ...prev, [variables.docType]: variables.fileName }));\n      toast({\n        title: \"Document uploaded successfully\",\n        description: `${variables.fileName} has been uploaded.`,\n      });\n    },\n    onError: (error: any, variables) => {\n      toast({\n        title: \"Failed to upload document\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCompanySubmit = (data: CompanyForm) => {\n    createCompanyMutation.mutate(data);\n  };\n\n  const handleProfileSubmit = (data: ProfileForm) => {\n    createProfileMutation.mutate(data);\n  };\n\n  const handleFileUpload = async (docType: string, inputRef: React.RefObject<HTMLInputElement>) => {\n    const input = inputRef.current;\n    if (!input) return;\n\n    input.click();\n    \n    input.onchange = async (e) => {\n      const file = (e.target as HTMLInputElement).files?.[0];\n      if (!file) return;\n\n      // Validate file type first\n      const allowedTypes = ['application/pdf', 'image/jpeg', 'image/png'];\n      if (!allowedTypes.includes(file.type)) {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please select a PDF, JPEG, or PNG file.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Validate file size based on type (10MB for images, 5MB for documents)\n      const isImage = file.type.startsWith('image/');\n      const maxSize = isImage ? 10 * 1024 * 1024 : 5 * 1024 * 1024;\n      \n      if (file.size > maxSize) {\n        const maxSizeMB = maxSize / (1024 * 1024);\n        toast({\n          title: \"File too large\",\n          description: `Please select a file smaller than ${maxSizeMB}MB for ${isImage ? 'images' : 'documents'}.`,\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      try {\n        // Convert file to base64 for API\n        const reader = new FileReader();\n        reader.onload = () => {\n          const base64 = reader.result as string;\n          uploadDocumentMutation.mutate({\n            docType,\n            fileName: file.name,\n            fileData: base64,\n            metadata: {\n              fileType: file.type,\n              fileSize: file.size,\n            },\n          });\n        };\n        reader.readAsDataURL(file);\n      } catch (error) {\n        toast({\n          title: \"Upload failed\",\n          description: \"Failed to process the file.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n  };\n\n  const handleCompleteOnboarding = () => {\n    toast({\n      title: \"Onboarding completed!\",\n      description: \"Your profile will be reviewed by our team within 2-3 business days.\",\n    });\n    // Navigate to dashboard using wouter to maintain SPA behavior\n    setLocation('/supplier/dashboard');\n  };\n\n  const capabilities = [\n    'CNC Machining',\n    'Sheet Metal Fabrication',\n    'Injection Molding',\n    'Die Casting',\n    'Forging',\n    'Extrusion',\n    '3D Printing',\n    'PCB Assembly',\n    'Cable Harness',\n    'Packaging',\n    'Textile Manufacturing',\n    'Leather Goods',\n    'Construction',\n  ];\n\n  const certifications = [\n    'ISO 9001:2015',\n    'ISO 14001:2015',\n    'ISO 45001:2018',\n    'AS9100',\n    'TS 16949',\n    'FDA Approved',\n    'CE Marking',\n    'RoHS Compliance',\n    'REACH Compliance',\n  ];\n\n  const steps = [\n    { number: 1, title: 'Company Information', icon: Building2 },\n    { number: 2, title: 'Capabilities & Profile', icon: Award },\n    { number: 3, title: 'Document Upload', icon: FileCheck },\n  ];\n\n  return (\n    <div className=\"p-8 max-w-4xl mx-auto\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Supplier Onboarding</h1>\n        <p className=\"text-muted-foreground mt-2\">Complete your profile to start receiving RFQ invitations</p>\n      </div>\n\n      {/* Step Indicator */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-center space-x-8\">\n          {steps.map((step, index) => (\n            <div key={step.number} className=\"flex items-center space-x-2\">\n              <div\n                className={`w-12 h-12 rounded-full flex items-center justify-center ${\n                  currentStep >= step.number\n                    ? 'bg-primary text-primary-foreground'\n                    : 'bg-muted text-muted-foreground'\n                }`}\n              >\n                <step.icon className=\"h-6 w-6\" />\n              </div>\n              <div className=\"text-center\">\n                <p className={`text-sm font-medium ${currentStep >= step.number ? 'text-foreground' : 'text-muted-foreground'}`}>\n                  {step.title}\n                </p>\n              </div>\n              {index < steps.length - 1 && <div className=\"w-16 h-px bg-border\"></div>}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Step 1: Company Information */}\n      {currentStep === 1 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Company Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...companyForm}>\n              <form onSubmit={companyForm.handleSubmit(handleCompanySubmit)} className=\"space-y-6\">\n                <FormField\n                  control={companyForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Company Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter company name\" {...field} data-testid=\"input-company-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={companyForm.control}\n                    name=\"gstin\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>GSTIN (Optional)</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter GSTIN\" {...field} data-testid=\"input-gstin\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={companyForm.control}\n                    name=\"pan\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>PAN (Optional)</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter PAN\" {...field} data-testid=\"input-pan\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={companyForm.control}\n                  name=\"address.street\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Street Address</FormLabel>\n                      <FormControl>\n                        <Textarea placeholder=\"Enter complete address\" {...field} data-testid=\"textarea-address\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <FormField\n                    control={companyForm.control}\n                    name=\"city\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>City</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter city\" {...field} data-testid=\"input-city\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={companyForm.control}\n                    name=\"state\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>State</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter state\" {...field} data-testid=\"input-state\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={companyForm.control}\n                    name=\"address.pincode\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Pincode</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter pincode\" {...field} data-testid=\"input-pincode\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={createCompanyMutation.isPending}\n                  data-testid=\"button-save-company\"\n                >\n                  {createCompanyMutation.isPending ? 'Saving...' : 'Continue to Profile Setup'}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Step 2: Capabilities & Profile */}\n      {currentStep === 2 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Capabilities & Profile</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...profileForm}>\n              <form onSubmit={profileForm.handleSubmit(handleProfileSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={profileForm.control}\n                  name=\"capabilities\"\n                  render={() => (\n                    <FormItem>\n                      <FormLabel>Manufacturing Capabilities</FormLabel>\n                      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 mt-2\">\n                        {capabilities.map((capability) => (\n                          <FormField\n                            key={capability}\n                            control={profileForm.control}\n                            name=\"capabilities\"\n                            render={({ field }) => (\n                              <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                                <FormControl>\n                                  <Checkbox\n                                    checked={field.value?.includes(capability)}\n                                    onCheckedChange={(checked) => {\n                                      const updatedValue = checked\n                                        ? [...(field.value || []), capability]\n                                        : (field.value || []).filter(value => value !== capability);\n                                      field.onChange(updatedValue);\n                                    }}\n                                    data-testid={`checkbox-capability-${capability.toLowerCase().replace(/\\s+/g, '-')}`}\n                                  />\n                                </FormControl>\n                                <FormLabel className=\"text-sm font-normal\">\n                                  {capability}\n                                </FormLabel>\n                              </FormItem>\n                            )}\n                          />\n                        ))}\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={profileForm.control}\n                  name=\"moqDefault\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Default Minimum Order Quantity (MOQ)</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          placeholder=\"Enter default MOQ\"\n                          {...field}\n                          onChange={(e) => field.onChange(e.target.valueAsNumber || e.target.value)}\n                          data-testid=\"input-moq\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={profileForm.control}\n                  name=\"certifications\"\n                  render={() => (\n                    <FormItem>\n                      <FormLabel>Certifications</FormLabel>\n                      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 mt-2\">\n                        {certifications.map((certification) => (\n                          <FormField\n                            key={certification}\n                            control={profileForm.control}\n                            name=\"certifications\"\n                            render={({ field }) => (\n                              <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                                <FormControl>\n                                  <Checkbox\n                                    checked={field.value?.includes(certification)}\n                                    onCheckedChange={(checked) => {\n                                      const updatedValue = checked\n                                        ? [...(field.value || []), certification]\n                                        : (field.value || []).filter(value => value !== certification);\n                                      field.onChange(updatedValue);\n                                    }}\n                                    data-testid={`checkbox-certification-${certification.toLowerCase().replace(/[\\s:]/g, '-')}`}\n                                  />\n                                </FormControl>\n                                <FormLabel className=\"text-sm font-normal\">\n                                  {certification}\n                                </FormLabel>\n                              </FormItem>\n                            )}\n                          />\n                        ))}\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={createProfileMutation.isPending}\n                  data-testid=\"button-save-profile\"\n                >\n                  {createProfileMutation.isPending ? 'Saving...' : 'Continue to Document Upload'}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Step 3: Document Upload */}\n      {currentStep === 3 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Document Upload</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Hidden file inputs */}\n            <input \n              type=\"file\" \n              ref={registrationRef} \n              style={{ display: 'none' }} \n              accept=\".pdf,.jpg,.jpeg,.png\" \n            />\n            <input \n              type=\"file\" \n              ref={gstRef} \n              style={{ display: 'none' }} \n              accept=\".pdf,.jpg,.jpeg,.png\" \n            />\n            <input \n              type=\"file\" \n              ref={bankRef} \n              style={{ display: 'none' }} \n              accept=\".pdf,.jpg,.jpeg,.png\" \n            />\n            <input \n              type=\"file\" \n              ref={isoRef} \n              style={{ display: 'none' }} \n              accept=\".pdf,.jpg,.jpeg,.png\" \n            />\n            <input \n              type=\"file\" \n              ref={samplesRef} \n              style={{ display: 'none' }} \n              accept=\".jpg,.jpeg,.png\" \n              multiple \n            />\n            <input \n              type=\"file\" \n              ref={machinesRef} \n              style={{ display: 'none' }} \n              accept=\".pdf,.doc,.docx,.xls,.xlsx\" \n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <h3 className=\"font-semibold\">Required Documents</h3>\n                \n                <div className={`border-dashed border-2 rounded-lg p-6 text-center ${uploadedDocs.company_registration ? 'border-green-300 bg-green-50' : 'border-border'}`}>\n                  <Upload className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\n                  <p className=\"text-sm font-medium mb-1\">Company Registration Certificate</p>\n                  <p className=\"text-xs text-muted-foreground mb-3\">PDF, JPG, PNG (Max 5MB)</p>\n                  {uploadedDocs.company_registration ? (\n                    <p className=\"text-sm text-green-600 mb-2\">✓ {uploadedDocs.company_registration}</p>\n                  ) : null}\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    data-testid=\"button-upload-registration\"\n                    onClick={() => handleFileUpload('company_registration', registrationRef)}\n                    disabled={uploadDocumentMutation.isPending}\n                  >\n                    {uploadedDocs.company_registration ? 'Replace File' : 'Upload File'}\n                  </Button>\n                </div>\n\n                <div className={`border-dashed border-2 rounded-lg p-6 text-center ${uploadedDocs.gst_certificate ? 'border-green-300 bg-green-50' : 'border-border'}`}>\n                  <Upload className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\n                  <p className=\"text-sm font-medium mb-1\">GST Certificate</p>\n                  <p className=\"text-xs text-muted-foreground mb-3\">PDF, JPG, PNG (Max 5MB)</p>\n                  {uploadedDocs.gst_certificate ? (\n                    <p className=\"text-sm text-green-600 mb-2\">✓ {uploadedDocs.gst_certificate}</p>\n                  ) : null}\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    data-testid=\"button-upload-gst\"\n                    onClick={() => handleFileUpload('gst_certificate', gstRef)}\n                    disabled={uploadDocumentMutation.isPending}\n                  >\n                    {uploadedDocs.gst_certificate ? 'Replace File' : 'Upload File'}\n                  </Button>\n                </div>\n\n                <div className={`border-dashed border-2 rounded-lg p-6 text-center ${uploadedDocs.bank_statement ? 'border-green-300 bg-green-50' : 'border-border'}`}>\n                  <Upload className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\n                  <p className=\"text-sm font-medium mb-1\">Bank Account Details</p>\n                  <p className=\"text-xs text-muted-foreground mb-3\">PDF, JPG, PNG (Max 5MB)</p>\n                  {uploadedDocs.bank_statement ? (\n                    <p className=\"text-sm text-green-600 mb-2\">✓ {uploadedDocs.bank_statement}</p>\n                  ) : null}\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    data-testid=\"button-upload-bank\"\n                    onClick={() => handleFileUpload('bank_statement', bankRef)}\n                    disabled={uploadDocumentMutation.isPending}\n                  >\n                    {uploadedDocs.bank_statement ? 'Replace File' : 'Upload File'}\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <h3 className=\"font-semibold\">Optional Documents</h3>\n                \n                <div className={`border-dashed border-2 rounded-lg p-6 text-center ${uploadedDocs.iso_certificate ? 'border-green-300 bg-green-50' : 'border-border'}`}>\n                  <Upload className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\n                  <p className=\"text-sm font-medium mb-1\">ISO Certificates</p>\n                  <p className=\"text-xs text-muted-foreground mb-3\">PDF, JPG, PNG (Max 5MB)</p>\n                  {uploadedDocs.iso_certificate ? (\n                    <p className=\"text-sm text-green-600 mb-2\">✓ {uploadedDocs.iso_certificate}</p>\n                  ) : null}\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    data-testid=\"button-upload-iso\"\n                    onClick={() => handleFileUpload('iso_certificate', isoRef)}\n                    disabled={uploadDocumentMutation.isPending}\n                  >\n                    {uploadedDocs.iso_certificate ? 'Replace File' : 'Upload File'}\n                  </Button>\n                </div>\n\n                <div className={`border-dashed border-2 rounded-lg p-6 text-center ${uploadedDocs.product_samples ? 'border-green-300 bg-green-50' : 'border-border'}`}>\n                  <Upload className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\n                  <p className=\"text-sm font-medium mb-1\">Sample Work Photos</p>\n                  <p className=\"text-xs text-muted-foreground mb-3\">JPG, PNG (Max 10MB)</p>\n                  {uploadedDocs.product_samples ? (\n                    <p className=\"text-sm text-green-600 mb-2\">✓ {uploadedDocs.product_samples}</p>\n                  ) : null}\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    data-testid=\"button-upload-samples\"\n                    onClick={() => handleFileUpload('product_samples', samplesRef)}\n                    disabled={uploadDocumentMutation.isPending}\n                  >\n                    {uploadedDocs.product_samples ? 'Replace Files' : 'Upload Files'}\n                  </Button>\n                </div>\n\n                <div className={`border-dashed border-2 rounded-lg p-6 text-center ${uploadedDocs.machine_photos ? 'border-green-300 bg-green-50' : 'border-border'}`}>\n                  <Upload className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\n                  <p className=\"text-sm font-medium mb-1\">Machine List & Capacity</p>\n                  <p className=\"text-xs text-muted-foreground mb-3\">PDF, JPG, PNG (Max 5MB)</p>\n                  {uploadedDocs.machine_photos ? (\n                    <p className=\"text-sm text-green-600 mb-2\">✓ {uploadedDocs.machine_photos}</p>\n                  ) : null}\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    data-testid=\"button-upload-machines\"\n                    onClick={() => handleFileUpload('machine_photos', machinesRef)}\n                    disabled={uploadDocumentMutation.isPending}\n                  >\n                    {uploadedDocs.machine_photos ? 'Replace File' : 'Upload File'}\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"text-center pt-6 border-t\">\n              <Button \n                size=\"lg\" \n                data-testid=\"button-complete-onboarding\"\n                onClick={handleCompleteOnboarding}\n                disabled={uploadDocumentMutation.isPending}\n              >\n                {uploadDocumentMutation.isPending ? 'Processing...' : 'Complete Onboarding'}\n              </Button>\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                Your profile will be reviewed by our team within 2-3 business days\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":28285},"client/src/pages/supplier/quotes.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useLocation } from 'wouter';\nimport { Plus, FileText, Calculator, Clock } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { authenticatedApiClient } from '@/lib/supabase';\nimport { useToast } from '@/hooks/use-toast';\n\nconst quoteSchema = z.object({\n  unitPrice: z.number().min(0.01, 'Unit price must be greater than 0'),\n  toolingCost: z.number().optional(),\n  leadTimeDays: z.number().min(1, 'Lead time must be at least 1 day'),\n  validityDays: z.number().min(1, 'Validity must be at least 1 day'),\n  notes: z.string().optional(),\n  sampleLeadTime: z.number().optional(),\n  samplePrice: z.number().optional(),\n});\n\ntype QuoteForm = z.infer<typeof quoteSchema>;\n\nexport default function SupplierQuotes() {\n  const [selectedRFQ, setSelectedRFQ] = useState<any>(null);\n  const [showQuoteForm, setShowQuoteForm] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  const { data: quotes = [], isLoading: quotesLoading } = useQuery({\n    queryKey: ['/api/protected/quotes'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/quotes'),\n  });\n\n  const { data: invites = [] } = useQuery({\n    queryKey: ['/api/protected/suppliers/invites'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/suppliers/invites'),\n  });\n\n  const form = useForm<QuoteForm>({\n    resolver: zodResolver(quoteSchema),\n    defaultValues: {\n      leadTimeDays: 14,\n      validityDays: 30,\n    },\n  });\n\n  const createQuoteMutation = useMutation({\n    mutationFn: (data: { rfqId: string; quoteJson: any }) =>\n      authenticatedApiClient.post('/api/protected/quotes', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/protected/quotes'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/protected/suppliers/invites'] });\n      setShowQuoteForm(false);\n      setSelectedRFQ(null);\n      form.reset();\n      toast({\n        title: \"Quote submitted successfully\",\n        description: \"Your quote has been sent for review.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to submit quote\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitQuote = (data: QuoteForm) => {\n    if (!selectedRFQ) return;\n\n    const quoteData = {\n      rfqId: selectedRFQ.rfq.id,\n      status: 'submitted',\n      quoteJson: {\n        ...data,\n        rfqItems: selectedRFQ.rfq.details?.items?.map((item: any) => ({\n          itemRef: item.itemRef || '1',\n          unitPrice: data.unitPrice,\n          totalPrice: data.unitPrice * (item.quantity || 1),\n          leadTimeDays: data.leadTimeDays,\n        })) || [],\n        totalAmount: data.unitPrice * (selectedRFQ.rfq.details?.items?.[0]?.quantity || 1),\n        submittedAt: new Date().toISOString(),\n      },\n    };\n\n    createQuoteMutation.mutate(quoteData);\n  };\n\n  const pendingInvites = invites.filter((invite: any) => invite.invite.status === 'invited');\n  const submittedQuotes = quotes.filter((quote: any) => quote.status === 'submitted');\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground\">My Quotes</h1>\n        <p className=\"text-muted-foreground mt-2\">Submit and manage your quotations</p>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center\">\n                <Clock className=\"h-5 w-5 text-orange-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-pending-quotes\">\n                  {pendingInvites.length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Pending Quotes</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                <FileText className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-submitted-quotes\">\n                  {submittedQuotes.length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Submitted Quotes</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                <Calculator className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-quotes\">\n                  {quotes.length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Total Quotes</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Pending RFQs for Quoting */}\n      {pendingInvites.length > 0 && (\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"text-xl text-orange-600\">\n              <Clock className=\"h-5 w-5 inline mr-2\" />\n              RFQs Awaiting Quotes ({pendingInvites.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {pendingInvites.map((invite: any) => (\n                <div\n                  key={invite.invite.id}\n                  className=\"border border-orange-200 rounded-lg p-4 bg-orange-50\"\n                  data-testid={`card-pending-rfq-${invite.invite.id}`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-4 mb-2\">\n                        <h3 className=\"font-semibold text-foreground\" data-testid={`text-rfq-title-${invite.invite.id}`}>\n                          {invite.rfq.rfqNumber} - {invite.rfq.title}\n                        </h3>\n                        <Badge className=\"bg-orange-100 text-orange-800\">\n                          Quote Required\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-sm\">\n                        <div>\n                          <p className=\"text-muted-foreground\">Process</p>\n                          <p className=\"font-medium\">{invite.rfq.details?.sku?.processName || 'N/A'}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Quantity</p>\n                          <p className=\"font-medium\">\n                            {invite.rfq.details?.items?.[0]?.quantity || 'N/A'} {invite.rfq.details?.items?.[0]?.unit || ''}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Material</p>\n                          <p className=\"font-medium\">{invite.rfq.details?.items?.[0]?.material || 'N/A'}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Target Price</p>\n                          <p className=\"font-medium\">\n                            {invite.rfq.details?.items?.[0]?.targetUnitPrice \n                              ? `₹${invite.rfq.details.items[0].targetUnitPrice}`\n                              : 'Not specified'}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setLocation(`/supplier/rfq/${invite.rfq.id}`)}\n                        data-testid={`button-view-rfq-details-${invite.invite.id}`}\n                      >\n                        View Details\n                      </Button>\n                      <Dialog open={showQuoteForm && selectedRFQ?.invite.id === invite.invite.id} onOpenChange={setShowQuoteForm}>\n                        <DialogTrigger asChild>\n                          <Button\n                            size=\"sm\"\n                            onClick={() => setSelectedRFQ(invite)}\n                            data-testid={`button-create-quote-${invite.invite.id}`}\n                          >\n                            <Plus className=\"h-4 w-4 mr-2\" />\n                            Create Quote\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-2xl\">\n                          <DialogHeader>\n                            <DialogTitle>Submit Quote for {invite.rfq.rfqNumber}</DialogTitle>\n                          </DialogHeader>\n                          \n                          <Form {...form}>\n                            <form onSubmit={form.handleSubmit(handleSubmitQuote)} className=\"space-y-6\">\n                              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                <FormField\n                                  control={form.control}\n                                  name=\"unitPrice\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Unit Price (₹)</FormLabel>\n                                      <FormControl>\n                                        <Input\n                                          type=\"number\"\n                                          step=\"0.01\"\n                                          placeholder=\"Enter unit price\"\n                                          {...field}\n                                          onChange={(e) => field.onChange(parseFloat(e.target.value))}\n                                          data-testid=\"input-unit-price\"\n                                        />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n\n                                <FormField\n                                  control={form.control}\n                                  name=\"toolingCost\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Tooling Cost (₹) - Optional</FormLabel>\n                                      <FormControl>\n                                        <Input\n                                          type=\"number\"\n                                          step=\"0.01\"\n                                          placeholder=\"Enter tooling cost\"\n                                          {...field}\n                                          onChange={(e) => field.onChange(parseFloat(e.target.value))}\n                                          data-testid=\"input-tooling-cost\"\n                                        />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                              </div>\n\n                              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                <FormField\n                                  control={form.control}\n                                  name=\"leadTimeDays\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Lead Time (Days)</FormLabel>\n                                      <FormControl>\n                                        <Input\n                                          type=\"number\"\n                                          placeholder=\"Enter lead time\"\n                                          {...field}\n                                          onChange={(e) => field.onChange(parseInt(e.target.value))}\n                                          data-testid=\"input-lead-time\"\n                                        />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n\n                                <FormField\n                                  control={form.control}\n                                  name=\"validityDays\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Quote Validity (Days)</FormLabel>\n                                      <FormControl>\n                                        <Input\n                                          type=\"number\"\n                                          placeholder=\"Enter validity period\"\n                                          {...field}\n                                          onChange={(e) => field.onChange(parseInt(e.target.value))}\n                                          data-testid=\"input-validity\"\n                                        />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                              </div>\n\n                              <FormField\n                                control={form.control}\n                                name=\"notes\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Additional Notes</FormLabel>\n                                    <FormControl>\n                                      <Textarea\n                                        placeholder=\"Any additional information about your quote...\"\n                                        {...field}\n                                        data-testid=\"textarea-notes\"\n                                      />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n\n                              <div className=\"flex justify-end space-x-2\">\n                                <Button\n                                  type=\"button\"\n                                  variant=\"outline\"\n                                  onClick={() => setShowQuoteForm(false)}\n                                  data-testid=\"button-cancel-quote\"\n                                >\n                                  Cancel\n                                </Button>\n                                <Button\n                                  type=\"submit\"\n                                  disabled={createQuoteMutation.isPending}\n                                  data-testid=\"button-submit-quote\"\n                                >\n                                  {createQuoteMutation.isPending ? 'Submitting...' : 'Submit Quote'}\n                                </Button>\n                              </div>\n                            </form>\n                          </Form>\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Submitted Quotes */}\n      <Card>\n        <CardHeader>\n          <CardTitle>All Quotes</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {quotesLoading ? (\n            <div className=\"text-center py-8 text-muted-foreground\">Loading quotes...</div>\n          ) : quotes.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Calculator className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-foreground mb-2\">No quotes submitted yet</h3>\n              <p className=\"text-muted-foreground\">\n                Submit your first quote when you receive an RFQ invitation\n              </p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">RFQ ID</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Unit Price</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Lead Time</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Total Amount</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Status</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Submitted</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {quotes.map((quote: any) => (\n                    <tr key={quote.id} data-testid={`row-quote-${quote.id}`}>\n                      <td className=\"py-4 px-6 text-sm font-mono\" data-testid={`text-quote-rfq-${quote.id}`}>\n                        {quote.rfqId}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm font-medium\" data-testid={`text-quote-price-${quote.id}`}>\n                        ₹{quote.quoteJson?.unitPrice?.toLocaleString() || 'N/A'}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm\">\n                        {quote.quoteJson?.leadTimeDays || 'N/A'} days\n                      </td>\n                      <td className=\"py-4 px-6 text-sm font-medium\">\n                        ₹{quote.quoteJson?.totalAmount?.toLocaleString() || 'N/A'}\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <Badge\n                          className={\n                            quote.status === 'submitted'\n                              ? 'bg-blue-100 text-blue-800'\n                              : quote.status === 'accepted'\n                              ? 'bg-green-100 text-green-800'\n                              : 'bg-red-100 text-red-800'\n                          }\n                        >\n                          {quote.status.toUpperCase()}\n                        </Badge>\n                      </td>\n                      <td className=\"py-4 px-6 text-sm text-muted-foreground\">\n                        {new Date(quote.createdAt).toLocaleDateString()}\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          onClick={() => setLocation(`/supplier/rfq/${quote.rfqId}`)}\n                          data-testid={`button-view-quote-${quote.id}`}\n                        >\n                          View Details\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":21079},"client/src/pages/supplier/rfqs.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { FileText, Clock, Package, Calendar } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { authenticatedApiClient } from '@/lib/supabase';\nimport { useLocation } from 'wouter';\n\nexport default function SupplierRFQs() {\n  const [, setLocation] = useLocation();\n\n  const { data: invites = [], isLoading } = useQuery({\n    queryKey: ['/api/protected/suppliers/invites'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/suppliers/invites'),\n  });\n\n  const pendingInvites = invites.filter((invite: any) => invite.invite.status === 'invited');\n  const respondedInvites = invites.filter((invite: any) => invite.invite.status === 'responded');\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Invited RFQs</h1>\n        <p className=\"text-muted-foreground mt-2\">Review and respond to RFQ invitations</p>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-red-100 rounded-full flex items-center justify-center\">\n                <Clock className=\"h-5 w-5 text-red-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-pending-count\">\n                  {pendingInvites.length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Pending Responses</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                <FileText className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-responded-count\">\n                  {respondedInvites.length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Quotes Submitted</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                <Package className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-count\">\n                  {invites.length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Total Invitations</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Pending RFQs */}\n      {pendingInvites.length > 0 && (\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"text-xl text-red-600\">\n              <Clock className=\"h-5 w-5 inline mr-2\" />\n              Pending Responses ({pendingInvites.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {pendingInvites.map((invite: any) => (\n                <div\n                  key={invite.invite.id}\n                  className=\"border border-red-200 rounded-lg p-4 bg-red-50\"\n                  data-testid={`card-pending-invite-${invite.invite.id}`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-4 mb-2\">\n                        <h3 className=\"font-semibold text-foreground\" data-testid={`text-rfq-title-${invite.invite.id}`}>\n                          {invite.rfq.rfqNumber} - {invite.rfq.title}\n                        </h3>\n                        <Badge className=\"bg-red-100 text-red-800\">\n                          Urgent\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-sm\">\n                        <div>\n                          <p className=\"text-muted-foreground\">Process</p>\n                          <p className=\"font-medium\">{invite.rfq.details?.sku?.processName || 'N/A'}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Quantity</p>\n                          <p className=\"font-medium\">\n                            {invite.rfq.details?.items?.[0]?.quantity || 'N/A'} {invite.rfq.details?.items?.[0]?.unit || ''}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Material</p>\n                          <p className=\"font-medium\">{invite.rfq.details?.items?.[0]?.material || 'N/A'}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Deadline</p>\n                          <p className=\"font-medium text-red-600\">\n                            <Calendar className=\"h-4 w-4 inline mr-1\" />\n                            {invite.invite.responseDeadline ? new Date(invite.invite.responseDeadline).toLocaleDateString() : 'N/A'}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        data-testid={`button-view-details-${invite.invite.id}`}\n                      >\n                        View Details\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        onClick={() => setLocation('/supplier/quotes')}\n                        data-testid={`button-submit-quote-${invite.invite.id}`}\n                      >\n                        Submit Quote\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* All RFQs */}\n      <Card>\n        <CardHeader>\n          <CardTitle>All RFQ Invitations</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8 text-muted-foreground\">Loading RFQs...</div>\n          ) : invites.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <FileText className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-foreground mb-2\">No RFQ invitations yet</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Complete your supplier profile to start receiving RFQ invitations from buyers\n              </p>\n              <Button onClick={() => setLocation('/supplier/onboarding')} data-testid=\"button-complete-profile\">\n                Complete Profile\n              </Button>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">RFQ ID</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Title</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Process</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Quantity</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Deadline</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Status</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {invites.map((invite: any) => (\n                    <tr key={invite.invite.id} data-testid={`row-invite-${invite.invite.id}`}>\n                      <td className=\"py-4 px-6 text-sm font-mono\" data-testid={`text-rfq-number-${invite.invite.id}`}>\n                        {invite.rfq.rfqNumber}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm font-medium\" data-testid={`text-rfq-title-${invite.invite.id}`}>\n                        {invite.rfq.title}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm\">\n                        {invite.rfq.details?.sku?.processName || 'N/A'}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm\">\n                        {invite.rfq.details?.items?.[0]?.quantity || 'N/A'} {invite.rfq.details?.items?.[0]?.unit || ''}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm\">\n                        {invite.invite.responseDeadline ? new Date(invite.invite.responseDeadline).toLocaleDateString() : 'N/A'}\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <Badge\n                          className={\n                            invite.invite.status === 'invited'\n                              ? 'bg-red-100 text-red-800'\n                              : invite.invite.status === 'responded'\n                              ? 'bg-green-100 text-green-800'\n                              : 'bg-gray-100 text-gray-800'\n                          }\n                        >\n                          {invite.invite.status === 'invited' ? 'Quote Pending' : \n                           invite.invite.status === 'responded' ? 'Quote Submitted' : \n                           'Declined'}\n                        </Badge>\n                      </td>\n                      <td className=\"py-4 px-6 space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          data-testid={`button-view-rfq-${invite.invite.id}`}\n                        >\n                          View Details\n                        </Button>\n                        {invite.invite.status === 'invited' ? (\n                          <Button\n                            size=\"sm\"\n                            onClick={() => setLocation('/supplier/quotes')}\n                            data-testid={`button-quote-${invite.invite.id}`}\n                          >\n                            Submit Quote\n                          </Button>\n                        ) : (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setLocation('/supplier/quotes')}\n                            data-testid={`button-view-quote-${invite.invite.id}`}\n                          >\n                            View Quote\n                          </Button>\n                        )}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11876},"client/src/lib/sample-notifications.ts":{"content":"import { apiRequest } from './queryClient';\n\ninterface CreateNotificationPayload {\n  userId: string;\n  type: string;\n  title: string;\n  message: string;\n  isRead?: boolean;\n  metadata?: any;\n  entityId?: string;\n  entityType?: string;\n}\n\n// Sample notifications for different user roles\nexport const sampleNotifications = {\n  buyer: [\n    {\n      type: 'quote_received',\n      title: 'New Quote Received',\n      message: 'You have received a new quote for RFQ-2025-001 from MetalWorks Industries. Quote amount: ₹45,000',\n      metadata: { rfqId: 'rfq-001', amount: 45000, supplierId: 'supplier-001' },\n      entityType: 'rfq',\n      isRead: false\n    },\n    {\n      type: 'rfq_approved',\n      title: 'RFQ Approved',\n      message: 'Your RFQ for CNC Machining Components has been approved and is now live for supplier bidding.',\n      metadata: { rfqId: 'rfq-002' },\n      entityType: 'rfq',\n      isRead: false\n    },\n    {\n      type: 'order_status_change',\n      title: 'Order in Production',\n      message: 'Your order #ORD-2025-001 has moved to production stage. Estimated delivery: Jan 15, 2025',\n      metadata: { orderId: 'ord-001', status: 'production', estimatedDelivery: '2025-01-15' },\n      entityType: 'order',\n      isRead: true\n    },\n    {\n      type: 'inspection_completed',\n      title: 'Quality Inspection Passed',\n      message: 'Quality inspection for order #ORD-2025-001 has been completed successfully. Ready for shipment.',\n      metadata: { orderId: 'ord-001', inspectionResult: 'pass' },\n      entityType: 'order',\n      isRead: false\n    },\n    {\n      type: 'quote_accepted',\n      title: 'Quote Accepted',\n      message: 'Congratulations! Your selected quote from TechFab Solutions has been processed. Order created.',\n      metadata: { quoteId: 'quote-001', orderId: 'ord-002' },\n      entityType: 'quote',\n      isRead: true\n    }\n  ],\n  supplier: [\n    {\n      type: 'supplier_invitation',\n      title: 'New RFQ Invitation',\n      message: 'You have been invited to bid on RFQ for Sheet Metal Fabrication. Deadline: Dec 30, 2024',\n      metadata: { rfqId: 'rfq-003', deadline: '2024-12-30' },\n      entityType: 'rfq',\n      isRead: false\n    },\n    {\n      type: 'supplier_verified',\n      title: 'Profile Verification Updated',\n      message: 'Your supplier profile has been upgraded to Silver verification status. You can now bid on premium RFQs.',\n      metadata: { verificationLevel: 'silver', previousLevel: 'bronze' },\n      entityType: 'supplier_profile',\n      isRead: false\n    },\n    {\n      type: 'quote_accepted',\n      title: 'Quote Accepted!',\n      message: 'Great news! Your quote for ₹32,000 has been accepted by TechStart Solutions. Order details will follow.',\n      metadata: { quoteId: 'quote-002', amount: 32000, buyerId: 'buyer-001' },\n      entityType: 'quote',\n      isRead: false\n    },\n    {\n      type: 'payout_processed',\n      title: 'Payment Received',\n      message: 'Payment of ₹28,800 (after fees) has been processed to your account for order #ORD-2025-003.',\n      metadata: { orderId: 'ord-003', amount: 28800, originalAmount: 32000 },\n      entityType: 'payout',\n      isRead: true\n    },\n    {\n      type: 'order_created',\n      title: 'New Order Assigned',\n      message: 'Order #ORD-2025-004 has been created from your accepted quote. Production can begin.',\n      metadata: { orderId: 'ord-004', rfqId: 'rfq-004' },\n      entityType: 'order',\n      isRead: false\n    }\n  ],\n  admin: [\n    {\n      type: 'rfq_submitted',\n      title: 'New RFQ Submitted',\n      message: 'AutoParts Manufacturing has submitted a new RFQ for Injection Molding Components worth ₹2.5L',\n      metadata: { rfqId: 'rfq-005', buyerId: 'buyer-002', estimatedValue: 250000 },\n      entityType: 'rfq',\n      isRead: false\n    },\n    {\n      type: 'supplier_verification',\n      title: 'Supplier Awaiting Verification',\n      message: 'PrecisionTech Industries has submitted documents for Gold verification. Review required.',\n      metadata: { supplierId: 'supplier-003', requestedLevel: 'gold' },\n      entityType: 'supplier_profile',\n      isRead: false\n    },\n    {\n      type: 'order_status_change',\n      title: 'Order Requires Attention',\n      message: 'Order #ORD-2025-002 inspection failed. Buyer and supplier have been notified for resolution.',\n      metadata: { orderId: 'ord-002', status: 'inspection_failed', issueType: 'quality' },\n      entityType: 'order',\n      isRead: false\n    },\n    {\n      type: 'general',\n      title: 'Monthly Report Available',\n      message: 'December 2024 platform metrics report is ready. 127 RFQs processed, 89% success rate.',\n      metadata: { period: '2024-12', totalRfqs: 127, successRate: 89 },\n      entityType: 'report',\n      isRead: true\n    },\n    {\n      type: 'general',\n      title: 'System Maintenance Scheduled',\n      message: 'Planned maintenance window: Jan 1, 2025, 2:00-4:00 AM IST. Platform will be temporarily unavailable.',\n      metadata: { maintenanceDate: '2025-01-01', startTime: '02:00', endTime: '04:00' },\n      entityType: 'system',\n      isRead: false\n    }\n  ]\n};\n\nexport async function createSampleNotifications(userId: string, userRole: string) {\n  const notifications = sampleNotifications[userRole as keyof typeof sampleNotifications] || [];\n  \n  const results = [];\n  for (const notification of notifications) {\n    try {\n      const payload: CreateNotificationPayload = {\n        ...notification,\n        userId\n      };\n      \n      const result = await apiRequest('POST', '/api/protected/notifications', payload);\n      \n      results.push(result);\n    } catch (error) {\n      console.error('Failed to create notification:', error);\n    }\n  }\n  \n  return results;\n}\n\n// Utility function to create notifications for current user\nexport async function generateNotificationsForCurrentUser() {\n  try {\n    // This would typically get user info from auth context\n    // For now, we'll create a few sample notifications\n    const testNotifications = [\n      {\n        userId: 'current-user', // This should be replaced with actual user ID\n        type: 'general',\n        title: 'Welcome to Logicwerk!',\n        message: 'Your account has been successfully created. Start exploring our B2B marketplace for manufacturing services.',\n        isRead: false,\n        metadata: { welcomeNotification: true }\n      },\n      {\n        userId: 'current-user',\n        type: 'general',\n        title: 'Profile Completion',\n        message: 'Complete your profile to get better matches and unlock premium features.',\n        isRead: false,\n        metadata: { profileCompletion: 45 }\n      }\n    ];\n    \n    for (const notification of testNotifications) {\n      await apiRequest('POST', '/api/protected/notifications', notification);\n    }\n    \n    console.log('Sample notifications created successfully!');\n  } catch (error) {\n    console.error('Failed to create sample notifications:', error);\n  }\n}","size_bytes":6927},"client/src/components/layout/notification-dropdown.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Bell, Check, X, Clock } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Separator } from '@/components/ui/separator';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface Notification {\n  id: string;\n  userId: string;\n  type: string;\n  title: string;\n  message: string;\n  isRead: boolean;\n  metadata?: any;\n  entityId?: string;\n  entityType?: string;\n  createdAt: string;\n}\n\ninterface NotificationDropdownProps {\n  className?: string;\n}\n\nexport function NotificationDropdown({ className }: NotificationDropdownProps) {\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n\n  // Fetch notifications\n  const { data: notifications = [], isLoading: notificationsLoading, error: notificationsError } = useQuery<Notification[]>({\n    queryKey: ['/api/protected/notifications'],\n    enabled: open, // Only fetch when dropdown is open\n  });\n\n  // Fetch unread count\n  const { data: countData, isLoading: countLoading } = useQuery<{ unreadCount: number }>({\n    queryKey: ['/api/protected/notifications/count'],\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  const unreadCount = countData?.unreadCount || 0;\n\n  // Mark notification as read\n  const markAsReadMutation = useMutation({\n    mutationFn: (notificationId: string) => \n      apiRequest('PUT', `/api/protected/notifications/${notificationId}/read`),\n    onSuccess: () => {\n      // Invalidate both notifications and count queries\n      queryClient.invalidateQueries({ queryKey: ['/api/protected/notifications'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/protected/notifications/count'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to mark notification as read\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Mark all notifications as read\n  const markAllAsReadMutation = useMutation({\n    mutationFn: () => \n      apiRequest('PUT', '/api/protected/notifications/read-all'),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/protected/notifications'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/protected/notifications/count'] });\n      toast({\n        title: \"Success\",\n        description: \"All notifications marked as read\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to mark all notifications as read\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleNotificationClick = (notification: Notification) => {\n    if (!notification.isRead) {\n      markAsReadMutation.mutate(notification.id);\n    }\n  };\n\n  const handleMarkAllAsRead = () => {\n    markAllAsReadMutation.mutate();\n  };\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'rfq_submitted':\n      case 'rfq_approved':\n      case 'rfq_status_change':\n        return '📋';\n      case 'quote_received':\n      case 'quote_accepted':\n      case 'quote_rejected':\n        return '💰';\n      case 'supplier_invitation':\n      case 'supplier_verified':\n        return '🏢';\n      case 'order_created':\n      case 'order_status_change':\n        return '📦';\n      case 'production_update':\n        return '⚙️';\n      case 'inspection_completed':\n        return '✅';\n      case 'payout_processed':\n        return '💳';\n      default:\n        return '📨';\n    }\n  };\n\n  const formatNotificationType = (type: string) => {\n    return type.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"secondary\"\n          size=\"sm\"\n          className={`relative ${className || ''}`}\n          data-testid=\"button-notifications\"\n        >\n          <Bell className=\"h-4 w-4 mr-2\" />\n          {unreadCount > 0 && (\n            <Badge \n              variant=\"destructive\" \n              className=\"absolute -top-2 -right-2 h-5 w-5 flex items-center justify-center p-0 text-xs\"\n            >\n              {unreadCount > 99 ? '99+' : unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent \n        className=\"w-96 p-0\" \n        align=\"end\" \n        data-testid=\"notifications-dropdown\"\n      >\n        <div className=\"flex items-center justify-between p-4 border-b\">\n          <h4 className=\"font-semibold text-sm\">Notifications</h4>\n          {notifications.length > 0 && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleMarkAllAsRead}\n              disabled={markAllAsReadMutation.isPending}\n              className=\"text-xs\"\n              data-testid=\"button-mark-all-read\"\n            >\n              <Check className=\"h-3 w-3 mr-1\" />\n              Mark all read\n            </Button>\n          )}\n        </div>\n\n        <ScrollArea className=\"h-96\">\n          {notificationsLoading ? (\n            <div className=\"p-4 space-y-3\">\n              {Array.from({ length: 3 }).map((_, index) => (\n                <div key={index} className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-3/4\" />\n                  <Skeleton className=\"h-3 w-full\" />\n                  <Skeleton className=\"h-3 w-1/2\" />\n                </div>\n              ))}\n            </div>\n          ) : notificationsError ? (\n            <div className=\"p-4 text-center text-sm text-muted-foreground\">\n              <X className=\"h-8 w-8 mx-auto mb-2 text-destructive\" />\n              Failed to load notifications\n            </div>\n          ) : notifications.length === 0 ? (\n            <div className=\"p-8 text-center text-sm text-muted-foreground\">\n              <Bell className=\"h-8 w-8 mx-auto mb-2\" />\n              No notifications yet\n            </div>\n          ) : (\n            <div className=\"space-y-1 p-2\">\n              {notifications.map((notification: Notification) => (\n                <Card \n                  key={notification.id}\n                  className={`cursor-pointer transition-colors hover:bg-muted/50 ${\n                    notification.isRead ? 'opacity-70' : 'bg-blue-50/50 dark:bg-blue-950/20'\n                  }`}\n                  onClick={() => handleNotificationClick(notification)}\n                  data-testid={`notification-${notification.id}`}\n                >\n                  <CardContent className=\"p-3\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"text-lg flex-shrink-0\">\n                        {getNotificationIcon(notification.type)}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <h5 className=\"font-medium text-sm truncate\">\n                            {notification.title}\n                          </h5>\n                          {!notification.isRead && (\n                            <div className=\"w-2 h-2 bg-blue-500 rounded-full flex-shrink-0 ml-2\" />\n                          )}\n                        </div>\n                        <p className=\"text-xs text-muted-foreground mb-2 line-clamp-2\">\n                          {notification.message}\n                        </p>\n                        <div className=\"flex items-center justify-between\">\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {formatNotificationType(notification.type)}\n                          </Badge>\n                          <span className=\"text-xs text-muted-foreground flex items-center\">\n                            <Clock className=\"h-3 w-3 mr-1\" />\n                            {formatDistanceToNow(new Date(notification.createdAt), { addSuffix: true })}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n\n        {notifications.length > 0 && (\n          <>\n            <Separator />\n            <div className=\"p-3 text-center\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-xs w-full\"\n                onClick={() => setOpen(false)}\n                data-testid=\"button-close-notifications\"\n              >\n                Close\n              </Button>\n            </div>\n          </>\n        )}\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":9127},"client/src/pages/admin/payment-config.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { \n  CreditCard, Settings, DollarSign, Percent, \n  Plus, Edit, Trash2, Save, X, CheckCircle\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { authenticatedApiClient } from '@/lib/supabase';\nimport { queryClient } from '@/lib/queryClient';\n\ninterface PaymentMethod {\n  id: string;\n  name: string;\n  type: 'razorpay' | 'bank_transfer' | 'upi' | 'wallet' | 'other';\n  isActive: boolean;\n  configuration: any;\n  displayName: string;\n  description?: string;\n  processingFeePercent: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface PaymentConfiguration {\n  id: string;\n  configType: 'advance_percentage' | 'commission_rate' | 'platform_fee' | 'gateway_fee';\n  value: string;\n  description?: string;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function PaymentConfigPage() {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState('methods');\n  const [showMethodDialog, setShowMethodDialog] = useState(false);\n  const [showConfigDialog, setShowConfigDialog] = useState(false);\n  const [editingMethod, setEditingMethod] = useState<PaymentMethod | null>(null);\n  const [editingConfig, setEditingConfig] = useState<PaymentConfiguration | null>(null);\n\n  // Payment Methods Data\n  const { data: paymentMethods = [] } = useQuery({\n    queryKey: ['/api/protected/admin/payment-methods'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/admin/payment-methods'),\n  });\n\n  // Payment Configurations Data\n  const { data: paymentConfigs = [] } = useQuery({\n    queryKey: ['/api/protected/admin/payment-configurations'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/admin/payment-configurations'),\n  });\n\n  // Payment Method Mutations\n  const createMethodMutation = useMutation({\n    mutationFn: (data: any) => authenticatedApiClient.post('/api/protected/admin/payment-methods', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/protected/admin/payment-methods'] });\n      setShowMethodDialog(false);\n      setEditingMethod(null);\n      toast({ title: 'Success', description: 'Payment method created successfully' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to create payment method', variant: 'destructive' });\n    }\n  });\n\n  const updateMethodMutation = useMutation({\n    mutationFn: ({ id, ...data }: any) => authenticatedApiClient.put(`/api/protected/admin/payment-methods/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/protected/admin/payment-methods'] });\n      setShowMethodDialog(false);\n      setEditingMethod(null);\n      toast({ title: 'Success', description: 'Payment method updated successfully' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to update payment method', variant: 'destructive' });\n    }\n  });\n\n  const deleteMethodMutation = useMutation({\n    mutationFn: (id: string) => authenticatedApiClient.delete(`/api/protected/admin/payment-methods/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/protected/admin/payment-methods'] });\n      toast({ title: 'Success', description: 'Payment method deleted successfully' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to delete payment method', variant: 'destructive' });\n    }\n  });\n\n  // Payment Configuration Mutations\n  const createConfigMutation = useMutation({\n    mutationFn: (data: any) => authenticatedApiClient.post('/api/protected/admin/payment-configurations', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/protected/admin/payment-configurations'] });\n      setShowConfigDialog(false);\n      setEditingConfig(null);\n      toast({ title: 'Success', description: 'Payment configuration created successfully' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to create payment configuration', variant: 'destructive' });\n    }\n  });\n\n  const updateConfigMutation = useMutation({\n    mutationFn: ({ id, ...data }: any) => authenticatedApiClient.put(`/api/protected/admin/payment-configurations/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/protected/admin/payment-configurations'] });\n      setShowConfigDialog(false);\n      setEditingConfig(null);\n      toast({ title: 'Success', description: 'Payment configuration updated successfully' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to update payment configuration', variant: 'destructive' });\n    }\n  });\n\n  const handleMethodSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    \n    const data = {\n      name: formData.get('name'),\n      type: formData.get('type'),\n      displayName: formData.get('displayName'),\n      description: formData.get('description'),\n      processingFeePercent: formData.get('processingFeePercent'),\n      isActive: formData.get('isActive') === 'on',\n      configuration: {\n        apiKey: formData.get('apiKey'),\n        secretKey: formData.get('secretKey'),\n        webhookSecret: formData.get('webhookSecret'),\n      }\n    };\n\n    if (editingMethod) {\n      updateMethodMutation.mutate({ id: editingMethod.id, ...data });\n    } else {\n      createMethodMutation.mutate(data);\n    }\n  };\n\n  const handleConfigSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    \n    const data = {\n      configType: formData.get('configType'),\n      value: formData.get('value'),\n      description: formData.get('description'),\n      isActive: formData.get('isActive') === 'on',\n    };\n\n    if (editingConfig) {\n      updateConfigMutation.mutate({ id: editingConfig.id, ...data });\n    } else {\n      createConfigMutation.mutate(data);\n    }\n  };\n\n  const getMethodTypeIcon = (type: string) => {\n    switch (type) {\n      case 'razorpay': return <CreditCard className=\"h-4 w-4\" />;\n      case 'bank_transfer': return <DollarSign className=\"h-4 w-4\" />;\n      case 'upi': return <Settings className=\"h-4 w-4\" />;\n      default: return <CreditCard className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getConfigTypeLabel = (type: string) => {\n    switch (type) {\n      case 'advance_percentage': return 'Advance Payment %';\n      case 'commission_rate': return 'Commission Rate %';\n      case 'platform_fee': return 'Platform Fee %';\n      case 'gateway_fee': return 'Gateway Fee %';\n      default: return type;\n    }\n  };\n\n  return (\n    <div className=\"p-8 space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Payment Configuration</h1>\n          <p className=\"text-muted-foreground mt-2\">Manage payment methods, gateways, and fee structures</p>\n        </div>\n      </div>\n\n      {/* Configuration Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"methods\" data-testid=\"tab-payment-methods\">Payment Methods</TabsTrigger>\n          <TabsTrigger value=\"configurations\" data-testid=\"tab-payment-configurations\">Fee Structure</TabsTrigger>\n          <TabsTrigger value=\"overview\" data-testid=\"tab-payment-overview\">Overview</TabsTrigger>\n        </TabsList>\n\n        {/* Payment Methods Tab */}\n        <TabsContent value=\"methods\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-2xl font-semibold\">Payment Methods</h2>\n            <Dialog open={showMethodDialog} onOpenChange={setShowMethodDialog}>\n              <DialogTrigger asChild>\n                <Button onClick={() => setEditingMethod(null)} data-testid=\"button-add-payment-method\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Payment Method\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingMethod ? 'Edit Payment Method' : 'Add Payment Method'}\n                  </DialogTitle>\n                </DialogHeader>\n                <form onSubmit={handleMethodSubmit} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"name\">Internal Name</Label>\n                      <Input\n                        id=\"name\"\n                        name=\"name\"\n                        defaultValue={editingMethod?.name}\n                        placeholder=\"razorpay_primary\"\n                        required\n                        data-testid=\"input-method-name\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"type\">Method Type</Label>\n                      <Select name=\"type\" defaultValue={editingMethod?.type}>\n                        <SelectTrigger data-testid=\"select-method-type\">\n                          <SelectValue placeholder=\"Select method type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"razorpay\">Razorpay</SelectItem>\n                          <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                          <SelectItem value=\"upi\">UPI</SelectItem>\n                          <SelectItem value=\"wallet\">Wallet</SelectItem>\n                          <SelectItem value=\"other\">Other</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"displayName\">Display Name</Label>\n                    <Input\n                      id=\"displayName\"\n                      name=\"displayName\"\n                      defaultValue={editingMethod?.displayName}\n                      placeholder=\"Credit/Debit Card via Razorpay\"\n                      required\n                      data-testid=\"input-display-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"description\">Description</Label>\n                    <Textarea\n                      id=\"description\"\n                      name=\"description\"\n                      defaultValue={editingMethod?.description}\n                      placeholder=\"Secure payment processing via Razorpay gateway\"\n                      data-testid=\"textarea-description\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"processingFeePercent\">Processing Fee (%)</Label>\n                    <Input\n                      id=\"processingFeePercent\"\n                      name=\"processingFeePercent\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      defaultValue={editingMethod?.processingFeePercent}\n                      placeholder=\"2.5\"\n                      data-testid=\"input-processing-fee\"\n                    />\n                  </div>\n\n                  {/* Gateway Configuration */}\n                  <div className=\"border-t pt-4\">\n                    <h4 className=\"font-medium mb-4\">Gateway Configuration</h4>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"apiKey\">API Key</Label>\n                        <Input\n                          id=\"apiKey\"\n                          name=\"apiKey\"\n                          type=\"password\"\n                          defaultValue={editingMethod?.configuration?.apiKey}\n                          placeholder=\"API Key\"\n                          data-testid=\"input-api-key\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"secretKey\">Secret Key</Label>\n                        <Input\n                          id=\"secretKey\"\n                          name=\"secretKey\"\n                          type=\"password\"\n                          defaultValue={editingMethod?.configuration?.secretKey}\n                          placeholder=\"Secret Key\"\n                          data-testid=\"input-secret-key\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"webhookSecret\">Webhook Secret</Label>\n                        <Input\n                          id=\"webhookSecret\"\n                          name=\"webhookSecret\"\n                          type=\"password\"\n                          defaultValue={editingMethod?.configuration?.webhookSecret}\n                          placeholder=\"Webhook Secret\"\n                          data-testid=\"input-webhook-secret\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"isActive\"\n                      name=\"isActive\"\n                      defaultChecked={editingMethod?.isActive ?? true}\n                      data-testid=\"switch-method-active\"\n                    />\n                    <Label htmlFor=\"isActive\">Active</Label>\n                  </div>\n\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setShowMethodDialog(false)}\n                      data-testid=\"button-cancel-method\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={createMethodMutation.isPending || updateMethodMutation.isPending}\n                      data-testid=\"button-save-method\"\n                    >\n                      <Save className=\"h-4 w-4 mr-2\" />\n                      {editingMethod ? 'Update' : 'Create'}\n                    </Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {paymentMethods.map((method: PaymentMethod) => (\n              <Card key={method.id} className=\"relative\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      {getMethodTypeIcon(method.type)}\n                      <CardTitle className=\"text-lg\">{method.displayName}</CardTitle>\n                    </div>\n                    <Badge variant={method.isActive ? \"default\" : \"secondary\"}>\n                      {method.isActive ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Type: {method.type}</p>\n                    <p className=\"text-sm text-muted-foreground\">Fee: {method.processingFeePercent}%</p>\n                    {method.description && (\n                      <p className=\"text-sm text-muted-foreground mt-2\">{method.description}</p>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setEditingMethod(method);\n                        setShowMethodDialog(true);\n                      }}\n                      data-testid={`button-edit-method-${method.id}`}\n                    >\n                      <Edit className=\"h-4 w-4 mr-1\" />\n                      Edit\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => deleteMethodMutation.mutate(method.id)}\n                      disabled={deleteMethodMutation.isPending}\n                      data-testid={`button-delete-method-${method.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4 mr-1\" />\n                      Delete\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Payment Configurations Tab */}\n        <TabsContent value=\"configurations\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-2xl font-semibold\">Fee Structure Configuration</h2>\n            <Dialog open={showConfigDialog} onOpenChange={setShowConfigDialog}>\n              <DialogTrigger asChild>\n                <Button onClick={() => setEditingConfig(null)} data-testid=\"button-add-config\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Configuration\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingConfig ? 'Edit Configuration' : 'Add Configuration'}\n                  </DialogTitle>\n                </DialogHeader>\n                <form onSubmit={handleConfigSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"configType\">Configuration Type</Label>\n                    <Select name=\"configType\" defaultValue={editingConfig?.configType}>\n                      <SelectTrigger data-testid=\"select-config-type\">\n                        <SelectValue placeholder=\"Select configuration type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"advance_percentage\">Advance Payment %</SelectItem>\n                        <SelectItem value=\"commission_rate\">Commission Rate %</SelectItem>\n                        <SelectItem value=\"platform_fee\">Platform Fee %</SelectItem>\n                        <SelectItem value=\"gateway_fee\">Gateway Fee %</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"value\">Value</Label>\n                    <Input\n                      id=\"value\"\n                      name=\"value\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      defaultValue={editingConfig?.value}\n                      placeholder=\"30.00\"\n                      required\n                      data-testid=\"input-config-value\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"description\">Description</Label>\n                    <Textarea\n                      id=\"description\"\n                      name=\"description\"\n                      defaultValue={editingConfig?.description}\n                      placeholder=\"Description of this configuration\"\n                      data-testid=\"textarea-config-description\"\n                    />\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"isActive\"\n                      name=\"isActive\"\n                      defaultChecked={editingConfig?.isActive ?? true}\n                      data-testid=\"switch-config-active\"\n                    />\n                    <Label htmlFor=\"isActive\">Active</Label>\n                  </div>\n\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setShowConfigDialog(false)}\n                      data-testid=\"button-cancel-config\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={createConfigMutation.isPending || updateConfigMutation.isPending}\n                      data-testid=\"button-save-config\"\n                    >\n                      <Save className=\"h-4 w-4 mr-2\" />\n                      {editingConfig ? 'Update' : 'Create'}\n                    </Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {paymentConfigs.map((config: PaymentConfiguration) => (\n              <Card key={config.id}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">\n                      {getConfigTypeLabel(config.configType)}\n                    </CardTitle>\n                    <Badge variant={config.isActive ? \"default\" : \"secondary\"}>\n                      {config.isActive ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-foreground\">\n                      {config.value}%\n                    </p>\n                    {config.description && (\n                      <p className=\"text-sm text-muted-foreground mt-2\">{config.description}</p>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setEditingConfig(config);\n                        setShowConfigDialog(true);\n                      }}\n                      data-testid={`button-edit-config-${config.id}`}\n                    >\n                      <Edit className=\"h-4 w-4 mr-1\" />\n                      Edit\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <h2 className=\"text-2xl font-semibold\">Payment System Overview</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg flex items-center\">\n                  <CreditCard className=\"h-5 w-5 mr-2\" />\n                  Payment Methods\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-3xl font-bold text-foreground\">\n                  {paymentMethods.filter((m: PaymentMethod) => m.isActive).length}\n                </p>\n                <p className=\"text-muted-foreground\">Active methods</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg flex items-center\">\n                  <Percent className=\"h-5 w-5 mr-2\" />\n                  Fee Configurations\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-3xl font-bold text-foreground\">\n                  {paymentConfigs.filter((c: PaymentConfiguration) => c.isActive).length}\n                </p>\n                <p className=\"text-muted-foreground\">Active configurations</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg flex items-center\">\n                  <CheckCircle className=\"h-5 w-5 mr-2\" />\n                  System Status\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-3xl font-bold text-green-600\">Ready</p>\n                <p className=\"text-muted-foreground\">Payment system operational</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Current Configuration Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Current Configuration Summary</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {paymentConfigs.filter((c: PaymentConfiguration) => c.isActive).map((config: PaymentConfiguration) => (\n                  <div key={config.id} className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n                    <span className=\"font-medium\">{getConfigTypeLabel(config.configType)}</span>\n                    <span className=\"text-lg font-bold\">{config.value}%</span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":26059},"client/src/pages/buyer/payments.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { \n  CreditCard, Clock, CheckCircle, XCircle, AlertCircle, \n  Calendar, DollarSign, ExternalLink, Filter, Download, \n  Eye, ArrowUpRight, Wallet, TrendingUp\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { authenticatedApiClient } from '@/lib/supabase';\nimport { formatCurrency } from '@/lib/utils';\nimport { format } from 'date-fns';\n\ninterface PaymentTransaction {\n  id: string;\n  transactionRef: string;\n  orderId?: string;\n  curatedOfferId?: string;\n  amount: string;\n  fees: string;\n  netAmount: string;\n  currency: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled' | 'refunded';\n  transactionType: 'advance_payment' | 'final_payment' | 'full_payment' | 'refund' | 'commission';\n  notes?: string;\n  processedAt?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface CuratedOffer {\n  id: string;\n  rfqId: string;\n  title: string;\n  totalPrice: string;\n  paymentLink?: string;\n  advancePaymentAmount?: string;\n  finalPaymentAmount?: string;\n  paymentDeadline?: string;\n  paymentTerms?: string;\n  publishedAt: string;\n  expiresAt?: string;\n}\n\nexport default function BuyerPaymentDashboard() {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [selectedOrder, setSelectedOrder] = useState<string | null>(null);\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n\n  // Payment Transactions Data\n  const { data: paymentTransactions = [] } = useQuery({\n    queryKey: ['/api/protected/buyer/payment-transactions'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/buyer/payment-transactions'),\n  });\n\n  // Orders with payment information\n  const { data: orders = [] } = useQuery({\n    queryKey: ['/api/protected/orders'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/orders'),\n  });\n\n  // Filter transactions based on status\n  const filteredTransactions = paymentTransactions.filter((tx: PaymentTransaction) => {\n    if (statusFilter === 'all') return true;\n    return tx.status === statusFilter;\n  });\n\n  // Calculate payment statistics\n  const paymentStats = {\n    totalPaid: paymentTransactions\n      .filter((tx: PaymentTransaction) => tx.status === 'completed')\n      .reduce((sum: number, tx: PaymentTransaction) => sum + parseFloat(tx.amount), 0),\n    totalPending: paymentTransactions\n      .filter((tx: PaymentTransaction) => tx.status === 'pending')\n      .reduce((sum: number, tx: PaymentTransaction) => sum + parseFloat(tx.amount), 0),\n    completedCount: paymentTransactions.filter((tx: PaymentTransaction) => tx.status === 'completed').length,\n    pendingCount: paymentTransactions.filter((tx: PaymentTransaction) => tx.status === 'pending').length,\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed': return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case 'pending': return <Clock className=\"h-4 w-4 text-yellow-600\" />;\n      case 'processing': return <ArrowUpRight className=\"h-4 w-4 text-blue-600\" />;\n      case 'failed': return <XCircle className=\"h-4 w-4 text-red-600\" />;\n      case 'cancelled': return <XCircle className=\"h-4 w-4 text-gray-600\" />;\n      default: return <AlertCircle className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      completed: \"default\",\n      pending: \"secondary\", \n      processing: \"outline\",\n      failed: \"destructive\",\n      cancelled: \"secondary\"\n    };\n    return variants[status] || \"secondary\";\n  };\n\n  const getTransactionTypeLabel = (type: string) => {\n    switch (type) {\n      case 'advance_payment': return 'Advance Payment';\n      case 'final_payment': return 'Final Payment';\n      case 'full_payment': return 'Full Payment';\n      case 'refund': return 'Refund';\n      default: return type;\n    }\n  };\n\n  // Using shared formatCurrency utility from @/lib/utils\n\n  return (\n    <div className=\"p-8 space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Payment Dashboard</h1>\n          <p className=\"text-muted-foreground mt-2\">Track your payments, view history, and manage transactions</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-download-statement\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Download Statement\n          </Button>\n        </div>\n      </div>\n\n      {/* Payment Statistics Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm\">Total Paid</p>\n                <p className=\"text-2xl font-bold text-green-600\" data-testid=\"text-total-paid\">\n                  {formatCurrency(paymentStats.totalPaid.toString())}\n                </p>\n              </div>\n              <CheckCircle className=\"h-8 w-8 text-green-600\" />\n            </div>\n            <p className=\"text-green-600 text-sm mt-2\">{paymentStats.completedCount} completed</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm\">Amount Pending</p>\n                <p className=\"text-2xl font-bold text-yellow-600\" data-testid=\"text-total-pending\">\n                  {formatCurrency(paymentStats.totalPending.toString())}\n                </p>\n              </div>\n              <Clock className=\"h-8 w-8 text-yellow-600\" />\n            </div>\n            <p className=\"text-yellow-600 text-sm mt-2\">{paymentStats.pendingCount} pending</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm\">This Month</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-monthly-amount\">\n                  {formatCurrency(\"45000\")}\n                </p>\n              </div>\n              <TrendingUp className=\"h-8 w-8 text-blue-600\" />\n            </div>\n            <p className=\"text-green-600 text-sm mt-2\">+12% from last month</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm\">Payment Methods</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-payment-methods\">3</p>\n              </div>\n              <Wallet className=\"h-8 w-8 text-purple-600\" />\n            </div>\n            <p className=\"text-muted-foreground text-sm mt-2\">Available options</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Payment Dashboard Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-payment-overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"pending\" data-testid=\"tab-pending-payments\">Pending Payments</TabsTrigger>\n          <TabsTrigger value=\"history\" data-testid=\"tab-payment-history\">Payment History</TabsTrigger>\n          <TabsTrigger value=\"methods\" data-testid=\"tab-payment-methods\">Payment Methods</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Recent Transactions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-xl\">Recent Transactions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {paymentTransactions.slice(0, 5).map((transaction: PaymentTransaction) => (\n                  <div key={transaction.id} className=\"flex items-center justify-between p-3 border border-border rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      {getStatusIcon(transaction.status)}\n                      <div>\n                        <p className=\"font-medium text-foreground\">{transaction.transactionRef}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {getTransactionTypeLabel(transaction.transactionType)}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-bold text-foreground\">{formatCurrency(transaction.amount)}</p>\n                      <Badge variant={getStatusBadge(transaction.status)} className=\"text-xs\">\n                        {transaction.status}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n                {paymentTransactions.length === 0 && (\n                  <div className=\"text-center py-8\">\n                    <CreditCard className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">No transactions yet</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Action Items */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-xl\">Action Required</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Pending payments that need action */}\n                {paymentTransactions\n                  .filter((tx: PaymentTransaction) => tx.status === 'pending')\n                  .slice(0, 3)\n                  .map((transaction: PaymentTransaction) => (\n                  <div key={transaction.id} className=\"p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium text-foreground\">Payment Due</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {getTransactionTypeLabel(transaction.transactionType)} - {formatCurrency(transaction.amount)}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          Due: {format(new Date(transaction.createdAt), 'MMM dd, yyyy')}\n                        </p>\n                      </div>\n                      <Button size=\"sm\" data-testid={`button-pay-${transaction.id}`}>\n                        <ExternalLink className=\"h-4 w-4 mr-1\" />\n                        Pay Now\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n                \n                {paymentTransactions.filter((tx: PaymentTransaction) => tx.status === 'pending').length === 0 && (\n                  <div className=\"text-center py-8\">\n                    <CheckCircle className=\"h-12 w-12 text-green-600 mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">All payments are up to date!</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Pending Payments Tab */}\n        <TabsContent value=\"pending\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-xl\">Pending Payments</CardTitle>\n                <Badge variant=\"secondary\">{paymentStats.pendingCount} pending</Badge>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {paymentTransactions\n                  .filter((tx: PaymentTransaction) => tx.status === 'pending')\n                  .map((transaction: PaymentTransaction) => (\n                  <Card key={transaction.id} className=\"border-l-4 border-l-yellow-500\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge variant=\"outline\">{transaction.transactionRef}</Badge>\n                            <Badge variant=\"secondary\">{getTransactionTypeLabel(transaction.transactionType)}</Badge>\n                          </div>\n                          <p className=\"text-2xl font-bold text-foreground\">{formatCurrency(transaction.amount)}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Created: {format(new Date(transaction.createdAt), 'MMM dd, yyyy')}\n                          </p>\n                          {transaction.notes && (\n                            <p className=\"text-sm text-muted-foreground\">{transaction.notes}</p>\n                          )}\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-${transaction.id}`}>\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            View Details\n                          </Button>\n                          <Button size=\"sm\" data-testid={`button-pay-now-${transaction.id}`}>\n                            <ExternalLink className=\"h-4 w-4 mr-1\" />\n                            Pay Now\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n                \n                {paymentStats.pendingCount === 0 && (\n                  <div className=\"text-center py-12\">\n                    <CheckCircle className=\"h-16 w-16 text-green-600 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">All Caught Up!</h3>\n                    <p className=\"text-muted-foreground\">You have no pending payments at this time.</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Payment History Tab */}\n        <TabsContent value=\"history\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-xl\">Payment History</CardTitle>\n                <div className=\"flex space-x-2\">\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-40\" data-testid=\"select-status-filter\">\n                      <SelectValue placeholder=\"Filter by status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"failed\">Failed</SelectItem>\n                      <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Transaction Ref</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead>Amount</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Date</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredTransactions.map((transaction: PaymentTransaction) => (\n                    <TableRow key={transaction.id}>\n                      <TableCell className=\"font-medium\">{transaction.transactionRef}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">\n                          {getTransactionTypeLabel(transaction.transactionType)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"font-bold\">{formatCurrency(transaction.amount)}</TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          {getStatusIcon(transaction.status)}\n                          <Badge variant={getStatusBadge(transaction.status)}>\n                            {transaction.status}\n                          </Badge>\n                        </div>\n                      </TableCell>\n                      <TableCell>{format(new Date(transaction.createdAt), 'MMM dd, yyyy')}</TableCell>\n                      <TableCell>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          data-testid={`button-view-transaction-${transaction.id}`}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              \n              {filteredTransactions.length === 0 && (\n                <div className=\"text-center py-12\">\n                  <CreditCard className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Transactions Found</h3>\n                  <p className=\"text-muted-foreground\">\n                    {statusFilter === 'all' \n                      ? 'You haven\\'t made any payments yet.' \n                      : `No ${statusFilter} transactions found.`}\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Payment Methods Tab */}\n        <TabsContent value=\"methods\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-xl\">Available Payment Methods</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {/* Sample payment methods */}\n                <div className=\"p-6 border border-border rounded-lg\">\n                  <div className=\"flex items-center space-x-3 mb-4\">\n                    <CreditCard className=\"h-8 w-8 text-blue-600\" />\n                    <div>\n                      <h3 className=\"font-semibold text-foreground\">Credit/Debit Card</h3>\n                      <p className=\"text-sm text-muted-foreground\">Via Razorpay</p>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Secure payment processing with all major credit and debit cards\n                  </p>\n                  <Badge variant=\"default\">Active</Badge>\n                </div>\n\n                <div className=\"p-6 border border-border rounded-lg\">\n                  <div className=\"flex items-center space-x-3 mb-4\">\n                    <Wallet className=\"h-8 w-8 text-green-600\" />\n                    <div>\n                      <h3 className=\"font-semibold text-foreground\">UPI</h3>\n                      <p className=\"text-sm text-muted-foreground\">Instant payments</p>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Pay instantly using UPI apps like PhonePe, Google Pay, Paytm\n                  </p>\n                  <Badge variant=\"default\">Active</Badge>\n                </div>\n\n                <div className=\"p-6 border border-border rounded-lg\">\n                  <div className=\"flex items-center space-x-3 mb-4\">\n                    <DollarSign className=\"h-8 w-8 text-purple-600\" />\n                    <div>\n                      <h3 className=\"font-semibold text-foreground\">Bank Transfer</h3>\n                      <p className=\"text-sm text-muted-foreground\">NEFT/RTGS</p>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Direct bank transfer for large transactions\n                  </p>\n                  <Badge variant=\"default\">Active</Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":21788},"client/src/pages/admin/rfq-detail.tsx":{"content":"import { useParams } from 'wouter';\nimport { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { ArrowLeft, FileText, Download, Calendar, Users, Package, UserCheck } from 'lucide-react';\nimport { authenticatedApiClient } from '@/lib/supabase';\nimport { useLocation } from 'wouter';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function AdminRFQDetail() {\n  const { id } = useParams();\n  const [, setLocation] = useLocation();\n  const [showInviteDialog, setShowInviteDialog] = useState(false);\n  const [showStatusDialog, setShowStatusDialog] = useState(false);\n  const [selectedSuppliers, setSelectedSuppliers] = useState<string[]>([]);\n  const [newStatus, setNewStatus] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: rfq, isLoading } = useQuery({\n    queryKey: [`/api/protected/rfqs/${id}`],\n    queryFn: () => authenticatedApiClient.get(`/api/protected/rfqs/${id}`),\n    enabled: !!id,\n  });\n\n  const { data: suppliers = [] } = useQuery({\n    queryKey: ['/api/protected/admin/suppliers'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/admin/suppliers'),\n  });\n\n  const inviteSuppliersMutation = useMutation({\n    mutationFn: (supplierIds: string[]) => \n      authenticatedApiClient.post('/api/protected/admin/invite-suppliers', {\n        rfqId: id,\n        supplierIds\n      }),\n    onSuccess: () => {\n      toast({\n        title: \"Suppliers Invited\",\n        description: \"Selected suppliers have been invited to quote on this RFQ.\",\n      });\n      setShowInviteDialog(false);\n      setSelectedSuppliers([]);\n      queryClient.invalidateQueries({ queryKey: [`/api/protected/rfqs/${id}`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Invite Suppliers\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: (status: string) => \n      authenticatedApiClient.patch(`/api/protected/rfqs/${id}/status`, { status }),\n    onSuccess: () => {\n      toast({\n        title: \"Status Updated\",\n        description: \"RFQ status has been updated successfully.\",\n      });\n      setShowStatusDialog(false);\n      queryClient.invalidateQueries({ queryKey: [`/api/protected/rfqs/${id}`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Update Status\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center\">\n            <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Loading RFQ details...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!rfq) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"max-w-6xl mx-auto text-center\">\n          <h1 className=\"text-2xl font-bold text-destructive mb-4\">RFQ Not Found</h1>\n          <p className=\"text-muted-foreground mb-6\">The requested RFQ could not be found.</p>\n          <Button onClick={() => setLocation('/admin/rfqs')}>\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to RFQ Management\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const handleDownloadFile = (file: any) => {\n    try {\n      const link = document.createElement('a');\n      link.href = file.data;\n      link.download = file.name;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (error) {\n      console.error('Error downloading file:', error);\n    }\n  };\n\n  const handleInviteSuppliers = () => {\n    if (selectedSuppliers.length === 0) {\n      toast({\n        title: \"No Suppliers Selected\",\n        description: \"Please select at least one supplier to invite.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    inviteSuppliersMutation.mutate(selectedSuppliers);\n  };\n\n  const handleUpdateStatus = () => {\n    if (!newStatus) {\n      toast({\n        title: \"No Status Selected\",\n        description: \"Please select a status to update.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    updateStatusMutation.mutate(newStatus);\n  };\n\n  const verifiedSuppliers = suppliers.filter((s: any) => \n    s.profile?.verifiedStatus && ['bronze', 'silver', 'gold'].includes(s.profile.verifiedStatus)\n  );\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"max-w-6xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setLocation('/admin/rfqs')}\n              data-testid=\"button-back-to-rfqs\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to RFQ Management\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold\" data-testid=\"heading-rfq-title\">{rfq.title}</h1>\n              <p className=\"text-muted-foreground\" data-testid=\"text-rfq-number\">{rfq.rfqNumber}</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Badge\n              className={`px-3 py-1 ${\n                rfq.status === 'draft' ? 'bg-gray-100 text-gray-800' :\n                rfq.status === 'submitted' ? 'bg-blue-100 text-blue-800' :\n                rfq.status === 'under_review' ? 'bg-yellow-100 text-yellow-800' :\n                rfq.status === 'quoted' ? 'bg-green-100 text-green-800' :\n                'bg-gray-100 text-gray-800'\n              }`}\n              data-testid=\"badge-rfq-status\"\n            >\n              {(rfq.status || 'draft').replace('_', ' ').toUpperCase()}\n            </Badge>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex items-center space-x-4\">\n          {(rfq.status === 'submitted' || rfq.status === 'under_review') && (\n            <Dialog open={showInviteDialog} onOpenChange={setShowInviteDialog}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-invite-suppliers\">\n                  <Users className=\"h-4 w-4 mr-2\" />\n                  Invite Suppliers\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>Invite Suppliers to Quote</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    Select verified suppliers to invite for this RFQ:\n                  </p>\n                  <div className=\"max-h-80 overflow-y-auto space-y-2\">\n                    {verifiedSuppliers.length === 0 ? (\n                      <p className=\"text-center text-muted-foreground py-8\">\n                        No verified suppliers available\n                      </p>\n                    ) : (\n                      verifiedSuppliers.map((supplier: any) => (\n                        <div\n                          key={supplier.user.id}\n                          className=\"flex items-center space-x-3 p-3 border rounded-lg hover:bg-muted/50\"\n                        >\n                          <input\n                            type=\"checkbox\"\n                            id={supplier.user.id}\n                            checked={selectedSuppliers.includes(supplier.user.id)}\n                            onChange={(e) => {\n                              if (e.target.checked) {\n                                setSelectedSuppliers([...selectedSuppliers, supplier.user.id]);\n                              } else {\n                                setSelectedSuppliers(selectedSuppliers.filter(id => id !== supplier.user.id));\n                              }\n                            }}\n                            className=\"h-4 w-4\"\n                            data-testid={`checkbox-supplier-${supplier.user.id}`}\n                          />\n                          <label htmlFor={supplier.user.id} className=\"flex-1 cursor-pointer\">\n                            <div>\n                              <p className=\"font-medium\">{supplier.companyName}</p>\n                              <p className=\"text-sm text-muted-foreground\">{supplier.user.email}</p>\n                              <div className=\"flex items-center space-x-2 mt-1\">\n                                <UserCheck className=\"h-3 w-3 text-green-500\" />\n                                <span className=\"text-xs text-green-600\">\n                                  {supplier.profile?.verifiedStatus?.charAt(0).toUpperCase() + supplier.profile?.verifiedStatus?.slice(1) || 'Verified'}\n                                </span>\n                              </div>\n                            </div>\n                          </label>\n                        </div>\n                      ))\n                    )}\n                  </div>\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setShowInviteDialog(false)}\n                      data-testid=\"button-cancel-invite\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      onClick={handleInviteSuppliers}\n                      disabled={selectedSuppliers.length === 0 || inviteSuppliersMutation.isPending}\n                      data-testid=\"button-confirm-invite\"\n                    >\n                      {inviteSuppliersMutation.isPending ? 'Inviting...' : `Invite ${selectedSuppliers.length} Supplier${selectedSuppliers.length !== 1 ? 's' : ''}`}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          )}\n\n          <Dialog open={showStatusDialog} onOpenChange={setShowStatusDialog}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" data-testid=\"button-update-status\">\n                Update Status\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Update RFQ Status</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"status\">New Status</Label>\n                  <Select onValueChange={setNewStatus} value={newStatus}>\n                    <SelectTrigger data-testid=\"select-new-status\">\n                      <SelectValue placeholder=\"Select status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"under_review\">Under Review</SelectItem>\n                      <SelectItem value=\"quoted\">Quoted</SelectItem>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                      <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setShowStatusDialog(false)}\n                    data-testid=\"button-cancel-status\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={handleUpdateStatus}\n                    disabled={!newStatus || updateStatusMutation.isPending}\n                    data-testid=\"button-confirm-status\"\n                  >\n                    {updateStatusMutation.isPending ? 'Updating...' : 'Update Status'}\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Main Details */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Basic Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Package className=\"h-5 w-5 mr-2\" />\n                  Basic Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Industry</p>\n                    <p className=\"font-medium\" data-testid=\"text-industry\">\n                      {rfq.details?.industry?.replace('_', ' ')?.replace(/\\b\\w/g, (l: string) => l.toUpperCase()) || 'N/A'}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Process</p>\n                    <p className=\"font-medium\" data-testid=\"text-process\">\n                      {rfq.details?.sku?.processName || 'N/A'}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Quantity</p>\n                    <p className=\"font-medium\" data-testid=\"text-quantity\">\n                      {rfq.details?.items?.[0]?.quantity} {rfq.details?.items?.[0]?.unit}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Priority</p>\n                    <p className=\"font-medium capitalize\" data-testid=\"text-priority\">\n                      {rfq.details?.items?.[0]?.priority || 'Standard'}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Buyer</p>\n                    <p className=\"font-medium\" data-testid=\"text-buyer\">\n                      {rfq.buyerId ? `Buyer-${rfq.buyerId.slice(-6)}` : 'Unknown'}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Technical Specifications */}\n            {rfq.details?.items?.[0] && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Technical Specifications</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {rfq.details.items[0].material && (\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Material</p>\n                        <p className=\"font-medium\" data-testid=\"text-material\">{rfq.details.items[0].material}</p>\n                      </div>\n                    )}\n                    {rfq.details.items[0].tolerance && (\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Tolerance</p>\n                        <p className=\"font-medium\" data-testid=\"text-tolerance\">{rfq.details.items[0].tolerance}</p>\n                      </div>\n                    )}\n                  </div>\n                  {rfq.details.items[0].specialRequirements && (\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Special Requirements</p>\n                      <p className=\"font-medium\" data-testid=\"text-special-requirements\">\n                        {rfq.details.items[0].specialRequirements}\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Files */}\n            {rfq.details?.files && rfq.details.files.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <FileText className=\"h-5 w-5 mr-2\" />\n                    Attached Files\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {rfq.details.files.map((file: any, index: number) => (\n                      <div\n                        key={index}\n                        className=\"flex items-center justify-between p-3 border rounded-lg\"\n                        data-testid={`file-${index}`}\n                      >\n                        <div className=\"flex items-center space-x-3\">\n                          <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                          <div>\n                            <p className=\"font-medium\">{file.name}</p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {(file.size / 1024 / 1024).toFixed(2)} MB\n                            </p>\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDownloadFile(file)}\n                          data-testid={`button-download-file-${index}`}\n                        >\n                          <Download className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Status & Timeline */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Calendar className=\"h-5 w-5 mr-2\" />\n                  Timeline\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Created</p>\n                  <p className=\"font-medium\" data-testid=\"text-created-date\">\n                    {new Date(rfq.createdAt).toLocaleDateString()}\n                  </p>\n                </div>\n                {rfq.details?.items?.[0]?.targetDeliveryDate && (\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Target Delivery</p>\n                    <p className=\"font-medium\" data-testid=\"text-target-delivery\">\n                      {new Date(rfq.details.items[0].targetDeliveryDate).toLocaleDateString()}\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Budget Information */}\n            {rfq.budgetRange && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Budget Range</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-budget-range\">\n                      ₹{rfq.budgetRange.min?.toLocaleString()} - ₹{rfq.budgetRange.max?.toLocaleString()}\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Additional Options */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Additional Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                {rfq.ndaRequired && (\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                    <span>NDA Required</span>\n                  </div>\n                )}\n                {rfq.confidential && (\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n                    <span>Confidential RFQ</span>\n                  </div>\n                )}\n                {rfq.details?.items?.[0]?.toolingRequired && (\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    <span>Tooling Required</span>\n                  </div>\n                )}\n                {rfq.details?.items?.[0]?.sampleRequired && (\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n                    <span>Sample Required</span>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":21421},"client/src/pages/buyer/rfq-detail.tsx":{"content":"import { useParams } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowLeft, FileText, Download, Calendar, User, Package } from 'lucide-react';\nimport { authenticatedApiClient } from '@/lib/supabase';\nimport { useLocation } from 'wouter';\n\nexport default function RFQDetail() {\n  const { id } = useParams();\n  const [, setLocation] = useLocation();\n\n  const { data: rfq, isLoading } = useQuery({\n    queryKey: [`/api/protected/rfqs/${id}`],\n    queryFn: () => authenticatedApiClient.get(`/api/protected/rfqs/${id}`),\n    enabled: !!id,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center\">\n            <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Loading RFQ details...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!rfq) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"max-w-6xl mx-auto text-center\">\n          <h1 className=\"text-2xl font-bold text-destructive mb-4\">RFQ Not Found</h1>\n          <p className=\"text-muted-foreground mb-6\">The requested RFQ could not be found.</p>\n          <Button onClick={() => setLocation('/buyer/rfqs')}>\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to RFQs\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const handleDownloadFile = (file: any) => {\n    try {\n      const link = document.createElement('a');\n      link.href = file.data;\n      link.download = file.name;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (error) {\n      console.error('Error downloading file:', error);\n    }\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"max-w-6xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setLocation('/buyer/rfqs')}\n              data-testid=\"button-back-to-rfqs\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to RFQs\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold\" data-testid=\"heading-rfq-title\">{rfq.title}</h1>\n              <p className=\"text-muted-foreground\" data-testid=\"text-rfq-number\">{rfq.rfqNumber}</p>\n            </div>\n          </div>\n          <Badge\n            className={`px-3 py-1 ${\n              rfq.status === 'draft' ? 'bg-gray-100 text-gray-800' :\n              rfq.status === 'submitted' ? 'bg-blue-100 text-blue-800' :\n              rfq.status === 'under_review' ? 'bg-yellow-100 text-yellow-800' :\n              rfq.status === 'quoted' ? 'bg-green-100 text-green-800' :\n              'bg-gray-100 text-gray-800'\n            }`}\n            data-testid=\"badge-rfq-status\"\n          >\n            {(rfq.status || 'draft').replace('_', ' ').toUpperCase()}\n          </Badge>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Main Details */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Basic Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Package className=\"h-5 w-5 mr-2\" />\n                  Basic Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Industry</p>\n                    <p className=\"font-medium\" data-testid=\"text-industry\">\n                      {rfq.details?.industry?.replace('_', ' ')?.replace(/\\b\\w/g, (l: string) => l.toUpperCase()) || 'N/A'}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Process</p>\n                    <p className=\"font-medium\" data-testid=\"text-process\">\n                      {rfq.details?.sku?.processName || 'N/A'}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Quantity</p>\n                    <p className=\"font-medium\" data-testid=\"text-quantity\">\n                      {rfq.details?.items?.[0]?.quantity} {rfq.details?.items?.[0]?.unit}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Priority</p>\n                    <p className=\"font-medium capitalize\" data-testid=\"text-priority\">\n                      {rfq.details?.items?.[0]?.priority || 'Standard'}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Technical Specifications */}\n            {rfq.details?.items?.[0] && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Technical Specifications</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {rfq.details.items[0].material && (\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Material</p>\n                        <p className=\"font-medium\" data-testid=\"text-material\">{rfq.details.items[0].material}</p>\n                      </div>\n                    )}\n                    {rfq.details.items[0].tolerance && (\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Tolerance</p>\n                        <p className=\"font-medium\" data-testid=\"text-tolerance\">{rfq.details.items[0].tolerance}</p>\n                      </div>\n                    )}\n                  </div>\n                  {rfq.details.items[0].specialRequirements && (\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Special Requirements</p>\n                      <p className=\"font-medium\" data-testid=\"text-special-requirements\">\n                        {rfq.details.items[0].specialRequirements}\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Files */}\n            {rfq.details?.files && rfq.details.files.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <FileText className=\"h-5 w-5 mr-2\" />\n                    Attached Files\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {rfq.details.files.map((file: any, index: number) => (\n                      <div\n                        key={index}\n                        className=\"flex items-center justify-between p-3 border rounded-lg\"\n                        data-testid={`file-${index}`}\n                      >\n                        <div className=\"flex items-center space-x-3\">\n                          <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                          <div>\n                            <p className=\"font-medium\">{file.name}</p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {(file.size / 1024 / 1024).toFixed(2)} MB\n                            </p>\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDownloadFile(file)}\n                          data-testid={`button-download-file-${index}`}\n                        >\n                          <Download className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Status & Timeline */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Calendar className=\"h-5 w-5 mr-2\" />\n                  Timeline\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Created</p>\n                  <p className=\"font-medium\" data-testid=\"text-created-date\">\n                    {new Date(rfq.createdAt).toLocaleDateString()}\n                  </p>\n                </div>\n                {rfq.details?.items?.[0]?.targetDeliveryDate && (\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Target Delivery</p>\n                    <p className=\"font-medium\" data-testid=\"text-target-delivery\">\n                      {new Date(rfq.details.items[0].targetDeliveryDate).toLocaleDateString()}\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Budget Information */}\n            {rfq.budgetRange && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Budget Range</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-budget-range\">\n                      ₹{rfq.budgetRange.min?.toLocaleString()} - ₹{rfq.budgetRange.max?.toLocaleString()}\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Additional Options */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Additional Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                {rfq.ndaRequired && (\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                    <span>NDA Required</span>\n                  </div>\n                )}\n                {rfq.confidential && (\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n                    <span>Confidential RFQ</span>\n                  </div>\n                )}\n                {rfq.details?.items?.[0]?.toolingRequired && (\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    <span>Tooling Required</span>\n                  </div>\n                )}\n                {rfq.details?.items?.[0]?.sampleRequired && (\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n                    <span>Sample Required</span>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11812},"client/src/pages/admin/order-management.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Package, Eye, Truck, Clock, CheckCircle, AlertCircle } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { authenticatedApiClient } from '@/lib/supabase';\nimport { formatCurrency } from '@/lib/utils';\n\nconst ORDER_STATUS_COLORS = {\n  pending: 'bg-yellow-100 text-yellow-800',\n  confirmed: 'bg-blue-100 text-blue-800',\n  in_production: 'bg-purple-100 text-purple-800',\n  quality_check: 'bg-orange-100 text-orange-800',\n  shipped: 'bg-green-100 text-green-800',\n  delivered: 'bg-gray-100 text-gray-800',\n  cancelled: 'bg-red-100 text-red-800',\n};\n\nexport default function AdminOrderManagement() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n\n  const { data: orders = [], isLoading } = useQuery({\n    queryKey: ['/api/protected/admin/orders'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/admin/orders'),\n  });\n\n  const filteredOrders = orders.filter((order: any) => {\n    const matchesSearch = order.orderNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         order.buyerEmail?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         order.supplierName?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || order.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const statusOptions = [\n    { value: 'all', label: 'All Status' },\n    { value: 'pending', label: 'Pending' },\n    { value: 'confirmed', label: 'Confirmed' },\n    { value: 'in_production', label: 'In Production' },\n    { value: 'quality_check', label: 'Quality Check' },\n    { value: 'shipped', label: 'Shipped' },\n    { value: 'delivered', label: 'Delivered' },\n    { value: 'cancelled', label: 'Cancelled' },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"text-center\">\n            <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Loading orders...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Order Management</h1>\n        <p className=\"text-muted-foreground mt-2\">Track and manage all orders across the platform</p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Package className=\"h-8 w-8 text-blue-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Orders</p>\n                <p className=\"text-2xl font-bold\">{orders.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Clock className=\"h-8 w-8 text-yellow-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Pending</p>\n                <p className=\"text-2xl font-bold\">\n                  {orders.filter((o: any) => o.status === 'pending').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Truck className=\"h-8 w-8 text-purple-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">In Production</p>\n                <p className=\"text-2xl font-bold\">\n                  {orders.filter((o: any) => o.status === 'in_production').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <CheckCircle className=\"h-8 w-8 text-green-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Delivered</p>\n                <p className=\"text-2xl font-bold\">\n                  {orders.filter((o: any) => o.status === 'delivered').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <Input\n                placeholder=\"Search by order number, buyer, or supplier...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                data-testid=\"input-search-orders\"\n              />\n            </div>\n            <div className=\"w-48\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger data-testid=\"select-status-filter\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {statusOptions.map(option => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Orders Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>All Orders ({filteredOrders.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {filteredOrders.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Package className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-muted-foreground mb-2\">No Orders Found</h3>\n              <p className=\"text-muted-foreground\">\n                {searchTerm || statusFilter !== 'all' \n                  ? 'No orders match your current filters.' \n                  : 'No orders have been placed yet.'}\n              </p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b\">\n                    <th className=\"text-left py-4 px-6 font-medium text-muted-foreground\">Order #</th>\n                    <th className=\"text-left py-4 px-6 font-medium text-muted-foreground\">Buyer</th>\n                    <th className=\"text-left py-4 px-6 font-medium text-muted-foreground\">Supplier</th>\n                    <th className=\"text-left py-4 px-6 font-medium text-muted-foreground\">Product</th>\n                    <th className=\"text-left py-4 px-6 font-medium text-muted-foreground\">Value</th>\n                    <th className=\"text-left py-4 px-6 font-medium text-muted-foreground\">Status</th>\n                    <th className=\"text-left py-4 px-6 font-medium text-muted-foreground\">Created</th>\n                    <th className=\"text-left py-4 px-6 font-medium text-muted-foreground\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredOrders.map((order: any) => (\n                    <tr key={order.id} className=\"border-b hover:bg-muted/50\">\n                      <td className=\"py-4 px-6 font-mono text-sm\" data-testid={`text-order-number-${order.id}`}>\n                        {order.orderNumber || order.id?.slice(-8)}\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <div>\n                          <p className=\"font-medium\">{order.buyerName || 'N/A'}</p>\n                          <p className=\"text-sm text-muted-foreground\">{order.buyerEmail}</p>\n                        </div>\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <div>\n                          <p className=\"font-medium\">{order.supplierName || 'N/A'}</p>\n                          <p className=\"text-sm text-muted-foreground\">{order.supplierEmail}</p>\n                        </div>\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <div>\n                          <p className=\"font-medium\">{order.productName || order.title || 'N/A'}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Qty: {order.quantity || 'N/A'}\n                          </p>\n                        </div>\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <div>\n                          <p className=\"font-bold text-green-600\">\n                            {order.totalAmount ? formatCurrency(order.totalAmount) : 'N/A'}\n                          </p>\n                          {order.advancePayment && (\n                            <p className=\"text-sm text-muted-foreground\">\n                              Advance: {formatCurrency(order.advancePayment)}\n                            </p>\n                          )}\n                        </div>\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <Badge className={ORDER_STATUS_COLORS[order.status as keyof typeof ORDER_STATUS_COLORS] || ORDER_STATUS_COLORS.pending}>\n                          {(order.status || 'pending').replace('_', ' ').toUpperCase()}\n                        </Badge>\n                      </td>\n                      <td className=\"py-4 px-6 text-sm text-muted-foreground\">\n                        {order.createdAt ? new Date(order.createdAt).toLocaleDateString() : 'N/A'}\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          data-testid={`button-view-order-${order.id}`}\n                        >\n                          <Eye className=\"h-4 w-4 mr-1\" />\n                          View\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11035},"client/src/pages/supplier/rfq-detail.tsx":{"content":"import { useParams, useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { ArrowLeft, Package, FileText, Calendar, Factory, Target } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { authenticatedApiClient } from '@/lib/supabase';\n\nexport default function SupplierRFQDetail() {\n  const { id } = useParams<{ id: string }>();\n  const [, setLocation] = useLocation();\n\n  const { data: rfq, isLoading } = useQuery({\n    queryKey: [`/api/protected/rfqs/${id}`],\n    queryFn: () => authenticatedApiClient.get(`/api/protected/rfqs/${id}`),\n    enabled: !!id,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center\">\n            <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Loading RFQ details...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!rfq) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"max-w-6xl mx-auto text-center\">\n          <h1 className=\"text-2xl font-bold text-destructive mb-4\">RFQ Not Found</h1>\n          <p className=\"text-muted-foreground mb-6\">The requested RFQ could not be found.</p>\n          <Button onClick={() => setLocation('/supplier/quotes')}>\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Quotes\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const handleDownloadFile = (file: any) => {\n    try {\n      const link = document.createElement('a');\n      link.href = file.data;\n      link.download = file.name;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (error) {\n      console.error('Error downloading file:', error);\n    }\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"max-w-6xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setLocation('/supplier/quotes')}\n              data-testid=\"button-back-to-quotes\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Quotes\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold\" data-testid=\"heading-rfq-title\">{rfq.title}</h1>\n              <p className=\"text-muted-foreground\" data-testid=\"text-rfq-number\">{rfq.rfqNumber}</p>\n            </div>\n          </div>\n          <Badge\n            className={`px-3 py-1 ${\n              rfq.status === 'draft' ? 'bg-gray-100 text-gray-800' :\n              rfq.status === 'submitted' ? 'bg-blue-100 text-blue-800' :\n              rfq.status === 'under_review' ? 'bg-yellow-100 text-yellow-800' :\n              rfq.status === 'invited' ? 'bg-purple-100 text-purple-800' :\n              rfq.status === 'quoted' ? 'bg-green-100 text-green-800' :\n              'bg-gray-100 text-gray-800'\n            }`}\n            data-testid=\"badge-rfq-status\"\n          >\n            {(rfq.status || 'draft').replace('_', ' ').toUpperCase()}\n          </Badge>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Main Details */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Basic Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Package className=\"h-5 w-5 mr-2\" />\n                  Basic Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Industry</p>\n                    <p className=\"font-medium\" data-testid=\"text-industry\">\n                      {rfq.details?.industry?.replace('_', ' ')?.replace(/\\b\\w/g, (l: string) => l.toUpperCase()) || 'N/A'}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Process</p>\n                    <p className=\"font-medium\" data-testid=\"text-process\">\n                      {rfq.details?.sku?.processName || 'N/A'}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Quantity</p>\n                    <p className=\"font-medium\" data-testid=\"text-quantity\">\n                      {rfq.details?.items?.[0]?.quantity || 'N/A'} {rfq.details?.items?.[0]?.unit || ''}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Target Unit Price</p>\n                    <p className=\"font-medium\" data-testid=\"text-target-price\">\n                      {rfq.details?.items?.[0]?.targetUnitPrice \n                        ? `₹${rfq.details.items[0].targetUnitPrice}`\n                        : 'Not specified'}\n                    </p>\n                  </div>\n                </div>\n                \n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Description</p>\n                  <p className=\"text-foreground\" data-testid=\"text-description\">\n                    {rfq.description || 'No description provided'}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Technical Specifications */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Factory className=\"h-5 w-5 mr-2\" />\n                  Technical Specifications\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {rfq.details?.items?.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {rfq.details.items.map((item: any, index: number) => (\n                      <div key={index} className=\"border border-border rounded-lg p-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <p className=\"text-sm text-muted-foreground\">Material</p>\n                            <p className=\"font-medium\">{item.material || 'N/A'}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-sm text-muted-foreground\">Dimensions</p>\n                            <p className=\"font-medium\">{item.dimensions || 'N/A'}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-sm text-muted-foreground\">Tolerance</p>\n                            <p className=\"font-medium\">{item.tolerance || 'N/A'}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-sm text-muted-foreground\">Finish</p>\n                            <p className=\"font-medium\">{item.finish || 'N/A'}</p>\n                          </div>\n                        </div>\n                        {item.specifications && (\n                          <div className=\"mt-4\">\n                            <p className=\"text-sm text-muted-foreground\">Additional Specifications</p>\n                            <p className=\"text-foreground\">{item.specifications}</p>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-muted-foreground\">No technical specifications provided</p>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Attached Files */}\n            {rfq.details?.attachments?.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <FileText className=\"h-5 w-5 mr-2\" />\n                    Attached Files\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                    {rfq.details.attachments.map((file: any, index: number) => (\n                      <div\n                        key={index}\n                        className=\"flex items-center space-x-3 p-3 border border-border rounded-lg hover:bg-muted/50 cursor-pointer\"\n                        onClick={() => handleDownloadFile(file)}\n                        data-testid={`file-attachment-${index}`}\n                      >\n                        <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-sm font-medium truncate\">{file.name}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {file.size ? `${(file.size / 1024).toFixed(1)} KB` : 'Unknown size'}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Timeline */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Calendar className=\"h-5 w-5 mr-2\" />\n                  Timeline\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Created</p>\n                  <p className=\"font-medium\" data-testid=\"text-created-date\">\n                    {new Date(rfq.createdAt).toLocaleDateString()}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Quote Deadline</p>\n                  <p className=\"font-medium text-orange-600\" data-testid=\"text-quote-deadline\">\n                    {rfq.details?.quoteDeadline \n                      ? new Date(rfq.details.quoteDeadline).toLocaleDateString()\n                      : 'Not specified'}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Expected Delivery</p>\n                  <p className=\"font-medium\" data-testid=\"text-expected-delivery\">\n                    {rfq.details?.expectedDeliveryDate \n                      ? new Date(rfq.details.expectedDeliveryDate).toLocaleDateString()\n                      : 'Not specified'}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Requirements */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Target className=\"h-5 w-5 mr-2\" />\n                  Requirements\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {rfq.details?.requiresSample && (\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n                    <span>Sample Required</span>\n                  </div>\n                )}\n                {rfq.details?.urgentRequest && (\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n                    <span>Urgent Request</span>\n                  </div>\n                )}\n                {rfq.details?.qualityCertification && (\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    <span>Quality Certification Required</span>\n                  </div>\n                )}\n                {!rfq.details?.requiresSample && !rfq.details?.urgentRequest && !rfq.details?.qualityCertification && (\n                  <p className=\"text-sm text-muted-foreground\">No special requirements</p>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Action Button */}\n            <Button \n              onClick={() => setLocation('/supplier/quotes')}\n              className=\"w-full\"\n              data-testid=\"button-back-to-quotes-action\"\n            >\n              Back to Submit Quote\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12910},"client/src/pages/supplier/orders.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Package, Clock, CheckCircle, XCircle, TrendingUp } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { authenticatedApiClient } from '@/lib/supabase';\n\nexport default function SupplierOrders() {\n  const { data: orders = [], isLoading } = useQuery({\n    queryKey: ['/api/protected/orders'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/orders'),\n  });\n\n  const activeOrders = orders.filter((order: any) => \n    ['confirmed', 'in_production', 'shipped'].includes(order.status)\n  );\n  const completedOrders = orders.filter((order: any) => order.status === 'delivered');\n  const totalRevenue = orders.reduce((sum: number, order: any) => \n    sum + (parseFloat(order.totalAmount) || 0), 0\n  );\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed': return 'bg-blue-100 text-blue-800';\n      case 'in_production': return 'bg-yellow-100 text-yellow-800';\n      case 'shipped': return 'bg-purple-100 text-purple-800';\n      case 'delivered': return 'bg-green-100 text-green-800';\n      case 'cancelled': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'confirmed': return <Clock className=\"h-4 w-4\" />;\n      case 'in_production': return <Package className=\"h-4 w-4\" />;\n      case 'shipped': return <TrendingUp className=\"h-4 w-4\" />;\n      case 'delivered': return <CheckCircle className=\"h-4 w-4\" />;\n      case 'cancelled': return <XCircle className=\"h-4 w-4\" />;\n      default: return <Clock className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Orders</h1>\n        <p className=\"text-muted-foreground mt-2\">Track and manage your production orders</p>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                <Package className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-active-orders\">\n                  {activeOrders.length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Active Orders</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-completed-orders\">\n                  {completedOrders.length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Completed Orders</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center\">\n                <TrendingUp className=\"h-5 w-5 text-purple-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-orders\">\n                  {orders.length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Total Orders</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-emerald-100 rounded-full flex items-center justify-center\">\n                <TrendingUp className=\"h-5 w-5 text-emerald-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-revenue\">\n                  ₹{totalRevenue.toLocaleString()}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Total Revenue</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Orders List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>All Orders</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8 text-muted-foreground\">Loading orders...</div>\n          ) : orders.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Package className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-foreground mb-2\">No orders yet</h3>\n              <p className=\"text-muted-foreground\">\n                Orders will appear here when buyers purchase your offers\n              </p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Order ID</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">RFQ</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Total Amount</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Status</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Order Date</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Expected Delivery</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {orders.map((order: any) => (\n                    <tr key={order.id} data-testid={`row-order-${order.id}`}>\n                      <td className=\"py-4 px-6 text-sm font-mono\" data-testid={`text-order-id-${order.id}`}>\n                        {order.id.slice(-8)}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm\" data-testid={`text-order-rfq-${order.id}`}>\n                        {order.rfqId?.slice(-8) || 'N/A'}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm font-medium\" data-testid={`text-order-amount-${order.id}`}>\n                        ₹{parseFloat(order.totalAmount || '0').toLocaleString()}\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <Badge className={getStatusColor(order.status)}>\n                          <span className=\"flex items-center space-x-1\">\n                            {getStatusIcon(order.status)}\n                            <span>{order.status.replace('_', ' ').toUpperCase()}</span>\n                          </span>\n                        </Badge>\n                      </td>\n                      <td className=\"py-4 px-6 text-sm text-muted-foreground\">\n                        {new Date(order.createdAt).toLocaleDateString()}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm text-muted-foreground\">\n                        {order.expectedDeliveryDate \n                          ? new Date(order.expectedDeliveryDate).toLocaleDateString()\n                          : 'TBD'}\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          data-testid={`button-view-order-${order.id}`}\n                        >\n                          View Details\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8686},"client/src/pages/supplier/payouts.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { DollarSign, Calendar, TrendingUp, Clock, CheckCircle } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { authenticatedApiClient } from '@/lib/supabase';\n\nexport default function SupplierPayouts() {\n  const { data: payouts = [], isLoading } = useQuery({\n    queryKey: ['/api/protected/suppliers/payouts'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/suppliers/payouts'),\n  });\n\n  const { data: orders = [] } = useQuery({\n    queryKey: ['/api/protected/orders'],\n    queryFn: () => authenticatedApiClient.get('/api/protected/orders'),\n  });\n\n  const pendingPayouts = payouts.filter((payout: any) => payout.status === 'pending');\n  const completedPayouts = payouts.filter((payout: any) => payout.status === 'completed');\n  const totalEarnings = completedPayouts.reduce((sum: number, payout: any) => \n    sum + (parseFloat(payout.amount) || 0), 0\n  );\n  const pendingAmount = pendingPayouts.reduce((sum: number, payout: any) => \n    sum + (parseFloat(payout.amount) || 0), 0\n  );\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'processing': return 'bg-blue-100 text-blue-800';\n      case 'completed': return 'bg-green-100 text-green-800';\n      case 'failed': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pending': return <Clock className=\"h-4 w-4\" />;\n      case 'processing': return <TrendingUp className=\"h-4 w-4\" />;\n      case 'completed': return <CheckCircle className=\"h-4 w-4\" />;\n      case 'failed': return <Clock className=\"h-4 w-4\" />;\n      default: return <Clock className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Payouts</h1>\n        <p className=\"text-muted-foreground mt-2\">Track your earnings and payment history</p>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                <DollarSign className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-earnings\">\n                  ₹{totalEarnings.toLocaleString()}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Total Earnings</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-yellow-100 rounded-full flex items-center justify-center\">\n                <Clock className=\"h-5 w-5 text-yellow-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-pending-amount\">\n                  ₹{pendingAmount.toLocaleString()}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Pending Amount</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                <TrendingUp className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-completed-payouts\">\n                  {completedPayouts.length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Completed Payouts</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center\">\n                <Calendar className=\"h-5 w-5 text-purple-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-this-month\">\n                  {completedPayouts.filter((p: any) => {\n                    const payoutDate = new Date(p.completedAt || p.createdAt);\n                    const now = new Date();\n                    return payoutDate.getMonth() === now.getMonth() && \n                           payoutDate.getFullYear() === now.getFullYear();\n                  }).length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">This Month</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Payout Information */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8\">\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle>Payout Schedule</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"p-4 bg-blue-50 dark:bg-blue-950/30 rounded-lg\">\n              <h3 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-2\">Payment Terms</h3>\n              <ul className=\"text-sm text-blue-800 dark:text-blue-200 space-y-1\">\n                <li>• Payments are processed within 7-10 business days after order completion</li>\n                <li>• Minimum payout amount: ₹1,000</li>\n                <li>• Advance payments: Released upon order confirmation</li>\n                <li>• Final payments: Released upon delivery confirmation</li>\n              </ul>\n            </div>\n            <div className=\"p-4 bg-green-50 dark:bg-green-950/30 rounded-lg\">\n              <h3 className=\"font-semibold text-green-900 dark:text-green-100 mb-2\">Payment Methods</h3>\n              <ul className=\"text-sm text-green-800 dark:text-green-200 space-y-1\">\n                <li>• Bank transfer (NEFT/RTGS)</li>\n                <li>• UPI payments</li>\n                <li>• Digital wallet transfers</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-update-payment-info\">\n              Update Payment Info\n            </Button>\n            <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-download-statements\">\n              Download Statements\n            </Button>\n            <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-tax-documents\">\n              Tax Documents\n            </Button>\n            <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-contact-support\">\n              Contact Support\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Payouts History */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Payout History</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8 text-muted-foreground\">Loading payouts...</div>\n          ) : payouts.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <DollarSign className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-foreground mb-2\">No payouts yet</h3>\n              <p className=\"text-muted-foreground\">\n                Complete orders to start receiving payments\n              </p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Payout ID</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Order ID</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Amount</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Type</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Status</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Date</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {payouts.map((payout: any) => (\n                    <tr key={payout.id} data-testid={`row-payout-${payout.id}`}>\n                      <td className=\"py-4 px-6 text-sm font-mono\" data-testid={`text-payout-id-${payout.id}`}>\n                        {payout.id.slice(-8)}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm\" data-testid={`text-payout-order-${payout.id}`}>\n                        {payout.orderId?.slice(-8) || 'N/A'}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm font-medium\" data-testid={`text-payout-amount-${payout.id}`}>\n                        ₹{parseFloat(payout.amount || '0').toLocaleString()}\n                      </td>\n                      <td className=\"py-4 px-6 text-sm\">\n                        <Badge variant=\"outline\">\n                          {payout.type === 'advance' ? 'Advance' : 'Final'}\n                        </Badge>\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <Badge className={getStatusColor(payout.status)}>\n                          <span className=\"flex items-center space-x-1\">\n                            {getStatusIcon(payout.status)}\n                            <span>{payout.status.toUpperCase()}</span>\n                          </span>\n                        </Badge>\n                      </td>\n                      <td className=\"py-4 px-6 text-sm text-muted-foreground\">\n                        {new Date(payout.createdAt).toLocaleDateString()}\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          data-testid={`button-view-payout-${payout.id}`}\n                        >\n                          View Details\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11331}},"version":1}